{
  "address": "0x7478a0A07976D66cB8F84a5181FBcE84b18C844a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nativeRewardToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolReward",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            }
          ],
          "internalType": "struct MasterChefStrategyForLP.SwapPairs",
          "name": "_swapPairs",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_stakingRewards",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_timelock",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minTokensToReinvest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "adminFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "devFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reinvestRewardBips",
              "type": "uint256"
            }
          ],
          "internalType": "struct MasterChefStrategy.StrategySettings",
          "name": "_strategySettings",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AllowDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "DepositsEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RemoveDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "UpdateDevAddr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateDevFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxTokensToDepositWithoutReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITS_ENABLED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEV_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "allowDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedDepositors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateDeployedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForDepositTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfAllowedDepositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "podLeader",
      "outputs": [
        {
          "internalType": "contract IAvaiPodLeader",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "removeDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minReturnAmountAccepted",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "disableDeposits",
          "type": "bool"
        }
      ],
      "name": "rescueDeployedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapPairRewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "updateDepositsEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTokensToDepositWithoutReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x423347b4b30a913bf9838764e0bbfce1631fe6c0f64e71f3b95b705711302d96",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x7478a0A07976D66cB8F84a5181FBcE84b18C844a",
    "transactionIndex": 0,
    "gasUsed": "4135284",
    "logsBloom": "0x00000000000200000000000000000000400000020000000004880000010000000000020a00000000000000000000000000000000000000000000000000200000010000000000000000000008000080000001000000000000080000000000000000000000020000000000000000000840000000001004080000000000000000400000000000000000000000020000000000040008000000000400000010000000020000000000000400440000000000200001020000000000000000000000080000000000000000000000000000000000000000000002000000000000020020000010020010000000000000000000000082000000004000000000000000000000",
    "blockHash": "0xb8cb64b4db0618cb016209b4bce9487f2d255a7c027d1d24f8f3ce04039deef4",
    "transactionHash": "0x423347b4b30a913bf9838764e0bbfce1631fe6c0f64e71f3b95b705711302d96",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6736848,
        "transactionHash": "0x423347b4b30a913bf9838764e0bbfce1631fe6c0f64e71f3b95b705711302d96",
        "address": "0x7478a0A07976D66cB8F84a5181FBcE84b18C844a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb8cb64b4db0618cb016209b4bce9487f2d255a7c027d1d24f8f3ce04039deef4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6736848,
        "transactionHash": "0x423347b4b30a913bf9838764e0bbfce1631fe6c0f64e71f3b95b705711302d96",
        "address": "0x1A9Bd67c82C0e8E47C3ad2FA772FCb9B7A831A37",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000007478a0a07976d66cb8f84a5181fbce84b18c844a",
          "0x000000000000000000000000111e1e97435b57467e79d4930acc4b7eb3d478ad"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0xb8cb64b4db0618cb016209b4bce9487f2d255a7c027d1d24f8f3ce04039deef4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6736848,
        "transactionHash": "0x423347b4b30a913bf9838764e0bbfce1631fe6c0f64e71f3b95b705711302d96",
        "address": "0x7478a0A07976D66cB8F84a5181FBcE84b18C844a",
        "topics": [
          "0x481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 2,
        "blockHash": "0xb8cb64b4db0618cb016209b4bce9487f2d255a7c027d1d24f8f3ce04039deef4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6736848,
        "transactionHash": "0x423347b4b30a913bf9838764e0bbfce1631fe6c0f64e71f3b95b705711302d96",
        "address": "0x7478a0A07976D66cB8F84a5181FBcE84b18C844a",
        "topics": [
          "0x3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 3,
        "blockHash": "0xb8cb64b4db0618cb016209b4bce9487f2d255a7c027d1d24f8f3ce04039deef4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6736848,
        "transactionHash": "0x423347b4b30a913bf9838764e0bbfce1631fe6c0f64e71f3b95b705711302d96",
        "address": "0x7478a0A07976D66cB8F84a5181FBcE84b18C844a",
        "topics": [
          "0x2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000258",
        "logIndex": 4,
        "blockHash": "0xb8cb64b4db0618cb016209b4bce9487f2d255a7c027d1d24f8f3ce04039deef4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6736848,
        "transactionHash": "0x423347b4b30a913bf9838764e0bbfce1631fe6c0f64e71f3b95b705711302d96",
        "address": "0x7478a0A07976D66cB8F84a5181FBcE84b18C844a",
        "topics": [
          "0xe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064",
        "logIndex": 5,
        "blockHash": "0xb8cb64b4db0618cb016209b4bce9487f2d255a7c027d1d24f8f3ce04039deef4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6736848,
        "transactionHash": "0x423347b4b30a913bf9838764e0bbfce1631fe6c0f64e71f3b95b705711302d96",
        "address": "0x7478a0A07976D66cB8F84a5181FBcE84b18C844a",
        "topics": [
          "0x7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 6,
        "blockHash": "0xb8cb64b4db0618cb016209b4bce9487f2d255a7c027d1d24f8f3ce04039deef4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6736848,
        "transactionHash": "0x423347b4b30a913bf9838764e0bbfce1631fe6c0f64e71f3b95b705711302d96",
        "address": "0x7478a0A07976D66cB8F84a5181FBcE84b18C844a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x0000000000000000000000008d36c5c6947adccd25ef49ea1aac2ceacfff0bd7"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xb8cb64b4db0618cb016209b4bce9487f2d255a7c027d1d24f8f3ce04039deef4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6736848,
        "transactionHash": "0x423347b4b30a913bf9838764e0bbfce1631fe6c0f64e71f3b95b705711302d96",
        "address": "0x7478a0A07976D66cB8F84a5181FBcE84b18C844a",
        "topics": [
          "0xc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 8,
        "blockHash": "0xb8cb64b4db0618cb016209b4bce9487f2d255a7c027d1d24f8f3ce04039deef4"
      }
    ],
    "blockNumber": 6736848,
    "cumulativeGasUsed": "4135284",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Yield Yak: OrcaDAO x PGL AVAI-ORCA",
    "0x1A9Bd67c82C0e8E47C3ad2FA772FCb9B7A831A37",
    "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
    "0x8B1d98A91F853218ddbb066F20b8c63E782e2430",
    {
      "poolReward": "0x73e6CB72a79dEa7ed75EF5eD6f8cFf86C9128eF5",
      "token0": "0xc72e0e8fde69f4834419bdfed5c74cd4d2d53ebf",
      "token1": "0x73e6CB72a79dEa7ed75EF5eD6f8cFf86C9128eF5"
    },
    "0x111E1E97435b57467E79d4930acc4B7EB3d478ad",
    "0",
    "0x8d36C5c6947ADCcd25Ef49Ea1aAC2ceACFff0bD7",
    {
      "minTokensToReinvest": "1000000000000000000",
      "adminFeeBips": 0,
      "devFeeBips": 600,
      "reinvestRewardBips": 100
    }
  ],
  "solcInputHash": "4593494debf4d720c71aa38efa5286bb",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nativeRewardToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poolReward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"internalType\":\"struct MasterChefStrategyForLP.SwapPairs\",\"name\":\"_swapPairs\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_stakingRewards\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minTokensToReinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestRewardBips\",\"type\":\"uint256\"}],\"internalType\":\"struct MasterChefStrategy.StrategySettings\",\"name\":\"_strategySettings\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AllowDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"DepositsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdateDevAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateDevFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTokensToDepositWithoutReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITS_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"allowDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedDepositors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateDeployedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDepositTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForDepositTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfAllowedDepositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"podLeader\",\"outputs\":[{\"internalType\":\"contract IAvaiPodLeader\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"removeDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minReturnAmountAccepted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"disableDeposits\",\"type\":\"bool\"}],\"name\":\"rescueDeployedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPairRewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"updateDepositsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxTokensToDepositWithoutReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"deposit(uint256)\":{\"params\":{\"amount\":\"Amount of tokens to deposit\"}},\"depositFor(address,uint256)\":{\"details\":\"Must mint receipt tokens to `account`\",\"params\":{\"account\":\"address to receive receipt tokens\",\"amount\":\"deposit tokens\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"Amount of tokens to deposit\",\"deadline\":\"The time at which to expire the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"estimateDeployedBalance()\":{\"returns\":{\"_0\":\"deposit tokens after withdraw fee\"}},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"getDepositTokensForShares(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"},\"returns\":{\"_0\":\"deposit tokens\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getSharesForDepositTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens\",\"params\":{\"amount\":\"deposit tokens\"},\"returns\":{\"_0\":\"receipt tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverAVAX(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"removeDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rescueDeployedFunds(uint256,bool)\":{\"params\":{\"disableDeposits\":\"bool\",\"minReturnAmountAccepted\":\"min deposit tokens to receive\"}},\"revokeAllowance(address,address)\":{\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"setAllowances()\":{\"details\":\"Restricted to avoid griefing attacks\"},\"totalDeposits()\":{\"returns\":{\"_0\":\"total deposits available on the contract\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAdminFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateDepositsEnabled(bool)\":{\"params\":{\"newValue\":\"bool\"}},\"updateDevAddr(address)\":{\"params\":{\"newValue\":\"address\"}},\"updateDevFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateReinvestReward(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowDepositor(address)\":{\"notice\":\"Add an allowed depositor\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Reward tokens avialable to strategy, including balance\"},\"deposit(uint256)\":{\"notice\":\"Deposit tokens to receive receipt tokens\"},\"depositFor(address,uint256)\":{\"notice\":\"Deposit on behalf of another account\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit using Permit\"},\"estimateDeployedBalance()\":{\"notice\":\"Estimate recoverable balance after withdraw fee\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward\"},\"getDepositTokensForShares(uint256)\":{\"notice\":\"Calculate deposit tokens for a given amount of receipt tokens\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getSharesForDepositTokens(uint256)\":{\"notice\":\"Calculate receipt tokens for a given amount of deposit tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"reinvest()\":{\"notice\":\"Reinvest reward tokens into deposit tokens\"},\"removeDepositor(address)\":{\"notice\":\"Remove an allowed depositor\"},\"rescueDeployedFunds(uint256,bool)\":{\"notice\":\"Rescue all available deployed deposit tokens back to Strategy\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"setAllowances()\":{\"notice\":\"Approve tokens for use in Strategy\"},\"totalDeposits()\":{\"notice\":\"This function returns a snapshot of last available quotes\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"updateAdminFee(uint256)\":{\"notice\":\"Update admin fee\"},\"updateDepositsEnabled(bool)\":{\"notice\":\"Enable/disable deposits\"},\"updateDevAddr(address)\":{\"notice\":\"Update devAddr\"},\"updateDevFee(uint256)\":{\"notice\":\"Update developer fee\"},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"notice\":\"Update reinvest max threshold before a deposit\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest min threshold\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"},\"withdraw(uint256)\":{\"notice\":\"Redeem receipt tokens for deposit tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/AvaiStrategyForLP.sol\":\"AvaiStrategyForLP\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/YakERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract YakERC20 {\\n    using SafeMath for uint256;\\n\\n    string public name = \\\"Yield Yak\\\";\\n    string public symbol = \\\"YRT\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n  \\n    mapping (address => mapping (address => uint256)) internal allowances;\\n    mapping (address => uint256) internal balances;\\n\\n    /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// @dev keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != uint256(-1)) {\\n            uint256 newAllowance = spenderAllowance.sub(amount, \\\"transferFrom: transfer amount exceeds allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(address from, address to, uint256 value) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from].sub(value, \\\"_transferTokens: transfer exceeds from balance\\\");\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from].sub(value, \\\"_burn: burn amount exceeds from balance\\\");\\n        totalSupply = totalSupply.sub(value, \\\"_burn: burn amount exceeds total supply\\\");\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(address signer, bytes32 encodeData, uint8 v, bytes32 r, bytes32 s) internal view {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                getDomainSeparator(),\\n                encodeData\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                VERSION_HASH,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\",\"keccak256\":\"0x9d569919319add1e8ee2020ad24e1cba09c67094b58a40f825522d1f7729de64\",\"license\":\"MIT\"},\"contracts/YakStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/Permissioned.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./YakERC20.sol\\\";\\n\\n/**\\n * @notice YakStrategy should be inherited by new strategies\\n */\\nabstract contract YakStrategyV2 is YakERC20, Ownable, Permissioned {\\n    using SafeMath for uint;\\n\\n\\n    IERC20 public depositToken;\\n    IERC20 public rewardToken;\\n    address public devAddr;\\n\\n    uint public MIN_TOKENS_TO_REINVEST;\\n    uint public MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST;\\n    bool public DEPOSITS_ENABLED;\\n\\n    uint public REINVEST_REWARD_BIPS;\\n    uint public ADMIN_FEE_BIPS;\\n    uint public DEV_FEE_BIPS;\\n\\n    uint constant internal BIPS_DIVISOR = 10000;\\n    uint constant internal MAX_UINT = uint(-1);\\n\\n    event Deposit(address indexed account, uint amount);\\n    event Withdraw(address indexed account, uint amount);\\n    event Reinvest(uint newTotalDeposits, uint newTotalSupply);\\n    event Recovered(address token, uint amount);\\n    event UpdateAdminFee(uint oldValue, uint newValue);\\n    event UpdateDevFee(uint oldValue, uint newValue);\\n    event UpdateReinvestReward(uint oldValue, uint newValue);\\n    event UpdateMinTokensToReinvest(uint oldValue, uint newValue);\\n    event UpdateMaxTokensToDepositWithoutReinvest(uint oldValue, uint newValue);\\n    event UpdateDevAddr(address oldValue, address newValue);\\n    event DepositsEnabled(bool newValue);\\n\\n    /**\\n     * @notice Throws if called by smart contract\\n     */\\n    modifier onlyEOA() {\\n        require(tx.origin == msg.sender, \\\"YakStrategy::onlyEOA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only called by dev\\n     */\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"YakStrategy::onlyDev\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Approve tokens for use in Strategy\\n     * @dev Should use modifier `onlyOwner` to avoid griefing\\n     */\\n    function setAllowances() public virtual;\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeAllowance(address token, address spender) external onlyOwner {\\n        require(IERC20(token).approve(spender, 0));\\n    }\\n\\n    /**\\n     * @notice Deposit and deploy deposits tokens to the strategy\\n     * @dev Must mint receipt tokens to `msg.sender`\\n     * @param amount deposit tokens\\n     */\\n    function deposit(uint amount) external virtual;\\n\\n    /**\\n    * @notice Deposit using Permit\\n    * @dev Should revert for tokens without Permit\\n    * @param amount Amount of tokens to deposit\\n    * @param deadline The time at which to expire the signature\\n    * @param v The recovery byte of the signature\\n    * @param r Half of the ECDSA signature pair\\n    * @param s Half of the ECDSA signature pair\\n    */\\n    function depositWithPermit(uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external virtual;\\n\\n    /**\\n     * @notice Deposit on behalf of another account\\n     * @dev Must mint receipt tokens to `account`\\n     * @param account address to receive receipt tokens\\n     * @param amount deposit tokens\\n     */\\n    function depositFor(address account, uint amount) external virtual;\\n\\n    /**\\n     * @notice Redeem receipt tokens for deposit tokens\\n     * @param amount receipt tokens\\n     */\\n    function withdraw(uint amount) external virtual;\\n\\n    /**\\n     * @notice Reinvest reward tokens into deposit tokens\\n     */\\n    function reinvest() external virtual;\\n\\n    /**\\n     * @notice Estimate reinvest reward\\n     * @return reward tokens\\n     */\\n    function estimateReinvestReward() external view returns (uint) {\\n        uint unclaimedRewards = checkReward();\\n        if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST) {\\n            return unclaimedRewards.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Reward tokens avialable to strategy, including balance\\n     * @return reward tokens\\n     */\\n    function checkReward() public virtual view returns (uint);\\n\\n    /**\\n     * @notice Estimated deposit token balance deployed by strategy, excluding balance\\n     * @return deposit tokens\\n     */\\n    function estimateDeployedBalance() external virtual view returns (uint);\\n\\n    /**\\n     * @notice Rescue all available deployed deposit tokens back to Strategy\\n     * @param minReturnAmountAccepted min deposit tokens to receive\\n     * @param disableDeposits bool\\n     */\\n    function rescueDeployedFunds(uint minReturnAmountAccepted, bool disableDeposits) external virtual;\\n\\n    /**\\n     * @notice This function returns a snapshot of last available quotes\\n     * @return total deposits available on the contract\\n     */\\n    function totalDeposits() public virtual view returns (uint);\\n    /**\\n     * @notice Calculate receipt tokens for a given amount of deposit tokens\\n     * @dev If contract is empty, use 1:1 ratio\\n     * @dev Could return zero shares for very low amounts of deposit tokens\\n     * @param amount deposit tokens\\n     * @return receipt tokens\\n     */\\n    function getSharesForDepositTokens(uint amount) public view returns (uint) {\\n        if (totalSupply.mul(totalDeposits()) == 0) {\\n            return amount;\\n        }\\n        return amount.mul(totalSupply).div(totalDeposits());\\n    }\\n\\n    /**\\n     * @notice Calculate deposit tokens for a given amount of receipt tokens\\n     * @param amount receipt tokens\\n     * @return deposit tokens\\n     */\\n    function getDepositTokensForShares(uint amount) public view returns (uint) {\\n        if (totalSupply.mul(totalDeposits()) == 0) {\\n            return 0;\\n        }\\n        return amount.mul(totalDeposits()).div(totalSupply);\\n    }\\n\\n    /**\\n     * @notice Update reinvest min threshold\\n     * @param newValue threshold\\n     */\\n    function updateMinTokensToReinvest(uint newValue) public onlyOwner {\\n        emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n        MIN_TOKENS_TO_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest max threshold before a deposit\\n     * @param newValue threshold\\n     */\\n    function updateMaxTokensToDepositWithoutReinvest(uint newValue) public onlyOwner {\\n        emit UpdateMaxTokensToDepositWithoutReinvest(MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST, newValue);\\n        MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update developer fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateDevFee(uint newValue) public onlyOwner {\\n        require(newValue.add(ADMIN_FEE_BIPS).add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateDevFee(DEV_FEE_BIPS, newValue);\\n        DEV_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update admin fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateAdminFee(uint newValue) public onlyOwner {\\n        require(newValue.add(DEV_FEE_BIPS).add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateAdminFee(ADMIN_FEE_BIPS, newValue);\\n        ADMIN_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest reward\\n     * @param newValue fee in BIPS\\n     */\\n    function updateReinvestReward(uint newValue) public onlyOwner {\\n        require(newValue.add(ADMIN_FEE_BIPS).add(DEV_FEE_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n        REINVEST_REWARD_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Enable/disable deposits\\n     * @param newValue bool\\n     */\\n    function updateDepositsEnabled(bool newValue) public onlyOwner {\\n        require(DEPOSITS_ENABLED != newValue);\\n        DEPOSITS_ENABLED = newValue;\\n        emit DepositsEnabled(newValue);\\n    }\\n\\n    /**\\n     * @notice Update devAddr\\n     * @param newValue address\\n     */\\n    function updateDevAddr(address newValue) public onlyDev {\\n        emit UpdateDevAddr(devAddr, newValue);\\n        devAddr = newValue;\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param tokenAddress token address\\n     * @param tokenAmount amount to recover\\n     */\\n    function recoverERC20(address tokenAddress, uint tokenAmount) external onlyOwner {\\n        require(tokenAmount > 0);\\n        require(IERC20(tokenAddress).transfer(msg.sender, tokenAmount));\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover AVAX from contract\\n     * @param amount amount\\n     */\\n    function recoverAVAX(uint amount) external onlyOwner {\\n        require(amount > 0);\\n        msg.sender.transfer(amount);\\n        emit Recovered(address(0), amount);\\n    }\\n}\",\"keccak256\":\"0x8ce774ed685b2fc2ad94f2aa5bc57809d1f62c6d833e2a74e9006920fc6b03b5\",\"license\":\"MIT\"},\"contracts/interfaces/IAvaiPodLeader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// This interface should work for both LP and ORCA staking.\\n// https://github.com/UrsaMaritimus/orca/blob/main/apps/avai/src/contracts/PodLeader.sol\\n// https://github.com/UrsaMaritimus/orca/blob/main/apps/avai/src/contracts/OrcaStaking.sol\\ninterface IAvaiPodLeader {\\n  function poolLength() external view returns (uint256);\\n  function deposit(uint256 pid, uint256 amount) external;\\n  function withdraw(uint256 pid, uint256 amount) external;\\n  function pendingRewards(uint256 pid, address account) external view returns (uint256);\\n  function emergencyWithdraw(uint256 pid) external;\\n  function userInfo(uint256 pid, address user) external view returns (uint256 amount, uint256 rewardDebt);\\n  function poolInfo(uint256 pid) external view returns (address token, uint256 allocPoint, uint256 lastRewardTimestamp, uint256 accRewardsPerShare, uint256 totalStaked, uint16 depositFeeBP);\\n}\\n\",\"keccak256\":\"0x61c5215142fa9a4da812695210fd46edfbd4ae651a8d47030cfbfb70378d9bf5\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x2bac03f58760cfbe9fc44f16681bc9be8be40a99b40462f7d29c13134eb0d61b\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n    function token1() external pure returns (address);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function mint(address to) external returns (uint liquidity);\\n    function sync() external;\\n}\\n\",\"keccak256\":\"0xffc66e7958e75c670c60c085052bcbdd23b794477bf483e805d23a6f25e5ca9d\",\"license\":\"MIT\"},\"contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IWAVAX {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function balanceOf(address owner) external view returns (uint); \\n    function withdraw(uint) external;\\n    function approve(address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x915ba7f9b89e7e481bad9d834302345998bebabd6e5b9beb9ba7c73f67f1aaa3\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x866de5f57330a3e8cc47fe5ffde51c5693b6e802448a7376881976e8635922e1\",\"license\":\"MIT\"},\"contracts/lib/DexLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../interfaces/IWAVAX.sol\\\";\\n\\nlibrary DexLibrary {\\n    using SafeMath for uint;\\n    bytes private constant zeroBytes = new bytes(0);\\n    IWAVAX private constant WAVAX = IWAVAX(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pair Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(uint amountIn, address fromToken, address toToken, IPair pair) internal returns (uint) {\\n        (address token0,) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1,) = pair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        uint amountOut1 = 0;\\n        uint amountOut2 = getAmountOut(amountIn, reserve0, reserve1);\\n        if (token0 != fromToken) (amountOut1, amountOut2) = (amountOut2, amountOut1);\\n        safeTransfer(fromToken, address(pair), amountIn);\\n        pair.swap(amountOut1, amountOut2, address(this), zeroBytes);\\n        return amountOut2 > amountOut1 ? amountOut2 : amountOut1;\\n    }\\n\\n    function checkSwapPairCompatibility(IPair pair, address tokenA, address tokenB) internal pure returns (bool) {\\n        return (tokenA == pair.token0() || tokenA == pair.token1()) && (tokenB == pair.token0() || tokenB == pair.token1()) && tokenA != tokenB;\\n    }\\n\\n    function estimateConversionThroughPair(uint amountIn, address fromToken, address toToken, IPair swapPair) internal view returns (uint) {\\n        (address token0,) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1,) = swapPair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        return getAmountOut(amountIn, reserve0, reserve1);\\n    }\\n\\n    /**\\n     * @notice Converts reward tokens to deposit tokens\\n     * @dev No price checks enforced\\n     * @param amount reward tokens\\n     * @return deposit tokens\\n     */\\n    function convertRewardTokensToDepositTokens(uint amount, address rewardToken, address depositToken, IPair swapPairToken0, IPair swapPairToken1) internal returns (uint) {\\n        uint amountIn = amount.div(2);\\n        require(amountIn > 0, \\\"DexLibrary::_convertRewardTokensToDepositTokens\\\");\\n\\n        address token0 = IPair(depositToken).token0();\\n        uint amountOutToken0 = amountIn;\\n        if (rewardToken != token0) {\\n            amountOutToken0 = DexLibrary.swap(amountIn, rewardToken, token0, swapPairToken0);\\n        }\\n\\n        address token1 = IPair(depositToken).token1();\\n        uint amountOutToken1 = amountIn;\\n        if (rewardToken != token1) {\\n            amountOutToken1 = DexLibrary.swap(amountIn, rewardToken, token1, swapPairToken1);\\n        }\\n\\n        return DexLibrary.addLiquidity(depositToken, amountOutToken0, amountOutToken1);\\n    }\\n\\n    /**\\n     * @notice Add liquidity directly through a Pair\\n     * @dev Checks adding the max of each token amount\\n     * @param depositToken address\\n     * @param maxAmountIn0 amount token0\\n     * @param maxAmountIn1 amount token1\\n     * @return liquidity tokens\\n     */\\n    function addLiquidity(address depositToken, uint maxAmountIn0, uint maxAmountIn1) internal returns (uint) {\\n        (uint112 reserve0, uint112 reserve1,) = IPair(address(depositToken)).getReserves();\\n        uint amountIn1 = _quoteLiquidityAmountOut(maxAmountIn0, reserve0, reserve1);\\n        if (amountIn1 > maxAmountIn1) {\\n            amountIn1 = maxAmountIn1;\\n            maxAmountIn0 = _quoteLiquidityAmountOut(maxAmountIn1, reserve1, reserve0);\\n        }\\n\\n        safeTransfer(IPair(depositToken).token0(), depositToken, maxAmountIn0);\\n        safeTransfer(IPair(depositToken).token1(), depositToken, amountIn1);\\n        return IPair(depositToken).mint(address(this));\\n    }\\n\\n    /**\\n     * @notice Quote liquidity amount out\\n     * @param amountIn input tokens\\n     * @param reserve0 size of input asset reserve\\n     * @param reserve1 size of output asset reserve\\n     * @return liquidity tokens\\n     */\\n    function _quoteLiquidityAmountOut(uint amountIn, uint reserve0, uint reserve1) private pure returns (uint) {\\n        return amountIn.mul(reserve1).div(reserve0);\\n    }\\n\\n    /**\\n     * @notice Given two tokens, it'll return the tokens in the right order for the tokens pair\\n     * @dev TokenA must be different from TokenB, and both shouldn't be address(0), no validations\\n     * @param tokenA address\\n     * @param tokenB address\\n     * @return sorted tokens\\n     */\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address, address) {\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    }\\n\\n    /**\\n     * @notice Given an input amount of an asset and pair reserves, returns maximum output amount of the other asset\\n     * @dev Assumes swap fee is 0.30%\\n     * @param amountIn input asset\\n     * @param reserveIn size of input asset reserve\\n     * @param reserveOut size of output asset reserve\\n     * @return maximum output amount\\n     */\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint) {\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        return numerator.div(denominator);\\n    }\\n\\n    /**\\n     * @notice Safely transfer using an anonymous ERC20 token\\n     * @dev Requires token to return true on transfer\\n     * @param token address\\n     * @param to recipient address\\n     * @param value amount\\n     */\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        require(IERC20(token).transfer(to, value), \\\"DexLibrary::TRANSFER_FROM_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2b4fa4eb579d1a4dab58d5a1fadc1338e2a8313707b29ec447335b9b8f2b39dc\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0xaf2420e7d0e9aff27728c98c8233e892a464ba7c32045a4f37b128652d012f33\",\"license\":\"MIT\"},\"contracts/lib/Permissioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nabstract contract Permissioned is Ownable {\\n    using SafeMath for uint;\\n\\n    uint public numberOfAllowedDepositors;\\n    mapping(address => bool) public allowedDepositors;\\n\\n    event AllowDepositor(address indexed account);\\n    event RemoveDepositor(address indexed account);\\n\\n    modifier onlyAllowedDeposits() {\\n        if (numberOfAllowedDepositors > 0) {\\n            require(allowedDepositors[msg.sender] == true, \\\"Permissioned::onlyAllowedDeposits, not allowed\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add an allowed depositor\\n     * @param depositor address\\n     */\\n    function allowDepositor(address depositor) external onlyOwner {\\n        require(allowedDepositors[depositor] == false, \\\"Permissioned::allowDepositor\\\");\\n        allowedDepositors[depositor] = true;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors.add(1);\\n        emit AllowDepositor(depositor);\\n    }\\n\\n    /**\\n     * @notice Remove an allowed depositor\\n     * @param depositor address\\n     */\\n    function removeDepositor(address depositor) external onlyOwner {\\n        require(numberOfAllowedDepositors > 0, \\\"Permissioned::removeDepositor, no allowed depositors\\\");\\n        require(allowedDepositors[depositor] == true, \\\"Permissioned::removeDepositor, not allowed\\\");\\n        allowedDepositors[depositor] = false;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors.sub(1);\\n        emit RemoveDepositor(depositor);\\n    }\\n}\",\"keccak256\":\"0xf20805a7ca92edda58e5812cf5cfe20b0f2698bbd8215af57a00e04c27ca7e3f\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"},\"contracts/strategies/AvaiStrategyForLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.7.0;\\n\\nimport \\\"../interfaces/IAvaiPodLeader.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../lib/DexLibrary.sol\\\";\\nimport \\\"./MasterChefStrategyForLP.sol\\\";\\n\\ncontract AvaiStrategyForLP is MasterChefStrategyForLP {\\n    using SafeMath for uint256;\\n\\n    IAvaiPodLeader public podLeader;\\n    address public swapPairRewardToken;\\n\\n    constructor(\\n        string memory _name,\\n        address _depositToken,\\n        address _rewardToken,\\n        address _nativeRewardToken,\\n        SwapPairs memory _swapPairs,\\n        address _stakingRewards,\\n        uint256 _pid,\\n        address _timelock,\\n        StrategySettings memory _strategySettings\\n    )\\n        MasterChefStrategyForLP(\\n            _name,\\n            _depositToken,\\n            _rewardToken,\\n            _nativeRewardToken,\\n            _swapPairs,\\n            _stakingRewards,\\n            _timelock,\\n            _pid,\\n            _strategySettings\\n        )\\n    {\\n        podLeader = IAvaiPodLeader(_stakingRewards);\\n    }\\n\\n    function _depositMasterchef(uint256 _pid, uint256 _amount) internal override {\\n        podLeader.deposit(_pid, _amount);\\n    }\\n\\n    function _withdrawMasterchef(uint256 _pid, uint256 _amount) internal override {\\n        podLeader.withdraw(_pid, _amount);\\n    }\\n\\n    function _emergencyWithdraw(uint256 _pid) internal override {\\n        podLeader.emergencyWithdraw(_pid);\\n    }\\n\\n    function _pendingRewards(uint256 _pid, address _user) internal view override returns (uint256) {\\n        return podLeader.pendingRewards(_pid, _user);\\n    }\\n\\n    function _getRewards(uint256 _pid) internal override {\\n        podLeader.deposit(_pid, 0);\\n    }\\n\\n    function _getDepositBalance(uint256 pid, address user) internal view override returns (uint256 amount) {\\n        (amount, ) = podLeader.userInfo(pid, user);\\n    }\\n\\n    function _getDepositFeeBips(uint256 pid) internal view override returns (uint256) {\\n        (,,,,, uint fees) = podLeader.poolInfo(pid);\\n        return fees;\\n    }\\n\\n    function _getWithdrawFeeBips(uint256 pid) internal view override returns (uint256) {\\n        return 0;\\n    }\\n\\n    function _bip() internal view override returns (uint256) {\\n        return 10000;\\n    }\\n}\\n\",\"keccak256\":\"0xee87459ae9bfa0cecf9a61876c4b699c799dd6eb9616918f3b9577223b7dd048\",\"license\":\"MIT\"},\"contracts/strategies/MasterChefStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../YakStrategyV2.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../lib/DexLibrary.sol\\\";\\n\\n/**\\n * @notice Adapter strategy for MasterChef.\\n */\\nabstract contract MasterChefStrategy is YakStrategyV2 {\\n    using SafeMath for uint256;\\n\\n    struct StrategySettings {\\n        uint256 minTokensToReinvest;\\n        uint256 adminFeeBips;\\n        uint256 devFeeBips;\\n        uint256 reinvestRewardBips;\\n    }\\n\\n    uint256 public immutable PID;\\n    address private stakingContract;\\n    address private poolRewardToken;\\n    IPair private swapPairPoolReward;\\n\\n    constructor(\\n        string memory _name,\\n        address _depositToken,\\n        address _ecosystemToken,\\n        address _poolRewardToken,\\n        address _swapPairPoolReward,\\n        address _stakingContract,\\n        address _timelock,\\n        uint256 _pid,\\n        StrategySettings memory _strategySettings\\n    ) Ownable() {\\n        name = _name;\\n        depositToken = IERC20(_depositToken);\\n        rewardToken = IERC20(_ecosystemToken);\\n        PID = _pid;\\n        devAddr = 0x2D580F9CF2fB2D09BC411532988F2aFdA4E7BefF;\\n        stakingContract = _stakingContract;\\n\\n        assignSwapPairSafely(_ecosystemToken, _poolRewardToken, _swapPairPoolReward);\\n        setAllowances();\\n        updateMinTokensToReinvest(_strategySettings.minTokensToReinvest);\\n        updateAdminFee(_strategySettings.adminFeeBips);\\n        updateDevFee(_strategySettings.devFeeBips);\\n        updateReinvestReward(_strategySettings.reinvestRewardBips);\\n        updateDepositsEnabled(true);\\n        transferOwnership(_timelock);\\n        emit Reinvest(0, 0);\\n    }\\n\\n    /**\\n     * @notice Initialization helper for Pair deposit tokens\\n     * @dev Checks that selected Pairs are valid for trading reward tokens\\n     * @dev Assigns values to IPair(swapPairToken0) and IPair(swapPairToken1)\\n     */\\n    function assignSwapPairSafely(\\n        address _ecosystemToken,\\n        address _poolRewardToken,\\n        address _swapPairPoolReward\\n    ) private {\\n        if (_poolRewardToken == IPair(_swapPairPoolReward).token0()) {\\n            require(\\n                IPair(_swapPairPoolReward).token1() == _ecosystemToken,\\n                \\\"Swap pair 'swapPairPoolReward' does not contain ecosystem token\\\"\\n            );\\n        } else if (_poolRewardToken == IPair(_swapPairPoolReward).token1()) {\\n            require(\\n                IPair(_swapPairPoolReward).token0() == _ecosystemToken,\\n                \\\"Swap pair 'swapPairPoolReward' does not contain ecosystem token\\\"\\n            );\\n        } else {\\n            revert(\\\"Swap pair 'swapPairPoolReward' does not contain pool reward token\\\");\\n        }\\n        poolRewardToken = _poolRewardToken;\\n        swapPairPoolReward = IPair(_swapPairPoolReward);\\n    }\\n\\n    /**\\n     * @notice Approve tokens for use in Strategy\\n     * @dev Restricted to avoid griefing attacks\\n     */\\n    function setAllowances() public override onlyOwner {\\n        depositToken.approve(stakingContract, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Deposit tokens to receive receipt tokens\\n     * @param amount Amount of tokens to deposit\\n     */\\n    function deposit(uint256 amount) external override {\\n        _deposit(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @param amount Amount of tokens to deposit\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        depositToken.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        _deposit(msg.sender, amount);\\n    }\\n\\n    function depositFor(address account, uint256 amount) external override {\\n        _deposit(account, amount);\\n    }\\n\\n    function _deposit(address account, uint256 amount) internal {\\n        require(DEPOSITS_ENABLED == true, \\\"MasterChefStrategyV1::_deposit\\\");\\n        if (MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST > 0) {\\n            (uint256 poolTokenAmount, uint256 rewardTokenBalance, uint256 estimatedTotalReward) = _checkReward();\\n            if (estimatedTotalReward > MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST) {\\n                _reinvest(rewardTokenBalance, poolTokenAmount);\\n            }\\n        }\\n        require(depositToken.transferFrom(msg.sender, address(this), amount), \\\"MasterChefStrategyV1::transfer failed\\\");\\n        uint256 depositFeeBips = _getDepositFeeBips(PID);\\n        uint256 depositFee = amount.mul(depositFeeBips).div(_bip());\\n        _mint(account, getSharesForDepositTokens(amount.sub(depositFee)));\\n        _stakeDepositTokens(amount);\\n        emit Deposit(account, amount);\\n    }\\n\\n    function withdraw(uint256 amount) external override {\\n        uint256 depositTokenAmount = getDepositTokensForShares(amount);\\n        require(depositTokenAmount > 0, \\\"MasterChefStrategyV1::withdraw\\\");\\n        _withdrawDepositTokens(depositTokenAmount);\\n        uint256 withdrawFeeBips = _getWithdrawFeeBips(PID);\\n        uint256 withdrawFee = depositTokenAmount.mul(withdrawFeeBips).div(_bip());\\n        _safeTransfer(address(depositToken), msg.sender, depositTokenAmount.sub(withdrawFee));\\n        _burn(msg.sender, amount);\\n        emit Withdraw(msg.sender, depositTokenAmount);\\n    }\\n\\n    function _withdrawDepositTokens(uint256 amount) private {\\n        require(amount > 0, \\\"MasterChefStrategyV1::_withdrawDepositTokens\\\");\\n        _withdrawMasterchef(PID, amount);\\n    }\\n\\n    function reinvest() external override onlyEOA {\\n        (uint256 poolTokenAmount, uint256 rewardTokenBalance, uint256 estimatedTotalReward) = _checkReward();\\n        require(estimatedTotalReward >= MIN_TOKENS_TO_REINVEST, \\\"MasterChefStrategyV1::reinvest\\\");\\n        _reinvest(rewardTokenBalance, poolTokenAmount);\\n    }\\n\\n    function _convertPoolTokensIntoReward(uint256 poolTokenAmount) private returns (uint256) {\\n        return DexLibrary.swap(poolTokenAmount, address(poolRewardToken), address(rewardToken), swapPairPoolReward);\\n    }\\n\\n    /**\\n     * @notice Reinvest rewards from staking contract to deposit tokens\\n     * @dev Reverts if the expected amount of tokens are not returned from `MasterChef`\\n     */\\n    function _reinvest(uint256 rewardTokenBalance, uint256 poolTokenAmount) private {\\n        _getRewards(PID);\\n        uint256 amount = rewardTokenBalance.add(_convertPoolTokensIntoReward(poolTokenAmount));\\n\\n        uint256 devFee = amount.mul(DEV_FEE_BIPS).div(BIPS_DIVISOR);\\n        if (devFee > 0) {\\n            _safeTransfer(address(rewardToken), devAddr, devFee);\\n        }\\n\\n        uint256 reinvestFee = amount.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n        if (reinvestFee > 0) {\\n            _safeTransfer(address(rewardToken), msg.sender, reinvestFee);\\n        }\\n\\n        uint256 depositTokenAmount = _convertRewardTokenToDepositToken(\\n            amount.sub(devFee).sub(reinvestFee)\\n        );\\n\\n        _stakeDepositTokens(depositTokenAmount);\\n        emit Reinvest(totalDeposits(), totalSupply);\\n    }\\n\\n    function _stakeDepositTokens(uint256 amount) private {\\n        require(amount > 0, \\\"MasterChefStrategyV1::_stakeDepositTokens\\\");\\n        _depositMasterchef(PID, amount);\\n    }\\n\\n    /**\\n     * @notice Safely transfer using an anonymosu ERC20 token\\n     * @dev Requires token to return true on transfer\\n     * @param token address\\n     * @param to recipient address\\n     * @param value amount\\n     */\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        require(IERC20(token).transfer(to, value), \\\"MasterChefStrategyV1::TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function _checkReward()\\n        internal\\n        view\\n        returns (\\n            uint256 _poolTokenAmount,\\n            uint256 _rewardTokenBalance,\\n            uint256 _estimatedTotalReward\\n        )\\n    {\\n        uint256 poolTokenBalance = IERC20(poolRewardToken).balanceOf(address(this));\\n        uint256 pendingPoolTokenAmount = _pendingRewards(PID, address(this));\\n        uint256 poolTokenAmount = poolTokenBalance.add(pendingPoolTokenAmount);\\n        uint256 pendingRewardTokenAmount = DexLibrary.estimateConversionThroughPair(\\n            poolTokenAmount,\\n            poolRewardToken,\\n            address(rewardToken),\\n            swapPairPoolReward\\n        );\\n        uint256 rewardTokenBalance = rewardToken.balanceOf(address(this));\\n        uint256 estimatedTotalReward = rewardTokenBalance.add(pendingRewardTokenAmount);\\n        return (poolTokenAmount, rewardTokenBalance, estimatedTotalReward);\\n    }\\n\\n    function checkReward() public view override returns (uint256) {\\n        (, , uint256 estimatedTotalReward) = _checkReward();\\n        return estimatedTotalReward;\\n    }\\n\\n    /**\\n     * @notice Estimate recoverable balance after withdraw fee\\n     * @return deposit tokens after withdraw fee\\n     */\\n    function estimateDeployedBalance() external view override returns (uint256) {\\n        uint256 depositBalance = totalDeposits();\\n        uint256 withdrawFeeBips = _getWithdrawFeeBips(PID);\\n        uint256 withdrawFee = depositBalance.mul(withdrawFeeBips).div(_bip());\\n        return depositBalance.sub(withdrawFee);\\n    }\\n\\n    function totalDeposits() public view override returns (uint256) {\\n        uint256 depositBalance = _getDepositBalance(PID, address(this));\\n        return depositBalance;\\n    }\\n\\n    function rescueDeployedFunds(uint256 minReturnAmountAccepted, bool disableDeposits) external override onlyOwner {\\n        uint256 balanceBefore = depositToken.balanceOf(address(this));\\n        _emergencyWithdraw(PID);\\n        uint256 balanceAfter = depositToken.balanceOf(address(this));\\n        require(\\n            balanceAfter.sub(balanceBefore) >= minReturnAmountAccepted,\\n            \\\"MasterChefStrategyV1::rescueDeployedFunds\\\"\\n        );\\n        emit Reinvest(totalDeposits(), totalSupply);\\n        if (DEPOSITS_ENABLED == true && disableDeposits == true) {\\n            updateDepositsEnabled(false);\\n        }\\n    }\\n\\n    /* VIRTUAL */\\n    function _convertRewardTokenToDepositToken(uint256 fromAmount) internal virtual returns (uint256 toAmount);\\n\\n    function _depositMasterchef(uint256 pid, uint256 amount) internal virtual;\\n\\n    function _withdrawMasterchef(uint256 pid, uint256 amount) internal virtual;\\n\\n    function _emergencyWithdraw(uint256 pid) internal virtual;\\n\\n    function _getRewards(uint256 pid) internal virtual;\\n\\n    function _pendingRewards(uint256 pid, address user) internal view virtual returns (uint256 poolTokenAmount);\\n\\n    function _getDepositBalance(uint256 pid, address user) internal view virtual returns (uint256 amount);\\n\\n    function _getDepositFeeBips(uint256 pid) internal view virtual returns (uint256);\\n\\n    function _getWithdrawFeeBips(uint256 pid) internal view virtual returns (uint256);\\n\\n    function _bip() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x551b2b75f92666431bf17304d4ffb16d46f24b4d0f32bd5e7563a66302588105\",\"license\":\"MIT\"},\"contracts/strategies/MasterChefStrategyForLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../lib/DexLibrary.sol\\\";\\nimport \\\"./MasterChefStrategy.sol\\\";\\n\\n/**\\n * @notice Adapter strategy for MasterChef with LP deposit.\\n */\\nabstract contract MasterChefStrategyForLP is MasterChefStrategy {\\n    using SafeMath for uint256;\\n\\n    struct SwapPairs {\\n        address poolReward;\\n        address token0;\\n        address token1;\\n    }\\n\\n    address private swapPairToken0;\\n    address private swapPairToken1;\\n\\n    constructor(\\n        string memory _name,\\n        address _depositToken,\\n        address _ecosystemToken,\\n        address _poolRewardToken,\\n        SwapPairs memory _swapPairs,\\n        address _stakingContract,\\n        address _timelock,\\n        uint256 _pid,\\n        StrategySettings memory _strategySettings\\n    )\\n        MasterChefStrategy(\\n            _name,\\n            _depositToken,\\n            _ecosystemToken,\\n            _poolRewardToken,\\n            _swapPairs.poolReward,\\n            _stakingContract,\\n            _timelock,\\n            _pid,\\n            _strategySettings\\n        )\\n    {\\n        assignSwapPairSafely(_swapPairs, _ecosystemToken, _poolRewardToken);\\n    }\\n\\n    /**\\n     * @notice Initialization helper for Pair deposit tokens\\n     * @dev Checks that selected Pairs are valid for trading reward tokens\\n     * @dev Assigns values to IPair(swapPairToken0) and IPair(swapPairToken1)\\n     */\\n    function assignSwapPairSafely(\\n        SwapPairs memory _swapPairs,\\n        address _ecosystemToken,\\n        address _poolRewardToken\\n    ) private {\\n        if (\\n            _ecosystemToken != IPair(address(depositToken)).token0() &&\\n            _ecosystemToken != IPair(address(depositToken)).token1()\\n        ) {\\n            // deployment checks for non-pool2\\n            require(_swapPairs.token0 > address(0), \\\"Swap pair 0 is necessary but not supplied\\\");\\n            require(_swapPairs.token1 > address(0), \\\"Swap pair 1 is necessary but not supplied\\\");\\n            swapPairToken0 = _swapPairs.token0;\\n            swapPairToken1 = _swapPairs.token1;\\n            require(\\n                IPair(swapPairToken0).token0() == _ecosystemToken || IPair(swapPairToken0).token1() == _ecosystemToken,\\n                \\\"Swap pair supplied does not have the reward token as one of it's pair\\\"\\n            );\\n            require(\\n                IPair(swapPairToken0).token0() == IPair(address(depositToken)).token0() ||\\n                    IPair(swapPairToken0).token1() == IPair(address(depositToken)).token0(),\\n                \\\"Swap pair 0 supplied does not match the pair in question\\\"\\n            );\\n            require(\\n                IPair(swapPairToken1).token0() == IPair(address(depositToken)).token1() ||\\n                    IPair(swapPairToken1).token1() == IPair(address(depositToken)).token1(),\\n                \\\"Swap pair 1 supplied does not match the pair in question\\\"\\n            );\\n        } else if (_ecosystemToken == IPair(address(depositToken)).token0()) {\\n            swapPairToken1 = address(depositToken);\\n        } else if (_ecosystemToken == IPair(address(depositToken)).token1()) {\\n            swapPairToken0 = address(depositToken);\\n        }\\n        if (_poolRewardToken == IPair(_swapPairs.poolReward).token0()) {\\n            require(\\n                IPair(_swapPairs.poolReward).token1() == _ecosystemToken,\\n                \\\"Swap pair swapPairPoolReward does not contain reward token\\\"\\n            );\\n        }\\n    }\\n\\n    /* VIRTUAL */\\n    function _convertRewardTokenToDepositToken(uint256 fromAmount) internal override returns (uint256 toAmount) {\\n        toAmount = DexLibrary.convertRewardTokensToDepositTokens(\\n            fromAmount,\\n            address(rewardToken),\\n            address(depositToken),\\n            IPair(swapPairToken0),\\n            IPair(swapPairToken1)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x66ad9d9e858bc39a0ba6b7dc03f278c3da642d7aa90ff1e8ce6ee4196ac1cd79\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052600960a0819052685969656c642059616b60b81b60c09081526200002c9160009190620014e5565b506040805180820190915260038082526216549560ea1b60209092019182526200005991600191620014e5565b503480156200006757600080fd5b5060405162005b8438038062005b848339810160408190526200008a91620016ac565b888888888888878988888888888860000151888888886000620000b26200026160201b60201c565b600680546001600160a01b0319166001600160a01b0383169081179091556040519192509060009060008051602062005b64833981519152908290a3508851620001049060009060208c0190620014e5565b50600980546001600160a01b03808b166001600160a01b031992831617909255600a80548a84169083161790556080849052600b80548216732d580f9cf2fb2d09bc411532988f2afda4e7beff17905560128054928716929091169190911790556200017287878762000265565b6200017c620004c7565b80516200018990620005a0565b6020810151620001999062000628565b6040810151620001a990620006f6565b6060810151620001b990620007b0565b620001c560016200086a565b620001d08362000912565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2346000806040516200020492919062001812565b60405180910390a150505050505050505062000228858888620009cc60201b60201c565b5050601780546001600160a01b0319166001600160a01b039c909c169b909b17909a555062001bac9d5050505050505050505050505050565b3390565b806001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156200029f57600080fd5b505afa158015620002b4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002da91906200166d565b6001600160a01b0316826001600160a01b03161415620003ab57826001600160a01b0316816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156200033857600080fd5b505afa1580156200034d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200037391906200166d565b6001600160a01b031614620003a55760405162461bcd60e51b81526004016200039c9062001950565b60405180910390fd5b62000498565b806001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015620003e557600080fd5b505afa158015620003fa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200042091906200166d565b6001600160a01b0316826001600160a01b031614156200047e57826001600160a01b0316816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156200033857600080fd5b60405162461bcd60e51b81526004016200039c906200189d565b601380546001600160a01b039384166001600160a01b0319918216179091556014805492909316911617905550565b620004d162000261565b6001600160a01b0316620004e4620014a7565b6001600160a01b0316146200050d5760405162461bcd60e51b81526004016200039c9062001a50565b60095460125460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620005479291169060001990600401620017ee565b602060405180830381600087803b1580156200056257600080fd5b505af115801562000577573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200059d91906200168a565b50565b620005aa62000261565b6001600160a01b0316620005bd620014a7565b6001600160a01b031614620005e65760405162461bcd60e51b81526004016200039c9062001a50565b7f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100600c54826040516200061b92919062001812565b60405180910390a1600c55565b6200063262000261565b6001600160a01b031662000645620014a7565b6001600160a01b0316146200066e5760405162461bcd60e51b81526004016200039c9062001a50565b612710620006a8600f546200069460115485620014b660201b62001bda1790919060201c565b620014b660201b62001bda1790919060201c565b1115620006b457600080fd5b7f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a60105482604051620006e992919062001812565b60405180910390a1601055565b6200070062000261565b6001600160a01b031662000713620014a7565b6001600160a01b0316146200073c5760405162461bcd60e51b81526004016200039c9062001a50565b61271062000762600f546200069460105485620014b660201b62001bda1790919060201c565b11156200076e57600080fd5b7f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d65172613160115482604051620007a392919062001812565b60405180910390a1601155565b620007ba62000261565b6001600160a01b0316620007cd620014a7565b6001600160a01b031614620007f65760405162461bcd60e51b81526004016200039c9062001a50565b6127106200081c6011546200069460105485620014b660201b62001bda1790919060201c565b11156200082857600080fd5b7fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2600f54826040516200085d92919062001812565b60405180910390a1600f55565b6200087462000261565b6001600160a01b031662000887620014a7565b6001600160a01b031614620008b05760405162461bcd60e51b81526004016200039c9062001a50565b600e5460ff1615158115151415620008c757600080fd5b600e805460ff19168215151790556040517f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85906200090790839062001807565b60405180910390a150565b6200091c62000261565b6001600160a01b03166200092f620014a7565b6001600160a01b031614620009585760405162461bcd60e51b81526004016200039c9062001a50565b6001600160a01b038116620009815760405162461bcd60e51b81526004016200039c9062001820565b6006546040516001600160a01b0380841692169060008051602062005b6483398151915290600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b600960009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801562000a1b57600080fd5b505afa15801562000a30573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a5691906200166d565b6001600160a01b0316826001600160a01b03161415801562000b135750600960009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801562000ac257600080fd5b505afa15801562000ad7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000afd91906200166d565b6001600160a01b0316826001600160a01b031614155b15620011d05760208301516001600160a01b031662000b465760405162461bcd60e51b81526004016200039c9062001a07565b60408301516001600160a01b031662000b735760405162461bcd60e51b81526004016200039c9062001ae2565b602083810151601580546001600160a01b03199081166001600160a01b03938416179182905560408088015160168054909316908516179091558051630dfe168160e01b81529051868416949290931692630dfe168192600480840193919291829003018186803b15801562000be857600080fd5b505afa15801562000bfd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c2391906200166d565b6001600160a01b0316148062000cc157506015546040805163d21220a760e01b815290516001600160a01b0380861693169163d21220a7916004808301926020929190829003018186803b15801562000c7b57600080fd5b505afa15801562000c90573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cb691906200166d565b6001600160a01b0316145b62000ce05760405162461bcd60e51b81526004016200039c906200199c565b600960009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801562000d2f57600080fd5b505afa15801562000d44573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d6a91906200166d565b6001600160a01b0316601560009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801562000dc257600080fd5b505afa15801562000dd7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000dfd91906200166d565b6001600160a01b0316148062000f365750600960009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801562000e5d57600080fd5b505afa15801562000e72573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e9891906200166d565b6001600160a01b0316601560009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801562000ef057600080fd5b505afa15801562000f05573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f2b91906200166d565b6001600160a01b0316145b62000f555760405162461bcd60e51b81526004016200039c9062001a85565b600960009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801562000fa457600080fd5b505afa15801562000fb9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fdf91906200166d565b6001600160a01b0316601660009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156200103757600080fd5b505afa1580156200104c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200107291906200166d565b6001600160a01b03161480620011ab5750600960009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015620010d257600080fd5b505afa158015620010e7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200110d91906200166d565b6001600160a01b0316601660009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156200116557600080fd5b505afa1580156200117a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011a091906200166d565b6001600160a01b0316145b620011ca5760405162461bcd60e51b81526004016200039c9062001b2b565b62001363565b600960009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156200121f57600080fd5b505afa15801562001234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200125a91906200166d565b6001600160a01b0316826001600160a01b031614156200129c57600954601680546001600160a01b0319166001600160a01b0390921691909117905562001363565b600960009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015620012eb57600080fd5b505afa15801562001300573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200132691906200166d565b6001600160a01b0316826001600160a01b031614156200136357600954601580546001600160a01b0319166001600160a01b039092169190911790555b82600001516001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015620013a157600080fd5b505afa158015620013b6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013dc91906200166d565b6001600160a01b0316816001600160a01b03161415620014a257816001600160a01b031683600001516001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156200143e57600080fd5b505afa15801562001453573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200147991906200166d565b6001600160a01b031614620014a25760405162461bcd60e51b81526004016200039c90620018f3565b505050565b6006546001600160a01b031690565b600082820183811015620014de5760405162461bcd60e51b81526004016200039c9062001866565b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200152857805160ff191683800117855562001558565b8280016001018555821562001558579182015b82811115620015585782518255916020019190600101906200153b565b50620015669291506200156a565b5090565b5b808211156200156657600081556001016200156b565b80516001600160a01b03811681146200159957600080fd5b919050565b600060808284031215620015b0578081fd5b604051608081016001600160401b0381118282101715620015cd57fe5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b60006060828403121562001610578081fd5b604051606081016001600160401b03811182821017156200162d57fe5b6040529050806200163e8362001581565b81526200164e6020840162001581565b6020820152620016616040840162001581565b60408201525092915050565b6000602082840312156200167f578081fd5b620014de8262001581565b6000602082840312156200169c578081fd5b81518015158114620014de578182fd5b60008060008060008060008060006101c08a8c031215620016cb578485fd5b89516001600160401b0380821115620016e2578687fd5b818c0191508c601f830112620016f6578687fd5b8151818111156200170357fe5b602091506200171b601f8201601f1916830162001b88565b8181528e838386010111156200172f578889fd5b885b828110156200174e57848101840151828201850152830162001731565b828111156200175f57898484840101525b509b506200177190508c820162001581565b995050506200178360408b0162001581565b96506200179360608b0162001581565b9550620017a48b60808c01620015fe565b9450620017b460e08b0162001581565b93506101008a01519250620017cd6101208b0162001581565b9150620017df8b6101408c016200159e565b90509295985092959850929598565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b918252602082015260400190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b602080825260419082015260008051602062005b4483398151915260408201527f6f6573206e6f7420636f6e7461696e20706f6f6c2072657761726420746f6b656060820152603760f91b608082015260a00190565b6020808252603a908201527f537761702070616972207377617050616972506f6f6c52657761726420646f6560408201527f73206e6f7420636f6e7461696e2072657761726420746f6b656e000000000000606082015260800190565b6020808252603f9082015260008051602062005b4483398151915260408201527f6f6573206e6f7420636f6e7461696e2065636f73797374656d20746f6b656e00606082015260800190565b60208082526045908201527f53776170207061697220737570706c69656420646f6573206e6f74206861766560408201527f207468652072657761726420746f6b656e206173206f6e65206f662069742773606082015264103830b4b960d91b608082015260a00190565b60208082526029908201527f5377617020706169722030206973206e656365737361727920627574206e6f74604082015268081cdd5c1c1b1a595960ba1b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526038908201527f537761702070616972203020737570706c69656420646f6573206e6f74206d6160408201527f74636820746865207061697220696e207175657374696f6e0000000000000000606082015260800190565b60208082526029908201527f5377617020706169722031206973206e656365737361727920627574206e6f74604082015268081cdd5c1c1b1a595960ba1b606082015260800190565b60208082526038908201527f537761702070616972203120737570706c69656420646f6573206e6f74206d6160408201527f74636820746865207061697220696e207175657374696f6e0000000000000000606082015260800190565b6040518181016001600160401b038111828210171562001ba457fe5b604052919050565b608051613f5062001bf46000398061078f528061093e5280610d145280610ed152806115025280611eb5528061216c52806123a9528061258a52806128c35250613f506000f3fe608060405234801561001057600080fd5b50600436106103835760003560e01c80638980f11f116101de578063bd079f551161010f578063dd62ed3e116100ad578063ed24911d1161007c578063ed24911d146106a5578063f2fde38b146106ad578063f7c618c1146106c0578063fdb5a03e146106c857610383565b8063dd62ed3e14610659578063dd8ce4d61461066c578063e21ac8251461067f578063eab89a5a1461069257610383565b8063cff1b6ef116100e9578063cff1b6ef14610623578063d505accf14610636578063da09c72c14610649578063dbd9a4d41461065157610383565b8063bd079f551461060b578063c4b24a4614610613578063c89039c51461061b57610383565b80639e4e73181161017c578063ac0d31ff11610156578063ac0d31ff146105d5578063b52a321f146105e8578063b6b55f25146105f0578063b9e57b801461060357610383565b80639e4e7318146105a7578063a8ae2b7c146105af578063a9059cbb146105c257610383565b80638da5cb5b116101b85780638da5cb5b146105715780639291d5631461057957806395d89b411461058c57806399729ec11461059457610383565b80638980f11f146105435780638aff733d146105565780638b73e6061461055e57610383565b80634bebd1e7116102b8578063715018a6116102565780637ae26773116102305780637ae26773146105025780637d882097146105155780637ecebe001461051d578063818372301461053057610383565b8063715018a6146104ea578063762aad25146104f2578063789139bc146104fa57610383565b80635e5eee1b116102925780635e5eee1b146104b25780635ea682ea146104c75780635eaec0e4146104cf57806370a08231146104d757610383565b80634bebd1e7146104795780634e77ace51461048c5780634ebb79161461049f57610383565b80632e1a7d4d11610325578063313ce567116102ff578063313ce567146104365780633bdc6e721461044b578063483c2ef0146104535780634a970be71461046657610383565b80632e1a7d4d146104065780632f4f21e21461041b57806330adf81f1461042e57610383565b80630f23475d116103615780630f23475d146103db57806318160ddd146103e357806320606b70146103eb57806323b872dd146103f357610383565b806306fdde031461038857806307677111146103a6578063095ea7b3146103bb575b600080fd5b6103906106d0565b60405161039d91906136e2565b60405180910390f35b6103ae61075e565b60405161039d919061365b565b6103ce6103c93660046132e0565b610764565b60405161039d9190613650565b6103ae61077b565b6103ae6107e7565b6103ae6107ed565b6103ce610401366004613233565b610811565b6104196104143660046133f6565b6108f8565b005b6104196104293660046132e0565b6109e5565b6103ae6109f3565b61043e610a17565b60405161039d9190613e3e565b6103ae610a1c565b6103ce6104613660046131c3565b610a22565b61041961047436600461346d565b610a37565b6104196104873660046131c3565b610acf565b61041961049a366004613370565b610bb3565b6104196104ad3660046133f6565b610c51565b6104ba610cfd565b60405161039d91906135a4565b6103ae610d0c565b6103ae610d12565b6103ae6104e53660046131c3565b610d36565b610419610d55565b6104ba610deb565b6103ae610dfa565b6104196105103660046131fb565b610e00565b6103ae610ec9565b6103ae61052b3660046131c3565b610efc565b61041961053e3660046133f6565b610f0e565b6104196105513660046132e0565b610f8d565b6103ae61109f565b61041961056c3660046131c3565b6110a5565b6104ba6111ab565b6104196105873660046131c3565b6111ba565b61039061125a565b6104196105a23660046133f6565b6112b4565b6103ae611362565b6104196105bd3660046133f6565b611386565b6103ce6105d03660046132e0565b61142e565b6104196105e3366004613426565b61143b565b6103ce611642565b6104196105fe3660046133f6565b61164b565b6103ae611658565b6103ae611699565b6103ae61169f565b6104ba6116aa565b6104196106313660046133f6565b6116b9565b610419610644366004613273565b611761565b6104ba611816565b610419611825565b6103ae6106673660046131fb565b6118ee565b6103ae61067a3660046133f6565b611919565b61041961068d3660046133f6565b611953565b6103ae6106a03660046133f6565b6119d2565b6103ae611a03565b6104196106bb3660046131c3565b611a9a565b6104ba611b68565b610419611b77565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107565780601f1061072b57610100808354040283529160200191610756565b820191906000526020600020905b81548152906001019060200180831161073957829003601f168201915b505050505081565b60105481565b6000610771338484611c06565b5060015b92915050565b600080610786610ec9565b905060006107b37f0000000000000000000000000000000000000000000000000000000000000000611cba565b905060006107d26107c2611cc0565b6107cc8585611cc6565b90611d00565b90506107de8382611d42565b93505050505b90565b60025481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6001600160a01b03831660008181526003602090815260408083203380855292528220549192909190821480159061084b57506000198114155b156108e1576000610877856040518060600160405280602f8152602001613e97602f9139849190611d80565b6001600160a01b03808916600081815260036020908152604080832094891680845294909152908190208490555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906108d790859061365b565b60405180910390a3505b6108ec868686611dac565b50600195945050505050565b6000610903826119d2565b90506000811161092e5760405162461bcd60e51b8152600401610925906139a2565b60405180910390fd5b61093781611e90565b60006109627f0000000000000000000000000000000000000000000000000000000000000000611cba565b905060006109716107c2611cc0565b600954909150610994906001600160a01b03163361098f8685611d42565b611eda565b61099e3385611f76565b336001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364846040516109d7919061365b565b60405180910390a250505050565b6109ef8282612050565b5050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60075481565b60086020526000908152604090205460ff1681565b6009546040517fd505accf0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063d505accf90610a8c90339030908a908a908a908a908a906004016135dc565b600060405180830381600087803b158015610aa657600080fd5b505af1158015610aba573d6000803e3d6000fd5b50505050610ac83386612050565b5050505050565b610ad76121f9565b6001600160a01b0316610ae86111ab565b6001600160a01b031614610b0e5760405162461bcd60e51b815260040161092590613b4d565b6001600160a01b03811660009081526008602052604090205460ff1615610b475760405162461bcd60e51b81526004016109259061387a565b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610b7991611bda565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b610bbb6121f9565b6001600160a01b0316610bcc6111ab565b6001600160a01b031614610bf25760405162461bcd60e51b815260040161092590613b4d565b600e5460ff1615158115151415610c0857600080fd5b600e805460ff19168215151790556040517f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e8590610c46908390613650565b60405180910390a150565b610c596121f9565b6001600160a01b0316610c6a6111ab565b6001600160a01b031614610c905760405162461bcd60e51b815260040161092590613b4d565b60008111610c9d57600080fd5b604051339082156108fc029083906000818181858888f19350505050158015610cca573d6000803e3d6000fd5b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28600082604051610c4692919061361d565b6018546001600160a01b031681565b60115481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b0381166000908152600460205260409020545b919050565b610d5d6121f9565b6001600160a01b0316610d6e6111ab565b6001600160a01b031614610d945760405162461bcd60e51b815260040161092590613b4d565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36006805473ffffffffffffffffffffffffffffffffffffffff19169055565b6017546001600160a01b031681565b600d5481565b610e086121f9565b6001600160a01b0316610e196111ab565b6001600160a01b031614610e3f5760405162461bcd60e51b815260040161092590613b4d565b60405163095ea7b360e01b81526001600160a01b0383169063095ea7b390610e6e90849060009060040161361d565b602060405180830381600087803b158015610e8857600080fd5b505af1158015610e9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec0919061338c565b6109ef57600080fd5b600080610ef67f0000000000000000000000000000000000000000000000000000000000000000306121fd565b91505090565b60056020526000908152604090205481565b610f166121f9565b6001600160a01b0316610f276111ab565b6001600160a01b031614610f4d5760405162461bcd60e51b815260040161092590613b4d565b7f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100600c5482604051610f80929190613df8565b60405180910390a1600c55565b610f956121f9565b6001600160a01b0316610fa66111ab565b6001600160a01b031614610fcc5760405162461bcd60e51b815260040161092590613b4d565b60008111610fd957600080fd5b60405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb90611007903390859060040161361d565b602060405180830381600087803b15801561102157600080fd5b505af1158015611035573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611059919061338c565b61106257600080fd5b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28828260405161109392919061361d565b60405180910390a15050565b600f5481565b6110ad6121f9565b6001600160a01b03166110be6111ab565b6001600160a01b0316146110e45760405162461bcd60e51b815260040161092590613b4d565b6000600754116111065760405162461bcd60e51b8152600401610925906137c0565b6001600160a01b03811660009081526008602052604090205460ff1615156001146111435760405162461bcd60e51b8152600401610925906139d9565b6001600160a01b0381166000908152600860205260409020805460ff19169055600754611171906001611d42565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b6006546001600160a01b031690565b600b546001600160a01b031633146111e45760405162461bcd60e51b815260040161092590613cd0565b600b546040517fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c0091611223916001600160a01b03909116908490613636565b60405180910390a1600b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107565780601f1061072b57610100808354040283529160200191610756565b6112bc6121f9565b6001600160a01b03166112cd6111ab565b6001600160a01b0316146112f35760405162461bcd60e51b815260040161092590613b4d565b612710611317600f5461131160105485611bda90919063ffffffff16565b90611bda565b111561132257600080fd5b7f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d65172613160115482604051611355929190613df8565b60405180910390a1601155565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b61138e6121f9565b6001600160a01b031661139f6111ab565b6001600160a01b0316146113c55760405162461bcd60e51b815260040161092590613b4d565b6127106113e360115461131160105485611bda90919063ffffffff16565b11156113ee57600080fd5b7fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2600f5482604051611421929190613df8565b60405180910390a1600f55565b6000610771338484611dac565b6114436121f9565b6001600160a01b03166114546111ab565b6001600160a01b03161461147a5760405162461bcd60e51b815260040161092590613b4d565b6009546040516370a0823160e01b81526000916001600160a01b0316906370a08231906114ab9030906004016135a4565b60206040518083038186803b1580156114c357600080fd5b505afa1580156114d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fb919061340e565b90506115267f00000000000000000000000000000000000000000000000000000000000000006122a0565b6009546040516370a0823160e01b81526000916001600160a01b0316906370a08231906115579030906004016135a4565b60206040518083038186803b15801561156f57600080fd5b505afa158015611583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a7919061340e565b9050836115b48284611d42565b10156115d25760405162461bcd60e51b8152600401610925906138b1565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2346115fb610ec9565b60025460405161160c929190613df8565b60405180910390a1600e5460ff161515600114801561162d57506001831515145b1561163c5761163c6000610bb3565b50505050565b600e5460ff1681565b6116553382612050565b50565b60008061166361169f565b9050600c548110611691576116896127106107cc600f5484611cc690919063ffffffff16565b9150506107e4565b600091505090565b600c5481565b6000806107de612317565b6009546001600160a01b031681565b6116c16121f9565b6001600160a01b03166116d26111ab565b6001600160a01b0316146116f85760405162461bcd60e51b815260040161092590613b4d565b612710611716600f5461131160115485611bda90919063ffffffff16565b111561172157600080fd5b7f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a60105482604051611754929190613df8565b60405180910390a1601055565b428410156117815760405162461bcd60e51b81526004016109259061396b565b6001600160a01b038716600090815260056020908152604080832080546001810190915590516117dc927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928c928c928c92918c9101613664565b60405160208183030381529060405280519060200120905061180188828686866124ab565b61180c888888611c06565b5050505050505050565b600b546001600160a01b031681565b61182d6121f9565b6001600160a01b031661183e6111ab565b6001600160a01b0316146118645760405162461bcd60e51b815260040161092590613b4d565b60095460125460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39261189c929116906000199060040161361d565b602060405180830381600087803b1580156118b657600080fd5b505af11580156118ca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611655919061338c565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b600061192f611926610ec9565b60025490611cc6565b61193a575080610d50565b610775611945610ec9565b6002546107cc908590611cc6565b61195b6121f9565b6001600160a01b031661196c6111ab565b6001600160a01b0316146119925760405162461bcd60e51b815260040161092590613b4d565b7fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f600d54826040516119c5929190613df8565b60405180910390a1600d55565b60006119df611926610ec9565b6119eb57506000610d50565b6107756002546107cc6119fc610ec9565b8590611cc6565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b6000604051611a3891906134fe565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6611a6a612581565b30604051602001611a7f959493929190613698565b60405160208183030381529060405280519060200120905090565b611aa26121f9565b6001600160a01b0316611ab36111ab565b6001600160a01b031614611ad95760405162461bcd60e51b815260040161092590613b4d565b6001600160a01b038116611aff5760405162461bcd60e51b8152600401610925906136f5565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600a546001600160a01b031681565b323314611b965760405162461bcd60e51b815260040161092590613752565b6000806000611ba3612317565b925092509250600c54811015611bcb5760405162461bcd60e51b815260040161092590613d07565b611bd58284612585565b505050565b600082820183811015611bff5760405162461bcd60e51b815260040161092590613789565b9392505050565b6001600160a01b038316611c2c5760405162461bcd60e51b815260040161092590613b82565b6001600160a01b038216611c525760405162461bcd60e51b815260040161092590613d75565b6001600160a01b0380841660008181526003602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590611cad90859061365b565b60405180910390a3505050565b50600090565b61271090565b600082611cd557506000610775565b82820282848281611ce257fe5b0414611bff5760405162461bcd60e51b815260040161092590613af0565b6000611bff83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506126b6565b6000611bff83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f77008152505b60008184841115611da45760405162461bcd60e51b815260040161092591906136e2565b505050900390565b6001600160a01b038216611dd25760405162461bcd60e51b815260040161092590613bb9565b611e0f816040518060600160405280602e8152602001613eed602e91396001600160a01b0386166000908152600460205260409020549190611d80565b6001600160a01b038085166000908152600460205260408082209390935590841681522054611e3e9082611bda565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611cad90859061365b565b60008111611eb05760405162461bcd60e51b815260040161092590613c73565b6116557f0000000000000000000000000000000000000000000000000000000000000000826126ed565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90611f08908590859060040161361d565b602060405180830381600087803b158015611f2257600080fd5b505af1158015611f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5a919061338c565b611bd55760405162461bcd60e51b81526004016109259061390e565b611fb381604051806060016040528060278152602001613ec6602791396001600160a01b0385166000908152600460205260409020549190611d80565b60046000846001600160a01b03166001600160a01b031681526020019081526020016000208190555061200381604051806060016040528060278152602001613e70602791396002549190611d80565b6002556040516000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061204490859061365b565b60405180910390a35050565b600e5460ff1615156001146120775760405162461bcd60e51b815260040161092590613d3e565b600d54156120aa57600080600061208c612317565b925092509250600d548111156120a6576120a68284612585565b5050505b6009546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906323b872dd906120f7903390309086906004016135b8565b602060405180830381600087803b15801561211157600080fd5b505af1158015612125573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612149919061338c565b6121655760405162461bcd60e51b815260040161092590613c16565b60006121907f000000000000000000000000000000000000000000000000000000000000000061276e565b9050600061219f6107c2611cc0565b90506121b7846121b261067a8685611d42565b61281c565b6121c08361289e565b836001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c846040516109d7919061365b565b3390565b6017546040517f93f1a40b0000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906393f1a40b906122499086908690600401613de1565b604080518083038186803b15801561226057600080fd5b505afa158015612274573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612298919061344a565b509392505050565b6017546040517f5312ea8e0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690635312ea8e906122e990849060040161365b565b600060405180830381600087803b15801561230357600080fd5b505af1158015610ac8573d6000803e3d6000fd5b6013546040516370a0823160e01b81526000918291829182916001600160a01b03909116906370a08231906123509030906004016135a4565b60206040518083038186803b15801561236857600080fd5b505afa15801561237c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a0919061340e565b905060006123ce7f0000000000000000000000000000000000000000000000000000000000000000306128e8565b905060006123dc8383611bda565b601354600a546014549293506000926124079285926001600160a01b03918216929082169116612984565b600a546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061243d9030906004016135a4565b60206040518083038186803b15801561245557600080fd5b505afa158015612469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248d919061340e565b9050600061249b8284611bda565b9399919850929650945050505050565b60006124b5611a03565b856040516020016124c792919061356e565b60405160208183030381529060405280519060200120905060006001828686866040516000815260200160405260405161250494939291906136c4565b6020604051602081039080840390855afa158015612526573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061255c5750866001600160a01b0316816001600160a01b0316145b6125785760405162461bcd60e51b81526004016109259061381d565b50505050505050565b4690565b6125ae7f0000000000000000000000000000000000000000000000000000000000000000612a51565b60006125c36125bc83612a84565b8490611bda565b905060006125e26127106107cc60115485611cc690919063ffffffff16565b9050801561260757600a54600b54612607916001600160a01b03908116911683611eda565b60006126246127106107cc600f5486611cc690919063ffffffff16565b9050801561264357600a54612643906001600160a01b03163383611eda565b600061266161265c836126568787611d42565b90611d42565b612aac565b905061266c8161289e565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234612695610ec9565b6002546040516126a6929190613df8565b60405180910390a1505050505050565b600081836126d75760405162461bcd60e51b815260040161092591906136e2565b5060008385816126e357fe5b0495945050505050565b6017546040517f441a3e700000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063441a3e70906127389085908590600401613df8565b600060405180830381600087803b15801561275257600080fd5b505af1158015612766573d6000803e3d6000fd5b505050505050565b6017546040517f1526fe2700000000000000000000000000000000000000000000000000000000815260009182916001600160a01b0390911690631526fe27906127bc90869060040161365b565b60c06040518083038186803b1580156127d457600080fd5b505afa1580156127e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280c919061330b565b61ffff1698975050505050505050565b6002546128299082611bda565b6002556001600160a01b03821660009081526004602052604090205461284f9082611bda565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061204490859061365b565b600081116128be5760405162461bcd60e51b815260040161092590613a93565b6116557f000000000000000000000000000000000000000000000000000000000000000082612adb565b6017546040517fd18df53c0000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169063d18df53c906129349086908690600401613de1565b60206040518083038186803b15801561294c57600080fd5b505afa158015612960573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bff919061340e565b6000806129918585612b0d565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156129d057600080fd5b505afa1580156129e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0891906133a8565b5091509150866001600160a01b0316836001600160a01b031614612a2857905b612a4588836001600160701b0316836001600160701b0316612b3e565b98975050505050505050565b601754604051631c57762b60e31b81526001600160a01b039091169063e2bbb158906122e9908490600090600401613df8565b601354600a546014546000926107759285926001600160a01b03928316929182169116612b86565b600a546009546015546016546000936107759386936001600160a01b0392831693918316929081169116612d19565b601754604051631c57762b60e31b81526001600160a01b039091169063e2bbb158906127389085908590600401613df8565b600080826001600160a01b0316846001600160a01b031610612b30578284612b33565b83835b915091509250929050565b600080612b4d856103e5611cc6565b90506000612b5b8285611cc6565b90506000612b6f83611311886103e8611cc6565b9050612b7b8282611d00565b979650505050505050565b600080612b938585612b0d565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612bd257600080fd5b505afa158015612be6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0a91906133a8565b5091509150866001600160a01b0316836001600160a01b031614612c2a57905b600080612c4a8a856001600160701b0316856001600160701b0316612b3e565b9050886001600160a01b0316856001600160a01b031614612c6757905b612c7289888c612e93565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0388169063022c0d9f90612cca9085908590309060248101613e06565b600060405180830381600087803b158015612ce457600080fd5b505af1158015612cf8573d6000803e3d6000fd5b50505050818111612d095781612d0b565b805b9a9950505050505050505050565b600080612d27876002611d00565b905060008111612d495760405162461bcd60e51b815260040161092590613a36565b6000856001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015612d8457600080fd5b505afa158015612d98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dbc91906131df565b9050816001600160a01b0388811690831614612de157612dde83898489612b86565b90505b6000876001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015612e1c57600080fd5b505afa158015612e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5491906131df565b9050836001600160a01b038a811690831614612e7957612e76858b848a612b86565b90505b612e84898483612f2f565b9b9a5050505050505050505050565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90612ec1908590859060040161361d565b602060405180830381600087803b158015612edb57600080fd5b505af1158015612eef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f13919061338c565b611bd55760405162461bcd60e51b815260040161092590613dac565b6000806000856001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612f6d57600080fd5b505afa158015612f81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa591906133a8565b50915091506000612fc986846001600160701b0316846001600160701b0316613183565b905084811115612ff657849050612ff385836001600160701b0316856001600160701b0316613183565b95505b613071876001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561303257600080fd5b505afa158015613046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306a91906131df565b8888612e93565b6130ec876001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156130ad57600080fd5b505afa1580156130c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e591906131df565b8883612e93565b6040517f6a6278420000000000000000000000000000000000000000000000000000000081526001600160a01b03881690636a627842906131319030906004016135a4565b602060405180830381600087803b15801561314b57600080fd5b505af115801561315f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b7b919061340e565b6000613193836107cc8685611cc6565b949350505050565b80516001600160701b0381168114610d5057600080fd5b803560ff81168114610d5057600080fd5b6000602082840312156131d4578081fd5b8135611bff81613e4c565b6000602082840312156131f0578081fd5b8151611bff81613e4c565b6000806040838503121561320d578081fd5b823561321881613e4c565b9150602083013561322881613e4c565b809150509250929050565b600080600060608486031215613247578081fd5b833561325281613e4c565b9250602084013561326281613e4c565b929592945050506040919091013590565b600080600080600080600060e0888a03121561328d578283fd5b873561329881613e4c565b965060208801356132a881613e4c565b955060408801359450606088013593506132c4608089016131b2565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156132f2578182fd5b82356132fd81613e4c565b946020939093013593505050565b60008060008060008060c08789031215613323578182fd5b865161332e81613e4c565b809650506020870151945060408701519350606087015192506080870151915060a087015161ffff81168114613362578182fd5b809150509295509295509295565b600060208284031215613381578081fd5b8135611bff81613e61565b60006020828403121561339d578081fd5b8151611bff81613e61565b6000806000606084860312156133bc578283fd5b6133c58461319b565b92506133d36020850161319b565b9150604084015163ffffffff811681146133eb578182fd5b809150509250925092565b600060208284031215613407578081fd5b5035919050565b60006020828403121561341f578081fd5b5051919050565b60008060408385031215613438578182fd5b82359150602083013561322881613e61565b6000806040838503121561345c578182fd5b505080516020909101519092909150565b600080600080600060a08688031215613484578283fd5b853594506020860135935061349b604087016131b2565b94979396509394606081013594506080013592915050565b60008151808452815b818110156134d8576020818501810151868301820152016134bc565b818111156134e95782602083870101525b50601f01601f19169290920160200192915050565b600080835460018082166000811461351d576001811461353457613563565b60ff198316865260028304607f1686019350613563565b600283048786526020808720875b8381101561355b5781548a820152908501908201613542565b505050860193505b509195945050505050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b901515815260200190565b90815260200190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252611bff60208301846134b3565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f59616b53747261746567793a3a6f6e6c79454f41000000000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526034908201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60408201527f6f20616c6c6f776564206465706f7369746f7273000000000000000000000000606082015260800190565b60208082526024908201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160408201527f7475726500000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f7200000000604082015260600190565b60208082526029908201527f4d617374657243686566537472617465677956313a3a7265736375654465706c60408201527f6f79656446756e64730000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f4d617374657243686566537472617465677956313a3a5452414e534645525f4660408201527f524f4d5f4641494c454400000000000000000000000000000000000000000000606082015260800190565b6020808252600f908201527f7065726d69743a3a657870697265640000000000000000000000000000000000604082015260600190565b6020808252601e908201527f4d617374657243686566537472617465677956313a3a77697468647261770000604082015260600190565b6020808252602a908201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60408201527f6f7420616c6c6f77656400000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f4465784c6962726172793a3a5f636f6e76657274526577617264546f6b656e7360408201527f546f4465706f736974546f6b656e730000000000000000000000000000000000606082015260800190565b60208082526029908201527f4d617374657243686566537472617465677956313a3a5f7374616b654465706f60408201527f736974546f6b656e730000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601c908201527f5f617070726f76653a3a6f776e6572207a65726f206164647265737300000000604082015260600190565b60208082526034908201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260408201527f20746f20746865207a65726f2061646472657373000000000000000000000000606082015260800190565b60208082526025908201527f4d617374657243686566537472617465677956313a3a7472616e73666572206660408201527f61696c6564000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602c908201527f4d617374657243686566537472617465677956313a3a5f77697468647261774460408201527f65706f736974546f6b656e730000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f59616b53747261746567793a3a6f6e6c79446576000000000000000000000000604082015260600190565b6020808252601e908201527f4d617374657243686566537472617465677956313a3a7265696e766573740000604082015260600190565b6020808252601e908201527f4d617374657243686566537472617465677956313a3a5f6465706f7369740000604082015260600190565b6020808252601e908201527f5f617070726f76653a3a7370656e646572207a65726f20616464726573730000604082015260600190565b6020808252818101527f4465784c6962726172793a3a5452414e534645525f46524f4d5f4641494c4544604082015260600190565b9182526001600160a01b0316602082015260400190565b918252602082015260400190565b60008582528460208301526001600160a01b038416604083015260806060830152613e3460808301846134b3565b9695505050505050565b60ff91909116815260200190565b6001600160a01b038116811461165557600080fd5b801515811461165557600080fdfe5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c797472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a26469706673582212208dae73406c7ad5f994c53bb832b942ef215cd07fcbf84e33e4221a1a50ba138164736f6c6343000703003353776170207061697220277377617050616972506f6f6c5265776172642720648be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103835760003560e01c80638980f11f116101de578063bd079f551161010f578063dd62ed3e116100ad578063ed24911d1161007c578063ed24911d146106a5578063f2fde38b146106ad578063f7c618c1146106c0578063fdb5a03e146106c857610383565b8063dd62ed3e14610659578063dd8ce4d61461066c578063e21ac8251461067f578063eab89a5a1461069257610383565b8063cff1b6ef116100e9578063cff1b6ef14610623578063d505accf14610636578063da09c72c14610649578063dbd9a4d41461065157610383565b8063bd079f551461060b578063c4b24a4614610613578063c89039c51461061b57610383565b80639e4e73181161017c578063ac0d31ff11610156578063ac0d31ff146105d5578063b52a321f146105e8578063b6b55f25146105f0578063b9e57b801461060357610383565b80639e4e7318146105a7578063a8ae2b7c146105af578063a9059cbb146105c257610383565b80638da5cb5b116101b85780638da5cb5b146105715780639291d5631461057957806395d89b411461058c57806399729ec11461059457610383565b80638980f11f146105435780638aff733d146105565780638b73e6061461055e57610383565b80634bebd1e7116102b8578063715018a6116102565780637ae26773116102305780637ae26773146105025780637d882097146105155780637ecebe001461051d578063818372301461053057610383565b8063715018a6146104ea578063762aad25146104f2578063789139bc146104fa57610383565b80635e5eee1b116102925780635e5eee1b146104b25780635ea682ea146104c75780635eaec0e4146104cf57806370a08231146104d757610383565b80634bebd1e7146104795780634e77ace51461048c5780634ebb79161461049f57610383565b80632e1a7d4d11610325578063313ce567116102ff578063313ce567146104365780633bdc6e721461044b578063483c2ef0146104535780634a970be71461046657610383565b80632e1a7d4d146104065780632f4f21e21461041b57806330adf81f1461042e57610383565b80630f23475d116103615780630f23475d146103db57806318160ddd146103e357806320606b70146103eb57806323b872dd146103f357610383565b806306fdde031461038857806307677111146103a6578063095ea7b3146103bb575b600080fd5b6103906106d0565b60405161039d91906136e2565b60405180910390f35b6103ae61075e565b60405161039d919061365b565b6103ce6103c93660046132e0565b610764565b60405161039d9190613650565b6103ae61077b565b6103ae6107e7565b6103ae6107ed565b6103ce610401366004613233565b610811565b6104196104143660046133f6565b6108f8565b005b6104196104293660046132e0565b6109e5565b6103ae6109f3565b61043e610a17565b60405161039d9190613e3e565b6103ae610a1c565b6103ce6104613660046131c3565b610a22565b61041961047436600461346d565b610a37565b6104196104873660046131c3565b610acf565b61041961049a366004613370565b610bb3565b6104196104ad3660046133f6565b610c51565b6104ba610cfd565b60405161039d91906135a4565b6103ae610d0c565b6103ae610d12565b6103ae6104e53660046131c3565b610d36565b610419610d55565b6104ba610deb565b6103ae610dfa565b6104196105103660046131fb565b610e00565b6103ae610ec9565b6103ae61052b3660046131c3565b610efc565b61041961053e3660046133f6565b610f0e565b6104196105513660046132e0565b610f8d565b6103ae61109f565b61041961056c3660046131c3565b6110a5565b6104ba6111ab565b6104196105873660046131c3565b6111ba565b61039061125a565b6104196105a23660046133f6565b6112b4565b6103ae611362565b6104196105bd3660046133f6565b611386565b6103ce6105d03660046132e0565b61142e565b6104196105e3366004613426565b61143b565b6103ce611642565b6104196105fe3660046133f6565b61164b565b6103ae611658565b6103ae611699565b6103ae61169f565b6104ba6116aa565b6104196106313660046133f6565b6116b9565b610419610644366004613273565b611761565b6104ba611816565b610419611825565b6103ae6106673660046131fb565b6118ee565b6103ae61067a3660046133f6565b611919565b61041961068d3660046133f6565b611953565b6103ae6106a03660046133f6565b6119d2565b6103ae611a03565b6104196106bb3660046131c3565b611a9a565b6104ba611b68565b610419611b77565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107565780601f1061072b57610100808354040283529160200191610756565b820191906000526020600020905b81548152906001019060200180831161073957829003601f168201915b505050505081565b60105481565b6000610771338484611c06565b5060015b92915050565b600080610786610ec9565b905060006107b37f0000000000000000000000000000000000000000000000000000000000000000611cba565b905060006107d26107c2611cc0565b6107cc8585611cc6565b90611d00565b90506107de8382611d42565b93505050505b90565b60025481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6001600160a01b03831660008181526003602090815260408083203380855292528220549192909190821480159061084b57506000198114155b156108e1576000610877856040518060600160405280602f8152602001613e97602f9139849190611d80565b6001600160a01b03808916600081815260036020908152604080832094891680845294909152908190208490555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906108d790859061365b565b60405180910390a3505b6108ec868686611dac565b50600195945050505050565b6000610903826119d2565b90506000811161092e5760405162461bcd60e51b8152600401610925906139a2565b60405180910390fd5b61093781611e90565b60006109627f0000000000000000000000000000000000000000000000000000000000000000611cba565b905060006109716107c2611cc0565b600954909150610994906001600160a01b03163361098f8685611d42565b611eda565b61099e3385611f76565b336001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364846040516109d7919061365b565b60405180910390a250505050565b6109ef8282612050565b5050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60075481565b60086020526000908152604090205460ff1681565b6009546040517fd505accf0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063d505accf90610a8c90339030908a908a908a908a908a906004016135dc565b600060405180830381600087803b158015610aa657600080fd5b505af1158015610aba573d6000803e3d6000fd5b50505050610ac83386612050565b5050505050565b610ad76121f9565b6001600160a01b0316610ae86111ab565b6001600160a01b031614610b0e5760405162461bcd60e51b815260040161092590613b4d565b6001600160a01b03811660009081526008602052604090205460ff1615610b475760405162461bcd60e51b81526004016109259061387a565b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610b7991611bda565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b610bbb6121f9565b6001600160a01b0316610bcc6111ab565b6001600160a01b031614610bf25760405162461bcd60e51b815260040161092590613b4d565b600e5460ff1615158115151415610c0857600080fd5b600e805460ff19168215151790556040517f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e8590610c46908390613650565b60405180910390a150565b610c596121f9565b6001600160a01b0316610c6a6111ab565b6001600160a01b031614610c905760405162461bcd60e51b815260040161092590613b4d565b60008111610c9d57600080fd5b604051339082156108fc029083906000818181858888f19350505050158015610cca573d6000803e3d6000fd5b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28600082604051610c4692919061361d565b6018546001600160a01b031681565b60115481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b0381166000908152600460205260409020545b919050565b610d5d6121f9565b6001600160a01b0316610d6e6111ab565b6001600160a01b031614610d945760405162461bcd60e51b815260040161092590613b4d565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36006805473ffffffffffffffffffffffffffffffffffffffff19169055565b6017546001600160a01b031681565b600d5481565b610e086121f9565b6001600160a01b0316610e196111ab565b6001600160a01b031614610e3f5760405162461bcd60e51b815260040161092590613b4d565b60405163095ea7b360e01b81526001600160a01b0383169063095ea7b390610e6e90849060009060040161361d565b602060405180830381600087803b158015610e8857600080fd5b505af1158015610e9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec0919061338c565b6109ef57600080fd5b600080610ef67f0000000000000000000000000000000000000000000000000000000000000000306121fd565b91505090565b60056020526000908152604090205481565b610f166121f9565b6001600160a01b0316610f276111ab565b6001600160a01b031614610f4d5760405162461bcd60e51b815260040161092590613b4d565b7f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100600c5482604051610f80929190613df8565b60405180910390a1600c55565b610f956121f9565b6001600160a01b0316610fa66111ab565b6001600160a01b031614610fcc5760405162461bcd60e51b815260040161092590613b4d565b60008111610fd957600080fd5b60405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb90611007903390859060040161361d565b602060405180830381600087803b15801561102157600080fd5b505af1158015611035573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611059919061338c565b61106257600080fd5b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28828260405161109392919061361d565b60405180910390a15050565b600f5481565b6110ad6121f9565b6001600160a01b03166110be6111ab565b6001600160a01b0316146110e45760405162461bcd60e51b815260040161092590613b4d565b6000600754116111065760405162461bcd60e51b8152600401610925906137c0565b6001600160a01b03811660009081526008602052604090205460ff1615156001146111435760405162461bcd60e51b8152600401610925906139d9565b6001600160a01b0381166000908152600860205260409020805460ff19169055600754611171906001611d42565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b6006546001600160a01b031690565b600b546001600160a01b031633146111e45760405162461bcd60e51b815260040161092590613cd0565b600b546040517fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c0091611223916001600160a01b03909116908490613636565b60405180910390a1600b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107565780601f1061072b57610100808354040283529160200191610756565b6112bc6121f9565b6001600160a01b03166112cd6111ab565b6001600160a01b0316146112f35760405162461bcd60e51b815260040161092590613b4d565b612710611317600f5461131160105485611bda90919063ffffffff16565b90611bda565b111561132257600080fd5b7f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d65172613160115482604051611355929190613df8565b60405180910390a1601155565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b61138e6121f9565b6001600160a01b031661139f6111ab565b6001600160a01b0316146113c55760405162461bcd60e51b815260040161092590613b4d565b6127106113e360115461131160105485611bda90919063ffffffff16565b11156113ee57600080fd5b7fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2600f5482604051611421929190613df8565b60405180910390a1600f55565b6000610771338484611dac565b6114436121f9565b6001600160a01b03166114546111ab565b6001600160a01b03161461147a5760405162461bcd60e51b815260040161092590613b4d565b6009546040516370a0823160e01b81526000916001600160a01b0316906370a08231906114ab9030906004016135a4565b60206040518083038186803b1580156114c357600080fd5b505afa1580156114d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fb919061340e565b90506115267f00000000000000000000000000000000000000000000000000000000000000006122a0565b6009546040516370a0823160e01b81526000916001600160a01b0316906370a08231906115579030906004016135a4565b60206040518083038186803b15801561156f57600080fd5b505afa158015611583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a7919061340e565b9050836115b48284611d42565b10156115d25760405162461bcd60e51b8152600401610925906138b1565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2346115fb610ec9565b60025460405161160c929190613df8565b60405180910390a1600e5460ff161515600114801561162d57506001831515145b1561163c5761163c6000610bb3565b50505050565b600e5460ff1681565b6116553382612050565b50565b60008061166361169f565b9050600c548110611691576116896127106107cc600f5484611cc690919063ffffffff16565b9150506107e4565b600091505090565b600c5481565b6000806107de612317565b6009546001600160a01b031681565b6116c16121f9565b6001600160a01b03166116d26111ab565b6001600160a01b0316146116f85760405162461bcd60e51b815260040161092590613b4d565b612710611716600f5461131160115485611bda90919063ffffffff16565b111561172157600080fd5b7f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a60105482604051611754929190613df8565b60405180910390a1601055565b428410156117815760405162461bcd60e51b81526004016109259061396b565b6001600160a01b038716600090815260056020908152604080832080546001810190915590516117dc927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928c928c928c92918c9101613664565b60405160208183030381529060405280519060200120905061180188828686866124ab565b61180c888888611c06565b5050505050505050565b600b546001600160a01b031681565b61182d6121f9565b6001600160a01b031661183e6111ab565b6001600160a01b0316146118645760405162461bcd60e51b815260040161092590613b4d565b60095460125460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39261189c929116906000199060040161361d565b602060405180830381600087803b1580156118b657600080fd5b505af11580156118ca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611655919061338c565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b600061192f611926610ec9565b60025490611cc6565b61193a575080610d50565b610775611945610ec9565b6002546107cc908590611cc6565b61195b6121f9565b6001600160a01b031661196c6111ab565b6001600160a01b0316146119925760405162461bcd60e51b815260040161092590613b4d565b7fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f600d54826040516119c5929190613df8565b60405180910390a1600d55565b60006119df611926610ec9565b6119eb57506000610d50565b6107756002546107cc6119fc610ec9565b8590611cc6565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b6000604051611a3891906134fe565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6611a6a612581565b30604051602001611a7f959493929190613698565b60405160208183030381529060405280519060200120905090565b611aa26121f9565b6001600160a01b0316611ab36111ab565b6001600160a01b031614611ad95760405162461bcd60e51b815260040161092590613b4d565b6001600160a01b038116611aff5760405162461bcd60e51b8152600401610925906136f5565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600a546001600160a01b031681565b323314611b965760405162461bcd60e51b815260040161092590613752565b6000806000611ba3612317565b925092509250600c54811015611bcb5760405162461bcd60e51b815260040161092590613d07565b611bd58284612585565b505050565b600082820183811015611bff5760405162461bcd60e51b815260040161092590613789565b9392505050565b6001600160a01b038316611c2c5760405162461bcd60e51b815260040161092590613b82565b6001600160a01b038216611c525760405162461bcd60e51b815260040161092590613d75565b6001600160a01b0380841660008181526003602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590611cad90859061365b565b60405180910390a3505050565b50600090565b61271090565b600082611cd557506000610775565b82820282848281611ce257fe5b0414611bff5760405162461bcd60e51b815260040161092590613af0565b6000611bff83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506126b6565b6000611bff83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f77008152505b60008184841115611da45760405162461bcd60e51b815260040161092591906136e2565b505050900390565b6001600160a01b038216611dd25760405162461bcd60e51b815260040161092590613bb9565b611e0f816040518060600160405280602e8152602001613eed602e91396001600160a01b0386166000908152600460205260409020549190611d80565b6001600160a01b038085166000908152600460205260408082209390935590841681522054611e3e9082611bda565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611cad90859061365b565b60008111611eb05760405162461bcd60e51b815260040161092590613c73565b6116557f0000000000000000000000000000000000000000000000000000000000000000826126ed565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90611f08908590859060040161361d565b602060405180830381600087803b158015611f2257600080fd5b505af1158015611f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5a919061338c565b611bd55760405162461bcd60e51b81526004016109259061390e565b611fb381604051806060016040528060278152602001613ec6602791396001600160a01b0385166000908152600460205260409020549190611d80565b60046000846001600160a01b03166001600160a01b031681526020019081526020016000208190555061200381604051806060016040528060278152602001613e70602791396002549190611d80565b6002556040516000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061204490859061365b565b60405180910390a35050565b600e5460ff1615156001146120775760405162461bcd60e51b815260040161092590613d3e565b600d54156120aa57600080600061208c612317565b925092509250600d548111156120a6576120a68284612585565b5050505b6009546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906323b872dd906120f7903390309086906004016135b8565b602060405180830381600087803b15801561211157600080fd5b505af1158015612125573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612149919061338c565b6121655760405162461bcd60e51b815260040161092590613c16565b60006121907f000000000000000000000000000000000000000000000000000000000000000061276e565b9050600061219f6107c2611cc0565b90506121b7846121b261067a8685611d42565b61281c565b6121c08361289e565b836001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c846040516109d7919061365b565b3390565b6017546040517f93f1a40b0000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906393f1a40b906122499086908690600401613de1565b604080518083038186803b15801561226057600080fd5b505afa158015612274573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612298919061344a565b509392505050565b6017546040517f5312ea8e0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690635312ea8e906122e990849060040161365b565b600060405180830381600087803b15801561230357600080fd5b505af1158015610ac8573d6000803e3d6000fd5b6013546040516370a0823160e01b81526000918291829182916001600160a01b03909116906370a08231906123509030906004016135a4565b60206040518083038186803b15801561236857600080fd5b505afa15801561237c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a0919061340e565b905060006123ce7f0000000000000000000000000000000000000000000000000000000000000000306128e8565b905060006123dc8383611bda565b601354600a546014549293506000926124079285926001600160a01b03918216929082169116612984565b600a546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061243d9030906004016135a4565b60206040518083038186803b15801561245557600080fd5b505afa158015612469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248d919061340e565b9050600061249b8284611bda565b9399919850929650945050505050565b60006124b5611a03565b856040516020016124c792919061356e565b60405160208183030381529060405280519060200120905060006001828686866040516000815260200160405260405161250494939291906136c4565b6020604051602081039080840390855afa158015612526573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061255c5750866001600160a01b0316816001600160a01b0316145b6125785760405162461bcd60e51b81526004016109259061381d565b50505050505050565b4690565b6125ae7f0000000000000000000000000000000000000000000000000000000000000000612a51565b60006125c36125bc83612a84565b8490611bda565b905060006125e26127106107cc60115485611cc690919063ffffffff16565b9050801561260757600a54600b54612607916001600160a01b03908116911683611eda565b60006126246127106107cc600f5486611cc690919063ffffffff16565b9050801561264357600a54612643906001600160a01b03163383611eda565b600061266161265c836126568787611d42565b90611d42565b612aac565b905061266c8161289e565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234612695610ec9565b6002546040516126a6929190613df8565b60405180910390a1505050505050565b600081836126d75760405162461bcd60e51b815260040161092591906136e2565b5060008385816126e357fe5b0495945050505050565b6017546040517f441a3e700000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063441a3e70906127389085908590600401613df8565b600060405180830381600087803b15801561275257600080fd5b505af1158015612766573d6000803e3d6000fd5b505050505050565b6017546040517f1526fe2700000000000000000000000000000000000000000000000000000000815260009182916001600160a01b0390911690631526fe27906127bc90869060040161365b565b60c06040518083038186803b1580156127d457600080fd5b505afa1580156127e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280c919061330b565b61ffff1698975050505050505050565b6002546128299082611bda565b6002556001600160a01b03821660009081526004602052604090205461284f9082611bda565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061204490859061365b565b600081116128be5760405162461bcd60e51b815260040161092590613a93565b6116557f000000000000000000000000000000000000000000000000000000000000000082612adb565b6017546040517fd18df53c0000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169063d18df53c906129349086908690600401613de1565b60206040518083038186803b15801561294c57600080fd5b505afa158015612960573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bff919061340e565b6000806129918585612b0d565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156129d057600080fd5b505afa1580156129e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0891906133a8565b5091509150866001600160a01b0316836001600160a01b031614612a2857905b612a4588836001600160701b0316836001600160701b0316612b3e565b98975050505050505050565b601754604051631c57762b60e31b81526001600160a01b039091169063e2bbb158906122e9908490600090600401613df8565b601354600a546014546000926107759285926001600160a01b03928316929182169116612b86565b600a546009546015546016546000936107759386936001600160a01b0392831693918316929081169116612d19565b601754604051631c57762b60e31b81526001600160a01b039091169063e2bbb158906127389085908590600401613df8565b600080826001600160a01b0316846001600160a01b031610612b30578284612b33565b83835b915091509250929050565b600080612b4d856103e5611cc6565b90506000612b5b8285611cc6565b90506000612b6f83611311886103e8611cc6565b9050612b7b8282611d00565b979650505050505050565b600080612b938585612b0d565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612bd257600080fd5b505afa158015612be6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0a91906133a8565b5091509150866001600160a01b0316836001600160a01b031614612c2a57905b600080612c4a8a856001600160701b0316856001600160701b0316612b3e565b9050886001600160a01b0316856001600160a01b031614612c6757905b612c7289888c612e93565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0388169063022c0d9f90612cca9085908590309060248101613e06565b600060405180830381600087803b158015612ce457600080fd5b505af1158015612cf8573d6000803e3d6000fd5b50505050818111612d095781612d0b565b805b9a9950505050505050505050565b600080612d27876002611d00565b905060008111612d495760405162461bcd60e51b815260040161092590613a36565b6000856001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015612d8457600080fd5b505afa158015612d98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dbc91906131df565b9050816001600160a01b0388811690831614612de157612dde83898489612b86565b90505b6000876001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015612e1c57600080fd5b505afa158015612e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5491906131df565b9050836001600160a01b038a811690831614612e7957612e76858b848a612b86565b90505b612e84898483612f2f565b9b9a5050505050505050505050565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90612ec1908590859060040161361d565b602060405180830381600087803b158015612edb57600080fd5b505af1158015612eef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f13919061338c565b611bd55760405162461bcd60e51b815260040161092590613dac565b6000806000856001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612f6d57600080fd5b505afa158015612f81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa591906133a8565b50915091506000612fc986846001600160701b0316846001600160701b0316613183565b905084811115612ff657849050612ff385836001600160701b0316856001600160701b0316613183565b95505b613071876001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561303257600080fd5b505afa158015613046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306a91906131df565b8888612e93565b6130ec876001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156130ad57600080fd5b505afa1580156130c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e591906131df565b8883612e93565b6040517f6a6278420000000000000000000000000000000000000000000000000000000081526001600160a01b03881690636a627842906131319030906004016135a4565b602060405180830381600087803b15801561314b57600080fd5b505af115801561315f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b7b919061340e565b6000613193836107cc8685611cc6565b949350505050565b80516001600160701b0381168114610d5057600080fd5b803560ff81168114610d5057600080fd5b6000602082840312156131d4578081fd5b8135611bff81613e4c565b6000602082840312156131f0578081fd5b8151611bff81613e4c565b6000806040838503121561320d578081fd5b823561321881613e4c565b9150602083013561322881613e4c565b809150509250929050565b600080600060608486031215613247578081fd5b833561325281613e4c565b9250602084013561326281613e4c565b929592945050506040919091013590565b600080600080600080600060e0888a03121561328d578283fd5b873561329881613e4c565b965060208801356132a881613e4c565b955060408801359450606088013593506132c4608089016131b2565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156132f2578182fd5b82356132fd81613e4c565b946020939093013593505050565b60008060008060008060c08789031215613323578182fd5b865161332e81613e4c565b809650506020870151945060408701519350606087015192506080870151915060a087015161ffff81168114613362578182fd5b809150509295509295509295565b600060208284031215613381578081fd5b8135611bff81613e61565b60006020828403121561339d578081fd5b8151611bff81613e61565b6000806000606084860312156133bc578283fd5b6133c58461319b565b92506133d36020850161319b565b9150604084015163ffffffff811681146133eb578182fd5b809150509250925092565b600060208284031215613407578081fd5b5035919050565b60006020828403121561341f578081fd5b5051919050565b60008060408385031215613438578182fd5b82359150602083013561322881613e61565b6000806040838503121561345c578182fd5b505080516020909101519092909150565b600080600080600060a08688031215613484578283fd5b853594506020860135935061349b604087016131b2565b94979396509394606081013594506080013592915050565b60008151808452815b818110156134d8576020818501810151868301820152016134bc565b818111156134e95782602083870101525b50601f01601f19169290920160200192915050565b600080835460018082166000811461351d576001811461353457613563565b60ff198316865260028304607f1686019350613563565b600283048786526020808720875b8381101561355b5781548a820152908501908201613542565b505050860193505b509195945050505050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b901515815260200190565b90815260200190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252611bff60208301846134b3565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f59616b53747261746567793a3a6f6e6c79454f41000000000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526034908201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60408201527f6f20616c6c6f776564206465706f7369746f7273000000000000000000000000606082015260800190565b60208082526024908201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160408201527f7475726500000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f7200000000604082015260600190565b60208082526029908201527f4d617374657243686566537472617465677956313a3a7265736375654465706c60408201527f6f79656446756e64730000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f4d617374657243686566537472617465677956313a3a5452414e534645525f4660408201527f524f4d5f4641494c454400000000000000000000000000000000000000000000606082015260800190565b6020808252600f908201527f7065726d69743a3a657870697265640000000000000000000000000000000000604082015260600190565b6020808252601e908201527f4d617374657243686566537472617465677956313a3a77697468647261770000604082015260600190565b6020808252602a908201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60408201527f6f7420616c6c6f77656400000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f4465784c6962726172793a3a5f636f6e76657274526577617264546f6b656e7360408201527f546f4465706f736974546f6b656e730000000000000000000000000000000000606082015260800190565b60208082526029908201527f4d617374657243686566537472617465677956313a3a5f7374616b654465706f60408201527f736974546f6b656e730000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601c908201527f5f617070726f76653a3a6f776e6572207a65726f206164647265737300000000604082015260600190565b60208082526034908201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260408201527f20746f20746865207a65726f2061646472657373000000000000000000000000606082015260800190565b60208082526025908201527f4d617374657243686566537472617465677956313a3a7472616e73666572206660408201527f61696c6564000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602c908201527f4d617374657243686566537472617465677956313a3a5f77697468647261774460408201527f65706f736974546f6b656e730000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f59616b53747261746567793a3a6f6e6c79446576000000000000000000000000604082015260600190565b6020808252601e908201527f4d617374657243686566537472617465677956313a3a7265696e766573740000604082015260600190565b6020808252601e908201527f4d617374657243686566537472617465677956313a3a5f6465706f7369740000604082015260600190565b6020808252601e908201527f5f617070726f76653a3a7370656e646572207a65726f20616464726573730000604082015260600190565b6020808252818101527f4465784c6962726172793a3a5452414e534645525f46524f4d5f4641494c4544604082015260600190565b9182526001600160a01b0316602082015260400190565b918252602082015260400190565b60008582528460208301526001600160a01b038416604083015260806060830152613e3460808301846134b3565b9695505050505050565b60ff91909116815260200190565b6001600160a01b038116811461165557600080fd5b801515811461165557600080fdfe5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c797472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a26469706673582212208dae73406c7ad5f994c53bb832b942ef215cd07fcbf84e33e4221a1a50ba138164736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "deposit(uint256)": {
        "params": {
          "amount": "Amount of tokens to deposit"
        }
      },
      "depositFor(address,uint256)": {
        "details": "Must mint receipt tokens to `account`",
        "params": {
          "account": "address to receive receipt tokens",
          "amount": "deposit tokens"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "Amount of tokens to deposit",
          "deadline": "The time at which to expire the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "estimateDeployedBalance()": {
        "returns": {
          "_0": "deposit tokens after withdraw fee"
        }
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "getDepositTokensForShares(uint256)": {
        "params": {
          "amount": "receipt tokens"
        },
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getSharesForDepositTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens",
        "params": {
          "amount": "deposit tokens"
        },
        "returns": {
          "_0": "receipt tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverAVAX(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "removeDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rescueDeployedFunds(uint256,bool)": {
        "params": {
          "disableDeposits": "bool",
          "minReturnAmountAccepted": "min deposit tokens to receive"
        }
      },
      "revokeAllowance(address,address)": {
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "setAllowances()": {
        "details": "Restricted to avoid griefing attacks"
      },
      "totalDeposits()": {
        "returns": {
          "_0": "total deposits available on the contract"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAdminFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateDepositsEnabled(bool)": {
        "params": {
          "newValue": "bool"
        }
      },
      "updateDevAddr(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "updateDevFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateReinvestReward(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "receipt tokens"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowDepositor(address)": {
        "notice": "Add an allowed depositor"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Reward tokens avialable to strategy, including balance"
      },
      "deposit(uint256)": {
        "notice": "Deposit tokens to receive receipt tokens"
      },
      "depositFor(address,uint256)": {
        "notice": "Deposit on behalf of another account"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit using Permit"
      },
      "estimateDeployedBalance()": {
        "notice": "Estimate recoverable balance after withdraw fee"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward"
      },
      "getDepositTokensForShares(uint256)": {
        "notice": "Calculate deposit tokens for a given amount of receipt tokens"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getSharesForDepositTokens(uint256)": {
        "notice": "Calculate receipt tokens for a given amount of deposit tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "reinvest()": {
        "notice": "Reinvest reward tokens into deposit tokens"
      },
      "removeDepositor(address)": {
        "notice": "Remove an allowed depositor"
      },
      "rescueDeployedFunds(uint256,bool)": {
        "notice": "Rescue all available deployed deposit tokens back to Strategy"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "setAllowances()": {
        "notice": "Approve tokens for use in Strategy"
      },
      "totalDeposits()": {
        "notice": "This function returns a snapshot of last available quotes"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "updateAdminFee(uint256)": {
        "notice": "Update admin fee"
      },
      "updateDepositsEnabled(bool)": {
        "notice": "Enable/disable deposits"
      },
      "updateDevAddr(address)": {
        "notice": "Update devAddr"
      },
      "updateDevFee(uint256)": {
        "notice": "Update developer fee"
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "notice": "Update reinvest max threshold before a deposit"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest min threshold"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      },
      "withdraw(uint256)": {
        "notice": "Redeem receipt tokens for deposit tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14792,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 14795,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 14800,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 14806,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 14810,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14826,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 23873,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 23986,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "numberOfAllowedDepositors",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 23990,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "allowedDepositors",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15965,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "depositToken",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IERC20)18537"
      },
      {
        "astId": 15967,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "rewardToken",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)18537"
      },
      {
        "astId": 15969,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "devAddr",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 15971,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 15973,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 15975,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "DEPOSITS_ENABLED",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 15977,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 15979,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "ADMIN_FEE_BIPS",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 15981,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "DEV_FEE_BIPS",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 84780,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "stakingContract",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 84782,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "poolRewardToken",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 84784,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "swapPairPoolReward",
        "offset": 0,
        "slot": "20",
        "type": "t_contract(IPair)20767"
      },
      {
        "astId": 85680,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "swapPairToken0",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 85682,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "swapPairToken1",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      },
      {
        "astId": 27140,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "podLeader",
        "offset": 0,
        "slot": "23",
        "type": "t_contract(IAvaiPodLeader)17545"
      },
      {
        "astId": 27142,
        "contract": "contracts/strategies/AvaiStrategyForLP.sol:AvaiStrategyForLP",
        "label": "swapPairRewardToken",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAvaiPodLeader)17545": {
        "encoding": "inplace",
        "label": "contract IAvaiPodLeader",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)18537": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPair)20767": {
        "encoding": "inplace",
        "label": "contract IPair",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}