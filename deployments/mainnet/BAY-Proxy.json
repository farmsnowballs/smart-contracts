{
  "address": "0xC746990C316818073c1A304C0C3c1F79d7b75E67",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gmxDepositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gmxRewardRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "approveStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approvedStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "buyAndStakeGlp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gmxDepositor",
      "outputs": [
        {
          "internalType": "contract IBayDepositor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gmxRewardRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeESGMX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawGlp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb0a8482893ede3517aa19206b8e76f24331a678c4320f99c7a093174e0af4114",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0xC746990C316818073c1A304C0C3c1F79d7b75E67",
    "transactionIndex": 4,
    "gasUsed": "989484",
    "logsBloom": "0x
    "blockHash": "0xc5f26b41559bee8da4688bb5203e87ca20ae3cf72a997b4d9c9fd03f2efbcce4",
    "transactionHash": "0xb0a8482893ede3517aa19206b8e76f24331a678c4320f99c7a093174e0af4114",
    "logs": [],
    "blockNumber": 26769635,
    "cumulativeGasUsed": "1318345",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd9950e64e6238081b5E5cf69A8A4f650f3d569F6",
    "0x8fa98e7A80D90725E23FEC8ceF36B2551b2e364d",
    "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44"
  ],
  "solcInputHash": "30e4131a8e856a7860fe994d38fb21e3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gmxDepositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gmxRewardRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"approveStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvedStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyAndStakeGlp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gmxDepositor\",\"outputs\":[{\"internalType\":\"contract IBayDepositor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gmxRewardRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeESGMX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawGlp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/avalanche/baymax/BlpProxy.sol\":\"BlpProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x13986c2d371de8b29ffbbd5c2a5daa3fe6801801ba3b09530dbfc714d239adcb\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb0e33a6c916e2b3c1669c15106d704c72403bb6c102dd1e48ed99a1fca92988\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c0187783bd30018a8dddffa7e5aff1ad044dc6b7d63feca5010fdcb8dab2bac\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/baymax/BlpProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../../../lib/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IBayDepositor.sol\\\";\\nimport \\\"./interfaces/IBlpProxy.sol\\\";\\nimport \\\"./interfaces/IGmxRewardRouter.sol\\\";\\nimport \\\"./interfaces/IGmxRewardTracker.sol\\\";\\n\\nlibrary SafeProxy {\\n    function safeExecute(\\n        IBayDepositor gmxDepositor,\\n        address target,\\n        uint256 value,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returnValue) = gmxDepositor.execute(target, value, data);\\n        if (!success) revert(\\\"BlpProxy::safeExecute failed\\\");\\n        return returnValue;\\n    }\\n}\\n\\ncontract BlpProxy is IBlpProxy {\\n    using SafeProxy for IBayDepositor;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 internal constant BIPS_DIVISOR = 10000;\\n\\n    address internal constant sGLP = 0x9a4E5E7fbb3Bbf0F04b78354aaFEA877E346ae33;\\n    address internal constant esGMX = 0x8d5618aa319d99A8A8396e8a855115dfEa5E84a4;\\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n    address public devAddr;\\n    address public approvedStrategy;\\n\\n    IBayDepositor public immutable override gmxDepositor;\\n    address public immutable override gmxRewardRouter;\\n\\n    address internal immutable stakedGlpTracker;\\n    address internal immutable glpManager;\\n\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"BlpProxy::onlyDev\\\");\\n        _;\\n    }\\n\\n    modifier onlyStrategy() {\\n        require(approvedStrategy == msg.sender, \\\"BlpProxy::onlyStrategy\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _gmxDepositor,\\n        address _gmxRewardRouter,\\n        address _devAddr\\n    ) {\\n        require(_gmxDepositor > address(0), \\\"BlpProxy::Invalid depositor address provided\\\");\\n        require(_gmxRewardRouter > address(0), \\\"BlpProxy::Invalid reward router address provided\\\");\\n        require(_devAddr > address(0), \\\"BlpProxy::Invalid dev address provided\\\");\\n        devAddr = _devAddr;\\n        gmxDepositor = IBayDepositor(_gmxDepositor);\\n        gmxRewardRouter = _gmxRewardRouter;\\n        stakedGlpTracker = IGmxRewardRouter(_gmxRewardRouter).stakedGlpTracker();\\n        glpManager = IGmxRewardRouter(_gmxRewardRouter).glpManager();\\n    }\\n\\n    function updateDevAddr(address newValue) public onlyDev {\\n        require(newValue > address(0), \\\"BlpProxy::Invalid dev address provided\\\");\\n        devAddr = newValue;\\n    }\\n\\n    function approveStrategy(address _strategy) external onlyDev {\\n        require(approvedStrategy == address(0), \\\"BlpProxy::Strategy for deposit token already added\\\");\\n        approvedStrategy = _strategy;\\n    }\\n\\n    function stakeESGMX() external onlyDev {\\n        gmxDepositor.safeExecute(\\n            gmxRewardRouter,\\n            0,\\n            abi.encodeWithSignature(\\\"stakeEsGmx(uint256)\\\", IERC20(esGMX).balanceOf(address(gmxDepositor)))\\n        );\\n    }\\n\\n    function buyAndStakeGlp(uint256 _amount) external override onlyStrategy returns (uint256) {\\n        gmxDepositor.safeExecute(WAVAX, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", glpManager, _amount));\\n        bytes memory result = gmxDepositor.safeExecute(\\n            gmxRewardRouter,\\n            0,\\n            abi.encodeWithSignature(\\\"mintAndStakeGlp(address,uint256,uint256,uint256)\\\", WAVAX, _amount, 0, 0)\\n        );\\n        gmxDepositor.safeExecute(WAVAX, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", glpManager, 0));\\n        return toUint256(result, 0);\\n    }\\n\\n    function withdrawGlp(uint256 _amount) external override onlyStrategy {\\n        _withdrawGlp(_amount);\\n    }\\n\\n    function _withdrawGlp(uint256 _amount) private {\\n        gmxDepositor.safeExecute(sGLP, 0, abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, _amount));\\n    }\\n\\n    function pendingRewards() external view override returns (uint256) {\\n        return IGmxRewardTracker(IGmxRewardRouter(gmxRewardRouter).feeGlpTracker()).claimable(address(gmxDepositor));\\n    }\\n\\n    function claimReward() external override onlyStrategy {\\n        gmxDepositor.safeExecute(\\n            gmxRewardRouter,\\n            0,\\n            abi.encodeWithSignature(\\n                \\\"handleRewards(bool,bool,bool,bool,bool,bool,bool)\\\",\\n                false, // bool _shouldClaimGmx\\n                false, // bool _shouldStakeGmx\\n                true, // bool _shouldClaimEsGmx\\n                true, // bool _shouldStakeEsGmx\\n                true, // bool _shouldStakeMultiplierPoints\\n                true, // bool _shouldClaimWeth\\n                false // bool _shouldConvertWethToEth\\n            )\\n        );\\n        uint256 reward = IERC20(WAVAX).balanceOf(address(gmxDepositor));\\n        gmxDepositor.safeExecute(WAVAX, 0, abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, reward));\\n    }\\n\\n    function totalDeposits() external view override returns (uint256) {\\n        return IGmxRewardTracker(stakedGlpTracker).stakedAmounts(address(gmxDepositor));\\n    }\\n\\n    function emergencyWithdraw(uint256 _balance) external override onlyStrategy {\\n        _withdrawGlp(_balance);\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0xbfa2ba16ef027e5a2ca3eeac364e29e4472f27038a8fff3f673986e8a02c0c9a\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/baymax/interfaces/IBayDepositor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IBayDepositor {\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool, bytes memory);\\n\\n    function setGmxProxy(address _proxy) external;\\n}\\n\",\"keccak256\":\"0x5dd50ee4ff1016dc6f13463251a65a63215de3fc0757ed263cd60e610de8f359\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/baymax/interfaces/IBlpProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IBayDepositor.sol\\\";\\n\\ninterface IBlpProxy {\\n    function gmxDepositor() external view returns (IBayDepositor);\\n\\n    function gmxRewardRouter() external view returns (address);\\n\\n    function buyAndStakeGlp(uint256 _amount) external returns (uint256);\\n\\n    function withdrawGlp(uint256 _amount) external;\\n\\n    function pendingRewards() external view returns (uint256);\\n\\n    function claimReward() external;\\n\\n    function totalDeposits() external view returns (uint256);\\n\\n    function emergencyWithdraw(uint256 _balance) external;\\n}\\n\",\"keccak256\":\"0x50a9be72abed699a0126afc8a5aa8f4f5a8dfc989dd042d1eb4c2d29d2075380\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/baymax/interfaces/IGmxRewardRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IGmxRewardRouter {\\n    function stakedGmxTracker() external view returns (address);\\n\\n    function bonusGmxTracker() external view returns (address);\\n\\n    function feeGmxTracker() external view returns (address);\\n\\n    function stakedGlpTracker() external view returns (address);\\n\\n    function feeGlpTracker() external view returns (address);\\n\\n    function glpManager() external view returns (address);\\n\\n    function mintAndStakeGlpETH(uint256 _minUsdg, uint256 _minGlp) external payable returns (uint256);\\n\\n    function mintAndStakeGlp(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minUsdg,\\n        uint256 _minGlp\\n    ) external returns (uint256);\\n\\n    function handleRewards(\\n        bool _shouldClaimGmx,\\n        bool _shouldStakeGmx,\\n        bool _shouldClaimEsGmx,\\n        bool _shouldStakeEsGmx,\\n        bool _shouldStakeMultiplierPoints,\\n        bool _shouldClaimWeth,\\n        bool _shouldConvertWethToEth\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8f90642b9e2621513c5fb54c34e83b8670c96bd9273ebbbfb428191b35df0c58\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/baymax/interfaces/IGmxRewardTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IGmxRewardTracker {\\n    function depositBalances(address _account, address _depositToken) external view returns (uint256);\\n\\n    function stakedAmounts(address _account) external view returns (uint256);\\n\\n    function updateRewards() external;\\n\\n    function stake(address _depositToken, uint256 _amount) external;\\n\\n    function stakeForAccount(\\n        address _fundingAccount,\\n        address _account,\\n        address _depositToken,\\n        uint256 _amount\\n    ) external;\\n\\n    function unstake(address _depositToken, uint256 _amount) external;\\n\\n    function unstakeForAccount(\\n        address _account,\\n        address _depositToken,\\n        uint256 _amount,\\n        address _receiver\\n    ) external;\\n\\n    function tokensPerInterval() external view returns (uint256);\\n\\n    function claim(address _receiver) external returns (uint256);\\n\\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\\n\\n    function claimable(address _account) external view returns (uint256);\\n\\n    function averageStakedAmounts(address _account) external view returns (uint256);\\n\\n    function cumulativeRewards(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd3f96481089ef8357ff0fb03797a6363666cb2d7376f4f35d117d2b1f7464ef7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22186,
        "contract": "contracts/strategies/avalanche/baymax/BlpProxy.sol:BlpProxy",
        "label": "devAddr",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 22188,
        "contract": "contracts/strategies/avalanche/baymax/BlpProxy.sol:BlpProxy",
        "label": "approvedStrategy",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}