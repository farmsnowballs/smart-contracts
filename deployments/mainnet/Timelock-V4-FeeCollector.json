{
  "address": "0x2D580F9CF2fB2D09BC411532988F2aFdA4E7BefF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenSweeper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_upgrader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dev",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "upgrader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "SetDev",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sweeper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Sweep",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEV_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_SWEEPER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapPair",
          "type": "address"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "removeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newDevAddr",
          "type": "address"
        }
      ],
      "name": "setDev",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapPair",
          "type": "address"
        }
      ],
      "name": "setExtraRewardSwapPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sweepAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "sweepTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapPair",
          "type": "address"
        }
      ],
      "name": "updateCrvAvaxSwapPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "leverageLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "leverageBips",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemLimitSafetyMargin",
          "type": "uint256"
        }
      ],
      "name": "updateLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "leverageLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "safetyFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minMinting",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "leverageBips",
          "type": "uint256"
        }
      ],
      "name": "updateLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "leverageLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "leverageBips",
          "type": "uint256"
        }
      ],
      "name": "updateLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "slippageBips",
          "type": "uint256"
        }
      ],
      "name": "updateMaxSwapSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc708bcbdb7f6946941bc3248ae328041346fd94a1411359e2e4ce38343a285fd",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x2D580F9CF2fB2D09BC411532988F2aFdA4E7BefF",
    "transactionIndex": 0,
    "gasUsed": "1643307",
    "logsBloom": "0x
    "blockHash": "0x82d4a4ee2a086b8d52a7222aacf7b56534da80b026efdad21babd7547ce28a52",
    "transactionHash": "0xc708bcbdb7f6946941bc3248ae328041346fd94a1411359e2e4ce38343a285fd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6594524,
        "transactionHash": "0xc708bcbdb7f6946941bc3248ae328041346fd94a1411359e2e4ce38343a285fd",
        "address": "0x2D580F9CF2fB2D09BC411532988F2aFdA4E7BefF",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x82d4a4ee2a086b8d52a7222aacf7b56534da80b026efdad21babd7547ce28a52"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6594524,
        "transactionHash": "0xc708bcbdb7f6946941bc3248ae328041346fd94a1411359e2e4ce38343a285fd",
        "address": "0x2D580F9CF2fB2D09BC411532988F2aFdA4E7BefF",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xaaeb0e7b67698f8ec0689e359bbe895bc1bc081c58211f57940cf243fc05a218",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x82d4a4ee2a086b8d52a7222aacf7b56534da80b026efdad21babd7547ce28a52"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6594524,
        "transactionHash": "0xc708bcbdb7f6946941bc3248ae328041346fd94a1411359e2e4ce38343a285fd",
        "address": "0x2D580F9CF2fB2D09BC411532988F2aFdA4E7BefF",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x82d4a4ee2a086b8d52a7222aacf7b56534da80b026efdad21babd7547ce28a52"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6594524,
        "transactionHash": "0xc708bcbdb7f6946941bc3248ae328041346fd94a1411359e2e4ce38343a285fd",
        "address": "0x2D580F9CF2fB2D09BC411532988F2aFdA4E7BefF",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x51b355059847d158e68950419dbcd54fad00bdfd0634c2515a5c533288c7f0a2",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x82d4a4ee2a086b8d52a7222aacf7b56534da80b026efdad21babd7547ce28a52"
      }
    ],
    "blockNumber": 6594524,
    "cumulativeGasUsed": "1643307",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44"
  ],
  "solcInputHash": "abf3f733008eedcf31e10d918dd6b444",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenSweeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_upgrader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upgrader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"SetDev\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sweeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sweep\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_SWEEPER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapPair\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"removeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newDevAddr\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapPair\",\"type\":\"address\"}],\"name\":\"setExtraRewardSwapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sweepAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sweepTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapPair\",\"type\":\"address\"}],\"name\":\"updateCrvAvaxSwapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"leverageLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverageBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemLimitSafetyMargin\",\"type\":\"uint256\"}],\"name\":\"updateLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"leverageLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safetyFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMinting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverageBips\",\"type\":\"uint256\"}],\"name\":\"updateLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"leverageLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverageBips\",\"type\":\"uint256\"}],\"name\":\"updateLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slippageBips\",\"type\":\"uint256\"}],\"name\":\"updateMaxSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"YakFeeCollector may be used as `devAddr` on YakStrategy contracts\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setDev(address,address)\":{\"details\":\"Restricted to `UPGRADER_ROLE`\",\"params\":{\"newDevAddr\":\"new value\",\"strategy\":\"address\"}},\"sweepAVAX(uint256)\":{\"details\":\"Restricted to `TOKEN_SWEEPER_ROLE`\",\"params\":{\"amount\":\"amount\"}},\"sweepTokens(address,uint256)\":{\"details\":\"Restricted to `TOKEN_SWEEPER_ROLE`\",\"params\":{\"tokenAddress\":\"address\",\"tokenAmount\":\"amount\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DEV_ROLE()\":{\"notice\":\"Role to manage strategy for onlyDev modifier\"},\"TOKEN_SWEEPER_ROLE()\":{\"notice\":\"Role to sweep funds from this contract\"},\"UPGRADER_ROLE()\":{\"notice\":\"Role to update `devAddr` on YakStrategy\"},\"setDev(address,address)\":{\"notice\":\"Set new value of `devAddr`\"},\"sweepAVAX(uint256)\":{\"notice\":\"Collect ERC20 from this contract\"},\"sweepTokens(address,uint256)\":{\"notice\":\"Collect ERC20 from this contract\"}},\"notice\":\"Role-based fee collector for YakStrategy contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/timelocks/YakFeeCollectorV1.sol\":\"YakFeeCollectorV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/lib/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x557221cd8a07e5720add4a60726ca8741aead91f5088918d38842be811ceb7d2\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6c2ca57501dc5f1d71e5a5e39616343b9bd57e363c50c4abbeab13059ce2c0ab\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x866de5f57330a3e8cc47fe5ffde51c5693b6e802448a7376881976e8635922e1\",\"license\":\"MIT\"},\"contracts/lib/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x90359191a81302c58f205187ecd072bcb4ca72357d2f08ce29e5206d808e717f\",\"license\":\"MIT\"},\"contracts/timelocks/YakFeeCollectorV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../lib/AccessControl.sol\\\";\\n\\ninterface IERC20 {\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function balanceOf(address owner) external view returns (uint);\\n}\\n\\ninterface IStrategy {\\n    function updateDevAddr(address newValue) external;\\n    // Joe\\n    function setExtraRewardSwapPair(address swapPair) external;\\n    // JoeLending\\n    function updateLeverage(uint256 _leverageLevel, uint256 _leverageBips) external;\\n    // Curve\\n    function updateCrvAvaxSwapPair(address swapPair) external;\\n    function updateMaxSwapSlippage(uint256 slippageBips) external;\\n    function removeReward(address rewardToken) external;\\n    function addReward(address rewardToken, address swapPair) external;\\n    // Benqi\\n    function updateLeverage(uint256 _leverageLevel, uint256 _leverageBips, uint256 _redeemLimitSafetyMargin) external;\\n    // Aave\\n    function updateLeverage(uint256 _leverageLevel, uint256 _safetyFactor, uint256 _minMinting, uint256 _leverageBips) external;\\n}\\n\\n/**\\n * @notice Role-based fee collector for YakStrategy contracts\\n * @dev YakFeeCollector may be used as `devAddr` on YakStrategy contracts\\n */\\ncontract YakFeeCollectorV1 is AccessControl {\\n\\n    /// @notice Role to sweep funds from this contract\\n    bytes32 public constant TOKEN_SWEEPER_ROLE = keccak256(\\\"TOKEN_SWEEPER_ROLE\\\");\\n\\n    /// @notice Role to update `devAddr` on YakStrategy\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n\\n    /// @notice Role to manage strategy for onlyDev modifier\\n    bytes32 public constant DEV_ROLE = keccak256(\\\"DEV_ROLE\\\");\\n\\n    event SetDev(address indexed upgrader, address indexed strategy, address newValue);\\n    event Sweep(address indexed sweeper, address indexed token, uint amount);\\n\\n    constructor(\\n        address _manager,\\n        address _tokenSweeper,\\n        address _upgrader,\\n        address _dev\\n    ) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _manager);\\n        _setupRole(TOKEN_SWEEPER_ROLE, _tokenSweeper);\\n        _setupRole(UPGRADER_ROLE, _upgrader);\\n        _setupRole(DEV_ROLE, _dev);\\n    }\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @notice Set new value of `devAddr`\\n     * @dev Restricted to `UPGRADER_ROLE`\\n     * @param strategy address\\n     * @param newDevAddr new value\\n     */\\n    function setDev(address strategy, address newDevAddr) external {\\n        require(hasRole(UPGRADER_ROLE, msg.sender), \\\"setDev::auth\\\");\\n        IStrategy(strategy).updateDevAddr(newDevAddr);\\n        emit SetDev(msg.sender, strategy, newDevAddr);\\n    }\\n\\n    /**\\n     * @notice Collect ERC20 from this contract\\n     * @dev Restricted to `TOKEN_SWEEPER_ROLE`\\n     * @param tokenAddress address\\n     * @param tokenAmount amount\\n     */\\n    function sweepTokens(address tokenAddress, uint tokenAmount) external {\\n        require(hasRole(TOKEN_SWEEPER_ROLE, msg.sender), \\\"sweepTokens::auth\\\");\\n        uint balance = IERC20(tokenAddress).balanceOf(address(this));\\n        if (balance < tokenAmount) {\\n            tokenAmount = balance;\\n        }\\n        require(tokenAmount > 0, \\\"sweepTokens::balance\\\");\\n        require(IERC20(tokenAddress).transfer(msg.sender, tokenAmount), \\\"sweepTokens::transfer failed\\\");\\n        emit Sweep(msg.sender, tokenAddress, tokenAmount);\\n\\n    }\\n\\n    /**\\n     * @notice Collect ERC20 from this contract\\n     * @dev Restricted to `TOKEN_SWEEPER_ROLE`\\n     * @param amount amount\\n     */\\n    function sweepAVAX(uint amount) external {\\n        require(hasRole(TOKEN_SWEEPER_ROLE, msg.sender), \\\"sweepAVAX::auth\\\");\\n        uint balance = address(this).balance;\\n        if (balance < amount) {\\n            amount = balance;\\n        }\\n        require(amount > 0, \\\"sweepAVAX::balance\\\");\\n        (bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n        require(success == true, \\\"sweepAVAX::transfer failed\\\");\\n        emit Sweep(msg.sender, address(0), amount);\\n    }\\n\\n    // DEV functions\\n\\n    function setExtraRewardSwapPair(address strategy, address swapPair) external {\\n        require(hasRole(DEV_ROLE, msg.sender), \\\"execute::auth\\\");\\n        IStrategy(strategy).setExtraRewardSwapPair(swapPair);\\n    }\\n\\n    function updateLeverage(address strategy, uint leverageLevel, uint leverageBips) external {\\n        require(hasRole(DEV_ROLE, msg.sender), \\\"execute::auth\\\");\\n        IStrategy(strategy).updateLeverage(leverageLevel, leverageBips);\\n    }\\n\\n    function updateLeverage(address strategy, uint leverageLevel, uint leverageBips, uint redeemLimitSafetyMargin) external {\\n        require(hasRole(DEV_ROLE, msg.sender), \\\"execute::auth\\\");\\n        IStrategy(strategy).updateLeverage(leverageLevel, leverageBips, redeemLimitSafetyMargin);\\n    }\\n\\n    function updateLeverage(address strategy, uint leverageLevel, uint safetyFactor, uint minMinting, uint leverageBips) external {\\n        require(hasRole(DEV_ROLE, msg.sender), \\\"execute::auth\\\");\\n        IStrategy(strategy).updateLeverage(leverageLevel, safetyFactor, minMinting, leverageBips);\\n    }\\n\\n    function updateCrvAvaxSwapPair(address strategy, address swapPair) external {\\n        require(hasRole(DEV_ROLE, msg.sender), \\\"execute::auth\\\");\\n        IStrategy(strategy).updateCrvAvaxSwapPair(swapPair);\\n    }\\n\\n    function updateMaxSwapSlippage(address strategy, uint256 slippageBips) external {\\n        require(hasRole(DEV_ROLE, msg.sender), \\\"execute::auth\\\");\\n        IStrategy(strategy).updateMaxSwapSlippage(slippageBips);\\n    }\\n\\n    function removeReward(address strategy, address rewardToken) external {\\n        require(hasRole(DEV_ROLE, msg.sender), \\\"execute::auth\\\");\\n        IStrategy(strategy).removeReward(rewardToken);\\n    }\\n\\n    function addReward(address strategy, address rewardToken, address swapPair) external {\\n        require(hasRole(DEV_ROLE, msg.sender), \\\"execute::auth\\\");\\n        IStrategy(strategy).addReward(rewardToken, swapPair);\\n\\n    }\\n}\",\"keccak256\":\"0xaa167a53b93d181bbcb1c330aac13abebd7c6d59e910d6c8fc7cc6cdb30db4cf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620019b1380380620019b1833981810160405260808110156200003757600080fd5b50805160208201516040830151606090930151919290916200005b600085620000e9565b620000877faaeb0e7b67698f8ec0689e359bbe895bc1bc081c58211f57940cf243fc05a21884620000e9565b620000b37f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e383620000e9565b620000df7f51b355059847d158e68950419dbcd54fad00bdfd0634c2515a5c533288c7f0a282620000e9565b50505050620001fd565b620000f58282620000f9565b5050565b6000828152602081815260409091206200011e9183906200140262000172821b17901c565b15620000f5576200012e62000192565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000189836001600160a01b03841662000196565b90505b92915050565b3390565b6000620001a48383620001e5565b620001dc575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200018c565b5060006200018c565b60009081526001919091016020526040902054151590565b6117a4806200020d6000396000f3fe6080604052600436106101795760003560e01c806391d14854116100cb578063d547741f1161007f578063e912994811610059578063e9129948146105cd578063f72c0d8b146105f7578063fcf0f0d31461060c57610180565b8063d547741f14610520578063dec6603614610559578063e327670f1461059257610180565b8063afb50e8f116100b0578063afb50e8f1461047e578063ca15c873146104bd578063cc68d1ad146104e757610180565b806391d148541461041c578063a217fddf1461046957610180565b806336568abe1161012d5780637f48b947116101075780637f48b9471461035a5780638c9f5f05146103955780639010d07c146103d057610180565b806336568abe14610291578063588ad62c146102ca57806375b7a7f01461030f57610180565b8063165d21c91161015e578063165d21c9146101f3578063248a9ca31461022e5780632f2ff15d1461025857610180565b806310050f471461018557806312980afe146101cc57610180565b3661018057005b600080fd5b34801561019157600080fd5b506101ca600480360360808110156101a857600080fd5b506001600160a01b038135169060208101359060408101359060600135610621565b005b3480156101d857600080fd5b506101e1610700565b60408051918252519081900360200190f35b3480156101ff57600080fd5b506101ca6004803603604081101561021657600080fd5b506001600160a01b0381358116916020013516610724565b34801561023a57600080fd5b506101e16004803603602081101561025157600080fd5b50356107fa565b34801561026457600080fd5b506101ca6004803603604081101561027b57600080fd5b50803590602001356001600160a01b031661080f565b34801561029d57600080fd5b506101ca600480360360408110156102b457600080fd5b50803590602001356001600160a01b031661087b565b3480156102d657600080fd5b506101ca600480360360608110156102ed57600080fd5b506001600160a01b0381358116916020810135821691604090910135166108dc565b34801561031b57600080fd5b506101ca600480360360a081101561033257600080fd5b506001600160a01b0381351690602081013590604081013590606081013590608001356109c4565b34801561036657600080fd5b506101ca6004803603604081101561037d57600080fd5b506001600160a01b0381358116916020013516610ac4565b3480156103a157600080fd5b506101ca600480360360408110156103b857600080fd5b506001600160a01b0381358116916020013516610b7e565b3480156103dc57600080fd5b50610400600480360360408110156103f357600080fd5b5080359060200135610ca8565b604080516001600160a01b039092168252519081900360200190f35b34801561042857600080fd5b506104556004803603604081101561043f57600080fd5b50803590602001356001600160a01b0316610cc9565b604080519115158252519081900360200190f35b34801561047557600080fd5b506101e1610ce1565b34801561048a57600080fd5b506101ca600480360360608110156104a157600080fd5b506001600160a01b038135169060208101359060400135610ce6565b3480156104c957600080fd5b506101e1600480360360208110156104e057600080fd5b5035610d9f565b3480156104f357600080fd5b506101ca6004803603604081101561050a57600080fd5b506001600160a01b038135169060200135610db6565b34801561052c57600080fd5b506101ca6004803603604081101561054357600080fd5b50803590602001356001600160a01b0316610e67565b34801561056557600080fd5b506101ca6004803603604081101561057c57600080fd5b506001600160a01b038135169060200135610ec0565b34801561059e57600080fd5b506101ca600480360360408110156105b557600080fd5b506001600160a01b0381358116916020013516611143565b3480156105d957600080fd5b506101ca600480360360208110156105f057600080fd5b50356111fd565b34801561060357600080fd5b506101e16113ba565b34801561061857600080fd5b506101e16113de565b61064b7f51b355059847d158e68950419dbcd54fad00bdfd0634c2515a5c533288c7f0a233610cc9565b61068c576040805162461bcd60e51b815260206004820152600d60248201526c0caf0cac6eae8ca7474c2eae8d609b1b604482015290519081900360640190fd5b836001600160a01b031663d6ec2a498484846040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050600060405180830381600087803b1580156106e257600080fd5b505af11580156106f6573d6000803e3d6000fd5b5050505050505050565b7faaeb0e7b67698f8ec0689e359bbe895bc1bc081c58211f57940cf243fc05a21881565b61074e7f51b355059847d158e68950419dbcd54fad00bdfd0634c2515a5c533288c7f0a233610cc9565b61078f576040805162461bcd60e51b815260206004820152600d60248201526c0caf0cac6eae8ca7474c2eae8d609b1b604482015290519081900360640190fd5b816001600160a01b031663a4d5e67c826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156107de57600080fd5b505af11580156107f2573d6000803e3d6000fd5b505050505050565b60009081526020819052604090206002015490565b6000828152602081905260409020600201546108329061082d611417565b610cc9565b61086d5760405162461bcd60e51b815260040180806020018281038252602f8152602001806116e1602f913960400191505060405180910390fd5b610877828261141b565b5050565b610883611417565b6001600160a01b0316816001600160a01b0316146108d25760405162461bcd60e51b815260040180806020018281038252602f815260200180611740602f913960400191505060405180910390fd5b6108778282611484565b6109067f51b355059847d158e68950419dbcd54fad00bdfd0634c2515a5c533288c7f0a233610cc9565b610947576040805162461bcd60e51b815260206004820152600d60248201526c0caf0cac6eae8ca7474c2eae8d609b1b604482015290519081900360640190fd5b826001600160a01b03166340b47e1a83836040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b1580156109a757600080fd5b505af11580156109bb573d6000803e3d6000fd5b50505050505050565b6109ee7f51b355059847d158e68950419dbcd54fad00bdfd0634c2515a5c533288c7f0a233610cc9565b610a2f576040805162461bcd60e51b815260206004820152600d60248201526c0caf0cac6eae8ca7474c2eae8d609b1b604482015290519081900360640190fd5b604080517f22a051410000000000000000000000000000000000000000000000000000000081526004810186905260248101859052604481018490526064810183905290516001600160a01b038716916322a0514191608480830192600092919082900301818387803b158015610aa557600080fd5b505af1158015610ab9573d6000803e3d6000fd5b505050505050505050565b610aee7f51b355059847d158e68950419dbcd54fad00bdfd0634c2515a5c533288c7f0a233610cc9565b610b2f576040805162461bcd60e51b815260206004820152600d60248201526c0caf0cac6eae8ca7474c2eae8d609b1b604482015290519081900360640190fd5b816001600160a01b031663231f9a04826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156107de57600080fd5b610ba87f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333610cc9565b610bf9576040805162461bcd60e51b815260206004820152600c60248201527f7365744465763a3a617574680000000000000000000000000000000000000000604482015290519081900360640190fd5b816001600160a01b0316639291d563826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015610c4857600080fd5b505af1158015610c5c573d6000803e3d6000fd5b5050604080516001600160a01b038581168252915191861693503392507f4a6c04b230e2bfc4a3583f9336e8acb0358523fac28d6119871f2a23fc0f5945919081900360200190a35050565b6000828152602081905260408120610cc090836114ed565b90505b92915050565b6000828152602081905260408120610cc090836114f9565b600081565b610d107f51b355059847d158e68950419dbcd54fad00bdfd0634c2515a5c533288c7f0a233610cc9565b610d51576040805162461bcd60e51b815260206004820152600d60248201526c0caf0cac6eae8ca7474c2eae8d609b1b604482015290519081900360640190fd5b826001600160a01b031663a24159d383836040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b1580156109a757600080fd5b6000818152602081905260408120610cc39061150e565b610de07f51b355059847d158e68950419dbcd54fad00bdfd0634c2515a5c533288c7f0a233610cc9565b610e21576040805162461bcd60e51b815260206004820152600d60248201526c0caf0cac6eae8ca7474c2eae8d609b1b604482015290519081900360640190fd5b816001600160a01b031663abff1963826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156107de57600080fd5b600082815260208190526040902060020154610e859061082d611417565b6108d25760405162461bcd60e51b81526004018080602001828103825260308152602001806117106030913960400191505060405180910390fd5b610eea7faaeb0e7b67698f8ec0689e359bbe895bc1bc081c58211f57940cf243fc05a21833610cc9565b610f3b576040805162461bcd60e51b815260206004820152601160248201527f7377656570546f6b656e733a3a61757468000000000000000000000000000000604482015290519081900360640190fd5b6000826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610f8a57600080fd5b505afa158015610f9e573d6000803e3d6000fd5b505050506040513d6020811015610fb457600080fd5b5051905081811015610fc4578091505b60008211611019576040805162461bcd60e51b815260206004820152601460248201527f7377656570546f6b656e733a3a62616c616e6365000000000000000000000000604482015290519081900360640190fd5b604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810184905290516001600160a01b0385169163a9059cbb9160448083019260209291908290030181600087803b15801561108157600080fd5b505af1158015611095573d6000803e3d6000fd5b505050506040513d60208110156110ab57600080fd5b50516110fe576040805162461bcd60e51b815260206004820152601c60248201527f7377656570546f6b656e733a3a7472616e73666572206661696c656400000000604482015290519081900360640190fd5b6040805183815290516001600160a01b0385169133917fed679328aebf74ede77ae09efcf36e90244f83643dadac1c2d9f0b21a46f6ab79181900360200190a3505050565b61116d7f51b355059847d158e68950419dbcd54fad00bdfd0634c2515a5c533288c7f0a233610cc9565b6111ae576040805162461bcd60e51b815260206004820152600d60248201526c0caf0cac6eae8ca7474c2eae8d609b1b604482015290519081900360640190fd5b816001600160a01b0316638432e894826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156107de57600080fd5b6112277faaeb0e7b67698f8ec0689e359bbe895bc1bc081c58211f57940cf243fc05a21833610cc9565b611278576040805162461bcd60e51b815260206004820152600f60248201527f7377656570415641583a3a617574680000000000000000000000000000000000604482015290519081900360640190fd5b4781811015611285578091505b600082116112da576040805162461bcd60e51b815260206004820152601260248201527f7377656570415641583a3a62616c616e63650000000000000000000000000000604482015290519081900360640190fd5b604051600090339084908381818185875af1925050503d806000811461131c576040519150601f19603f3d011682016040523d82523d6000602084013e611321565b606091505b509091505060018115151461137d576040805162461bcd60e51b815260206004820152601a60248201527f7377656570415641583a3a7472616e73666572206661696c6564000000000000604482015290519081900360640190fd5b60408051848152905160009133917fed679328aebf74ede77ae09efcf36e90244f83643dadac1c2d9f0b21a46f6ab79181900360200190a3505050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b7f51b355059847d158e68950419dbcd54fad00bdfd0634c2515a5c533288c7f0a281565b6000610cc0836001600160a01b038416611519565b3390565b60008281526020819052604090206114339082611402565b1561087757611440611417565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260208190526040902061149c9082611563565b15610877576114a9611417565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000610cc08383611578565b6000610cc0836001600160a01b0384166115dc565b6000610cc3826115f4565b600061152583836115dc565b61155b57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610cc3565b506000610cc3565b6000610cc0836001600160a01b0384166115f8565b815460009082106115ba5760405162461bcd60e51b81526004018080602001828103825260228152602001806116bf6022913960400191505060405180910390fd5b8260000182815481106115c957fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b600081815260018301602052604081205480156116b4578354600019808301919081019060009087908390811061162b57fe5b906000526020600020015490508087600001848154811061164857fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061167857fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610cc3565b6000915050610cc356fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a264697066735822122084eb6512c61a4689bf14f21c8859c0973cd586da3cb64bcdb4e23f05b47cbee264736f6c63430007030033",
  "deployedBytecode": "0x6080604052600436106101795760003560e01c806391d14854116100cb578063d547741f1161007f578063e912994811610059578063e9129948146105cd578063f72c0d8b146105f7578063fcf0f0d31461060c57610180565b8063d547741f14610520578063dec6603614610559578063e327670f1461059257610180565b8063afb50e8f116100b0578063afb50e8f1461047e578063ca15c873146104bd578063cc68d1ad146104e757610180565b806391d148541461041c578063a217fddf1461046957610180565b806336568abe1161012d5780637f48b947116101075780637f48b9471461035a5780638c9f5f05146103955780639010d07c146103d057610180565b806336568abe14610291578063588ad62c146102ca57806375b7a7f01461030f57610180565b8063165d21c91161015e578063165d21c9146101f3578063248a9ca31461022e5780632f2ff15d1461025857610180565b806310050f471461018557806312980afe146101cc57610180565b3661018057005b600080fd5b34801561019157600080fd5b506101ca600480360360808110156101a857600080fd5b506001600160a01b038135169060208101359060408101359060600135610621565b005b3480156101d857600080fd5b506101e1610700565b60408051918252519081900360200190f35b3480156101ff57600080fd5b506101ca6004803603604081101561021657600080fd5b506001600160a01b0381358116916020013516610724565b34801561023a57600080fd5b506101e16004803603602081101561025157600080fd5b50356107fa565b34801561026457600080fd5b506101ca6004803603604081101561027b57600080fd5b50803590602001356001600160a01b031661080f565b34801561029d57600080fd5b506101ca600480360360408110156102b457600080fd5b50803590602001356001600160a01b031661087b565b3480156102d657600080fd5b506101ca600480360360608110156102ed57600080fd5b506001600160a01b0381358116916020810135821691604090910135166108dc565b34801561031b57600080fd5b506101ca600480360360a081101561033257600080fd5b506001600160a01b0381351690602081013590604081013590606081013590608001356109c4565b34801561036657600080fd5b506101ca6004803603604081101561037d57600080fd5b506001600160a01b0381358116916020013516610ac4565b3480156103a157600080fd5b506101ca600480360360408110156103b857600080fd5b506001600160a01b0381358116916020013516610b7e565b3480156103dc57600080fd5b50610400600480360360408110156103f357600080fd5b5080359060200135610ca8565b604080516001600160a01b039092168252519081900360200190f35b34801561042857600080fd5b506104556004803603604081101561043f57600080fd5b50803590602001356001600160a01b0316610cc9565b604080519115158252519081900360200190f35b34801561047557600080fd5b506101e1610ce1565b34801561048a57600080fd5b506101ca600480360360608110156104a157600080fd5b506001600160a01b038135169060208101359060400135610ce6565b3480156104c957600080fd5b506101e1600480360360208110156104e057600080fd5b5035610d9f565b3480156104f357600080fd5b506101ca6004803603604081101561050a57600080fd5b506001600160a01b038135169060200135610db6565b34801561052c57600080fd5b506101ca6004803603604081101561054357600080fd5b50803590602001356001600160a01b0316610e67565b34801561056557600080fd5b506101ca6004803603604081101561057c57600080fd5b506001600160a01b038135169060200135610ec0565b34801561059e57600080fd5b506101ca600480360360408110156105b557600080fd5b506001600160a01b0381358116916020013516611143565b3480156105d957600080fd5b506101ca600480360360208110156105f057600080fd5b50356111fd565b34801561060357600080fd5b506101e16113ba565b34801561061857600080fd5b506101e16113de565b61064b7f51b355059847d158e68950419dbcd54fad00bdfd0634c2515a5c533288c7f0a233610cc9565b61068c576040805162461bcd60e51b815260206004820152600d60248201526c0caf0cac6eae8ca7474c2eae8d609b1b604482015290519081900360640190fd5b836001600160a01b031663d6ec2a498484846040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050600060405180830381600087803b1580156106e257600080fd5b505af11580156106f6573d6000803e3d6000fd5b5050505050505050565b7faaeb0e7b67698f8ec0689e359bbe895bc1bc081c58211f57940cf243fc05a21881565b61074e7f51b355059847d158e68950419dbcd54fad00bdfd0634c2515a5c533288c7f0a233610cc9565b61078f576040805162461bcd60e51b815260206004820152600d60248201526c0caf0cac6eae8ca7474c2eae8d609b1b604482015290519081900360640190fd5b816001600160a01b031663a4d5e67c826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156107de57600080fd5b505af11580156107f2573d6000803e3d6000fd5b505050505050565b60009081526020819052604090206002015490565b6000828152602081905260409020600201546108329061082d611417565b610cc9565b61086d5760405162461bcd60e51b815260040180806020018281038252602f8152602001806116e1602f913960400191505060405180910390fd5b610877828261141b565b5050565b610883611417565b6001600160a01b0316816001600160a01b0316146108d25760405162461bcd60e51b815260040180806020018281038252602f815260200180611740602f913960400191505060405180910390fd5b6108778282611484565b6109067f51b355059847d158e68950419dbcd54fad00bdfd0634c2515a5c533288c7f0a233610cc9565b610947576040805162461bcd60e51b815260206004820152600d60248201526c0caf0cac6eae8ca7474c2eae8d609b1b604482015290519081900360640190fd5b826001600160a01b03166340b47e1a83836040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b1580156109a757600080fd5b505af11580156109bb573d6000803e3d6000fd5b50505050505050565b6109ee7f51b355059847d158e68950419dbcd54fad00bdfd0634c2515a5c533288c7f0a233610cc9565b610a2f576040805162461bcd60e51b815260206004820152600d60248201526c0caf0cac6eae8ca7474c2eae8d609b1b604482015290519081900360640190fd5b604080517f22a051410000000000000000000000000000000000000000000000000000000081526004810186905260248101859052604481018490526064810183905290516001600160a01b038716916322a0514191608480830192600092919082900301818387803b158015610aa557600080fd5b505af1158015610ab9573d6000803e3d6000fd5b505050505050505050565b610aee7f51b355059847d158e68950419dbcd54fad00bdfd0634c2515a5c533288c7f0a233610cc9565b610b2f576040805162461bcd60e51b815260206004820152600d60248201526c0caf0cac6eae8ca7474c2eae8d609b1b604482015290519081900360640190fd5b816001600160a01b031663231f9a04826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156107de57600080fd5b610ba87f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333610cc9565b610bf9576040805162461bcd60e51b815260206004820152600c60248201527f7365744465763a3a617574680000000000000000000000000000000000000000604482015290519081900360640190fd5b816001600160a01b0316639291d563826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015610c4857600080fd5b505af1158015610c5c573d6000803e3d6000fd5b5050604080516001600160a01b038581168252915191861693503392507f4a6c04b230e2bfc4a3583f9336e8acb0358523fac28d6119871f2a23fc0f5945919081900360200190a35050565b6000828152602081905260408120610cc090836114ed565b90505b92915050565b6000828152602081905260408120610cc090836114f9565b600081565b610d107f51b355059847d158e68950419dbcd54fad00bdfd0634c2515a5c533288c7f0a233610cc9565b610d51576040805162461bcd60e51b815260206004820152600d60248201526c0caf0cac6eae8ca7474c2eae8d609b1b604482015290519081900360640190fd5b826001600160a01b031663a24159d383836040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b1580156109a757600080fd5b6000818152602081905260408120610cc39061150e565b610de07f51b355059847d158e68950419dbcd54fad00bdfd0634c2515a5c533288c7f0a233610cc9565b610e21576040805162461bcd60e51b815260206004820152600d60248201526c0caf0cac6eae8ca7474c2eae8d609b1b604482015290519081900360640190fd5b816001600160a01b031663abff1963826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156107de57600080fd5b600082815260208190526040902060020154610e859061082d611417565b6108d25760405162461bcd60e51b81526004018080602001828103825260308152602001806117106030913960400191505060405180910390fd5b610eea7faaeb0e7b67698f8ec0689e359bbe895bc1bc081c58211f57940cf243fc05a21833610cc9565b610f3b576040805162461bcd60e51b815260206004820152601160248201527f7377656570546f6b656e733a3a61757468000000000000000000000000000000604482015290519081900360640190fd5b6000826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610f8a57600080fd5b505afa158015610f9e573d6000803e3d6000fd5b505050506040513d6020811015610fb457600080fd5b5051905081811015610fc4578091505b60008211611019576040805162461bcd60e51b815260206004820152601460248201527f7377656570546f6b656e733a3a62616c616e6365000000000000000000000000604482015290519081900360640190fd5b604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810184905290516001600160a01b0385169163a9059cbb9160448083019260209291908290030181600087803b15801561108157600080fd5b505af1158015611095573d6000803e3d6000fd5b505050506040513d60208110156110ab57600080fd5b50516110fe576040805162461bcd60e51b815260206004820152601c60248201527f7377656570546f6b656e733a3a7472616e73666572206661696c656400000000604482015290519081900360640190fd5b6040805183815290516001600160a01b0385169133917fed679328aebf74ede77ae09efcf36e90244f83643dadac1c2d9f0b21a46f6ab79181900360200190a3505050565b61116d7f51b355059847d158e68950419dbcd54fad00bdfd0634c2515a5c533288c7f0a233610cc9565b6111ae576040805162461bcd60e51b815260206004820152600d60248201526c0caf0cac6eae8ca7474c2eae8d609b1b604482015290519081900360640190fd5b816001600160a01b0316638432e894826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156107de57600080fd5b6112277faaeb0e7b67698f8ec0689e359bbe895bc1bc081c58211f57940cf243fc05a21833610cc9565b611278576040805162461bcd60e51b815260206004820152600f60248201527f7377656570415641583a3a617574680000000000000000000000000000000000604482015290519081900360640190fd5b4781811015611285578091505b600082116112da576040805162461bcd60e51b815260206004820152601260248201527f7377656570415641583a3a62616c616e63650000000000000000000000000000604482015290519081900360640190fd5b604051600090339084908381818185875af1925050503d806000811461131c576040519150601f19603f3d011682016040523d82523d6000602084013e611321565b606091505b509091505060018115151461137d576040805162461bcd60e51b815260206004820152601a60248201527f7377656570415641583a3a7472616e73666572206661696c6564000000000000604482015290519081900360640190fd5b60408051848152905160009133917fed679328aebf74ede77ae09efcf36e90244f83643dadac1c2d9f0b21a46f6ab79181900360200190a3505050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b7f51b355059847d158e68950419dbcd54fad00bdfd0634c2515a5c533288c7f0a281565b6000610cc0836001600160a01b038416611519565b3390565b60008281526020819052604090206114339082611402565b1561087757611440611417565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260208190526040902061149c9082611563565b15610877576114a9611417565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000610cc08383611578565b6000610cc0836001600160a01b0384166115dc565b6000610cc3826115f4565b600061152583836115dc565b61155b57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610cc3565b506000610cc3565b6000610cc0836001600160a01b0384166115f8565b815460009082106115ba5760405162461bcd60e51b81526004018080602001828103825260228152602001806116bf6022913960400191505060405180910390fd5b8260000182815481106115c957fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b600081815260018301602052604081205480156116b4578354600019808301919081019060009087908390811061162b57fe5b906000526020600020015490508087600001848154811061164857fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061167857fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610cc3565b6000915050610cc356fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a264697066735822122084eb6512c61a4689bf14f21c8859c0973cd586da3cb64bcdb4e23f05b47cbee264736f6c63430007030033",
  "devdoc": {
    "details": "YakFeeCollector may be used as `devAddr` on YakStrategy contracts",
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setDev(address,address)": {
        "details": "Restricted to `UPGRADER_ROLE`",
        "params": {
          "newDevAddr": "new value",
          "strategy": "address"
        }
      },
      "sweepAVAX(uint256)": {
        "details": "Restricted to `TOKEN_SWEEPER_ROLE`",
        "params": {
          "amount": "amount"
        }
      },
      "sweepTokens(address,uint256)": {
        "details": "Restricted to `TOKEN_SWEEPER_ROLE`",
        "params": {
          "tokenAddress": "address",
          "tokenAmount": "amount"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DEV_ROLE()": {
        "notice": "Role to manage strategy for onlyDev modifier"
      },
      "TOKEN_SWEEPER_ROLE()": {
        "notice": "Role to sweep funds from this contract"
      },
      "UPGRADER_ROLE()": {
        "notice": "Role to update `devAddr` on YakStrategy"
      },
      "setDev(address,address)": {
        "notice": "Set new value of `devAddr`"
      },
      "sweepAVAX(uint256)": {
        "notice": "Collect ERC20 from this contract"
      },
      "sweepTokens(address,uint256)": {
        "notice": "Collect ERC20 from this contract"
      }
    },
    "notice": "Role-based fee collector for YakStrategy contracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22406,
        "contract": "contracts/timelocks/YakFeeCollectorV1.sol:YakFeeCollectorV1",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)22402_storage)"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)22402_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)22402_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)24193_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 24192,
            "contract": "contracts/timelocks/YakFeeCollectorV1.sol:YakFeeCollectorV1",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)23928_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)22402_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 22399,
            "contract": "contracts/timelocks/YakFeeCollectorV1.sol:YakFeeCollectorV1",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)24193_storage"
          },
          {
            "astId": 22401,
            "contract": "contracts/timelocks/YakFeeCollectorV1.sol:YakFeeCollectorV1",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)23928_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 23923,
            "contract": "contracts/timelocks/YakFeeCollectorV1.sol:YakFeeCollectorV1",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 23927,
            "contract": "contracts/timelocks/YakFeeCollectorV1.sol:YakFeeCollectorV1",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}