{
  "address": "0x117A18E4f7514Ba89e5a1BDF92E2202EdAeD90E1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_poolContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapPairWAVAXGDL",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapPairToken0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapPairToken1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timelock",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decimalAdjustment0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decimalAdjustment1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minTokensToReinvest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_adminFeeBips",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_devFeeBips",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reinvestRewardBips",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AllowDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "DepositsEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RemoveDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "UpdateDevAddr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateDevFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxTokensToDepositWithoutReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITS_ENABLED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEV_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "allowDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedDepositors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateDeployedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForDepositTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfAllowedDepositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolContract",
      "outputs": [
        {
          "internalType": "contract IGondolaPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "removeDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minReturnAmountAccepted",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "disableDeposits",
          "type": "bool"
        }
      ],
      "name": "rescueDeployedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "contract IGondolaChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "updateDepositsEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTokensToDepositWithoutReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xca09d9069eacccc7cddab43c92c97f8d7146e0745782cea53b6ac4493c47a7e0",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x117A18E4f7514Ba89e5a1BDF92E2202EdAeD90E1",
    "transactionIndex": 0,
    "gasUsed": "4064877",
    "logsBloom": "0x
    "blockHash": "0x024fb201af7635dbf846328cc6c8c7084cc2f0eca32a0799c8c9fe49487213b8",
    "transactionHash": "0xca09d9069eacccc7cddab43c92c97f8d7146e0745782cea53b6ac4493c47a7e0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3887213,
        "transactionHash": "0xca09d9069eacccc7cddab43c92c97f8d7146e0745782cea53b6ac4493c47a7e0",
        "address": "0x117A18E4f7514Ba89e5a1BDF92E2202EdAeD90E1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x024fb201af7635dbf846328cc6c8c7084cc2f0eca32a0799c8c9fe49487213b8"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3887213,
        "transactionHash": "0xca09d9069eacccc7cddab43c92c97f8d7146e0745782cea53b6ac4493c47a7e0",
        "address": "0xbE29D10EBDfBd5A82Eb54D4db4a224c060BDBD96",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000117a18e4f7514ba89e5a1bdf92e2202edaed90e1",
          "0x00000000000000000000000034c8712cc527a8e6834787bd9e3ad4f2537b0f50"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x024fb201af7635dbf846328cc6c8c7084cc2f0eca32a0799c8c9fe49487213b8"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3887213,
        "transactionHash": "0xca09d9069eacccc7cddab43c92c97f8d7146e0745782cea53b6ac4493c47a7e0",
        "address": "0xc7198437980c041c805A1EDcbA50c1Ce5db95118",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000117a18e4f7514ba89e5a1bdf92e2202edaed90e1",
          "0x00000000000000000000000083e4ee7b24ba92b3437f382b0b3c1bfa10445354"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0x024fb201af7635dbf846328cc6c8c7084cc2f0eca32a0799c8c9fe49487213b8"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3887213,
        "transactionHash": "0xca09d9069eacccc7cddab43c92c97f8d7146e0745782cea53b6ac4493c47a7e0",
        "address": "0x4fbf0429599460D327BD5F55625E30E4fC066095",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000117a18e4f7514ba89e5a1bdf92e2202edaed90e1",
          "0x00000000000000000000000083e4ee7b24ba92b3437f382b0b3c1bfa10445354"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0x024fb201af7635dbf846328cc6c8c7084cc2f0eca32a0799c8c9fe49487213b8"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3887213,
        "transactionHash": "0xca09d9069eacccc7cddab43c92c97f8d7146e0745782cea53b6ac4493c47a7e0",
        "address": "0x117A18E4f7514Ba89e5a1BDF92E2202EdAeD90E1",
        "topics": [
          "0x481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 4,
        "blockHash": "0x024fb201af7635dbf846328cc6c8c7084cc2f0eca32a0799c8c9fe49487213b8"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3887213,
        "transactionHash": "0xca09d9069eacccc7cddab43c92c97f8d7146e0745782cea53b6ac4493c47a7e0",
        "address": "0x117A18E4f7514Ba89e5a1BDF92E2202EdAeD90E1",
        "topics": [
          "0x3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000258",
        "logIndex": 5,
        "blockHash": "0x024fb201af7635dbf846328cc6c8c7084cc2f0eca32a0799c8c9fe49487213b8"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3887213,
        "transactionHash": "0xca09d9069eacccc7cddab43c92c97f8d7146e0745782cea53b6ac4493c47a7e0",
        "address": "0x117A18E4f7514Ba89e5a1BDF92E2202EdAeD90E1",
        "topics": [
          "0x2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 6,
        "blockHash": "0x024fb201af7635dbf846328cc6c8c7084cc2f0eca32a0799c8c9fe49487213b8"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3887213,
        "transactionHash": "0xca09d9069eacccc7cddab43c92c97f8d7146e0745782cea53b6ac4493c47a7e0",
        "address": "0x117A18E4f7514Ba89e5a1BDF92E2202EdAeD90E1",
        "topics": [
          "0xe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c8",
        "logIndex": 7,
        "blockHash": "0x024fb201af7635dbf846328cc6c8c7084cc2f0eca32a0799c8c9fe49487213b8"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3887213,
        "transactionHash": "0xca09d9069eacccc7cddab43c92c97f8d7146e0745782cea53b6ac4493c47a7e0",
        "address": "0x117A18E4f7514Ba89e5a1BDF92E2202EdAeD90E1",
        "topics": [
          "0x7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 8,
        "blockHash": "0x024fb201af7635dbf846328cc6c8c7084cc2f0eca32a0799c8c9fe49487213b8"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3887213,
        "transactionHash": "0xca09d9069eacccc7cddab43c92c97f8d7146e0745782cea53b6ac4493c47a7e0",
        "address": "0x117A18E4f7514Ba89e5a1BDF92E2202EdAeD90E1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x0000000000000000000000008d36c5c6947adccd25ef49ea1aac2ceacfff0bd7"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x024fb201af7635dbf846328cc6c8c7084cc2f0eca32a0799c8c9fe49487213b8"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3887213,
        "transactionHash": "0xca09d9069eacccc7cddab43c92c97f8d7146e0745782cea53b6ac4493c47a7e0",
        "address": "0x117A18E4f7514Ba89e5a1BDF92E2202EdAeD90E1",
        "topics": [
          "0xc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 10,
        "blockHash": "0x024fb201af7635dbf846328cc6c8c7084cc2f0eca32a0799c8c9fe49487213b8"
      }
    ],
    "blockNumber": 3887213,
    "cumulativeGasUsed": "4064877",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Yield Yak: Gondola USDT.e-TSD",
    "0xbE29D10EBDfBd5A82Eb54D4db4a224c060BDBD96",
    "0xD606199557c8Ab6F4Cc70bD03FaCc96ca576f142",
    "0x34C8712Cc527a8E6834787Bd9e3AD4F2537B0f50",
    "0x83e4eE7b24bA92b3437F382b0b3C1BFA10445354",
    "0xc5AB0C94Bc88b98f55f4e21C1474F67ab2329CFD",
    "0xe28984e1ee8d431346d32bec9ec800efb643eef4",
    "0x67E395B6ACd948931eeE8F52C7c1Fe537E7f1a7a",
    "0x8d36C5c6947ADCcd25Ef49Ea1aAC2ceACFff0bD7",
    "21",
    "1000000000000",
    "1",
    "1000000000000000000",
    600,
    0,
    200
  ],
  "solcInputHash": "107b0f0a4354a189220fabc254fe2307",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapPairWAVAXGDL\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapPairToken0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapPairToken1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimalAdjustment0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimalAdjustment1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokensToReinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_adminFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reinvestRewardBips\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AllowDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"DepositsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdateDevAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateDevFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTokensToDepositWithoutReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITS_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"allowDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedDepositors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateDeployedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDepositTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForDepositTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfAllowedDepositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolContract\",\"outputs\":[{\"internalType\":\"contract IGondolaPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"removeDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minReturnAmountAccepted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"disableDeposits\",\"type\":\"bool\"}],\"name\":\"rescueDeployedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"contract IGondolaChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"updateDepositsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxTokensToDepositWithoutReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"deposit(uint256)\":{\"params\":{\"amount\":\"Amount of tokens to deposit\"}},\"depositFor(address,uint256)\":{\"details\":\"Must mint receipt tokens to `account`\",\"params\":{\"account\":\"address to receive receipt tokens\",\"amount\":\"deposit tokens\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"Amount of tokens to deposit\",\"deadline\":\"The time at which to expire the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"estimateDeployedBalance()\":{\"returns\":{\"_0\":\"deposit tokens\"}},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"getDepositTokensForShares(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"},\"returns\":{\"_0\":\"deposit tokens\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getSharesForDepositTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens\",\"params\":{\"amount\":\"deposit tokens\"},\"returns\":{\"_0\":\"receipt tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverAVAX(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"removeDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rescueDeployedFunds(uint256,bool)\":{\"params\":{\"disableDeposits\":\"bool\",\"minReturnAmountAccepted\":\"min deposit tokens to receive\"}},\"revokeAllowance(address,address)\":{\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"setAllowances()\":{\"details\":\"Restricted to avoid griefing attacks\"},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAdminFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateDepositsEnabled(bool)\":{\"params\":{\"newValue\":\"bool\"}},\"updateDevAddr(address)\":{\"params\":{\"newValue\":\"address\"}},\"updateDevFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateReinvestReward(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowDepositor(address)\":{\"notice\":\"Add an allowed depositor\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Reward tokens avialable to strategy, including balance\"},\"deposit(uint256)\":{\"notice\":\"Deposit tokens to receive receipt tokens\"},\"depositFor(address,uint256)\":{\"notice\":\"Deposit on behalf of another account\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit using Permit\"},\"estimateDeployedBalance()\":{\"notice\":\"Estimate recoverable balance\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward\"},\"getDepositTokensForShares(uint256)\":{\"notice\":\"Calculate deposit tokens for a given amount of receipt tokens\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getSharesForDepositTokens(uint256)\":{\"notice\":\"Calculate receipt tokens for a given amount of deposit tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"reinvest()\":{\"notice\":\"Reinvest reward tokens into deposit tokens\"},\"removeDepositor(address)\":{\"notice\":\"Remove an allowed depositor\"},\"rescueDeployedFunds(uint256,bool)\":{\"notice\":\"Rescue all available deployed deposit tokens back to Strategy\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"setAllowances()\":{\"notice\":\"Approve tokens for use in Strategy\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"updateAdminFee(uint256)\":{\"notice\":\"Update admin fee\"},\"updateDepositsEnabled(bool)\":{\"notice\":\"Enable/disable deposits\"},\"updateDevAddr(address)\":{\"notice\":\"Update devAddr\"},\"updateDevFee(uint256)\":{\"notice\":\"Update developer fee\"},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"notice\":\"Update reinvest max threshold before a deposit\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest min threshold\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"},\"withdraw(uint256)\":{\"notice\":\"Redeem receipt tokens for deposit tokens\"}},\"notice\":\"StableSwap strategy for Gondola\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/GondolaStrategyForPoolV2.sol\":\"GondolaStrategyForPoolV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/YakERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract YakERC20 {\\n    using SafeMath for uint256;\\n\\n    string public name = \\\"Yield Yak\\\";\\n    string public symbol = \\\"YRT\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n  \\n    mapping (address => mapping (address => uint256)) internal allowances;\\n    mapping (address => uint256) internal balances;\\n\\n    /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// @dev keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != uint256(-1)) {\\n            uint256 newAllowance = spenderAllowance.sub(amount, \\\"transferFrom: transfer amount exceeds allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(address from, address to, uint256 value) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from].sub(value, \\\"_transferTokens: transfer exceeds from balance\\\");\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from].sub(value, \\\"_burn: burn amount exceeds from balance\\\");\\n        totalSupply = totalSupply.sub(value, \\\"_burn: burn amount exceeds total supply\\\");\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(address signer, bytes32 encodeData, uint8 v, bytes32 r, bytes32 s) internal view {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                getDomainSeparator(),\\n                encodeData\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                VERSION_HASH,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\",\"keccak256\":\"0x9d569919319add1e8ee2020ad24e1cba09c67094b58a40f825522d1f7729de64\",\"license\":\"MIT\"},\"contracts/YakStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/Permissioned.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./YakERC20.sol\\\";\\n\\n/**\\n * @notice YakStrategy should be inherited by new strategies\\n */\\nabstract contract YakStrategy is YakERC20, Ownable, Permissioned {\\n    using SafeMath for uint;\\n\\n    uint public totalDeposits;\\n\\n    IERC20 public depositToken;\\n    IERC20 public rewardToken;\\n    address public devAddr;\\n\\n    uint public MIN_TOKENS_TO_REINVEST;\\n    uint public MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST;\\n    bool public DEPOSITS_ENABLED;\\n\\n    uint public REINVEST_REWARD_BIPS;\\n    uint public ADMIN_FEE_BIPS;\\n    uint public DEV_FEE_BIPS;\\n\\n    uint constant internal BIPS_DIVISOR = 10000;\\n    uint constant internal MAX_UINT = uint(-1);\\n\\n    event Deposit(address indexed account, uint amount);\\n    event Withdraw(address indexed account, uint amount);\\n    event Reinvest(uint newTotalDeposits, uint newTotalSupply);\\n    event Recovered(address token, uint amount);\\n    event UpdateAdminFee(uint oldValue, uint newValue);\\n    event UpdateDevFee(uint oldValue, uint newValue);\\n    event UpdateReinvestReward(uint oldValue, uint newValue);\\n    event UpdateMinTokensToReinvest(uint oldValue, uint newValue);\\n    event UpdateMaxTokensToDepositWithoutReinvest(uint oldValue, uint newValue);\\n    event UpdateDevAddr(address oldValue, address newValue);\\n    event DepositsEnabled(bool newValue);\\n\\n    /**\\n     * @notice Throws if called by smart contract\\n     */\\n    modifier onlyEOA() {\\n        require(tx.origin == msg.sender, \\\"YakStrategy::onlyEOA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only called by dev\\n     */\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"YakStrategy::onlyDev\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Approve tokens for use in Strategy\\n     * @dev Should use modifier `onlyOwner` to avoid griefing\\n     */\\n    function setAllowances() public virtual;\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeAllowance(address token, address spender) external onlyOwner {\\n        require(IERC20(token).approve(spender, 0));\\n    }\\n\\n    /**\\n     * @notice Deposit and deploy deposits tokens to the strategy\\n     * @dev Must mint receipt tokens to `msg.sender`\\n     * @param amount deposit tokens\\n     */\\n    function deposit(uint amount) external virtual;\\n\\n    /**\\n    * @notice Deposit using Permit\\n    * @dev Should revert for tokens without Permit\\n    * @param amount Amount of tokens to deposit\\n    * @param deadline The time at which to expire the signature\\n    * @param v The recovery byte of the signature\\n    * @param r Half of the ECDSA signature pair\\n    * @param s Half of the ECDSA signature pair\\n    */\\n    function depositWithPermit(uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external virtual;\\n\\n    /**\\n     * @notice Deposit on behalf of another account\\n     * @dev Must mint receipt tokens to `account`\\n     * @param account address to receive receipt tokens\\n     * @param amount deposit tokens\\n     */\\n    function depositFor(address account, uint amount) external virtual;\\n\\n    /**\\n     * @notice Redeem receipt tokens for deposit tokens\\n     * @param amount receipt tokens\\n     */\\n    function withdraw(uint amount) external virtual;\\n\\n    /**\\n     * @notice Reinvest reward tokens into deposit tokens\\n     */\\n    function reinvest() external virtual;\\n\\n    /**\\n     * @notice Estimate reinvest reward\\n     * @return reward tokens\\n     */\\n    function estimateReinvestReward() external view returns (uint) {\\n        uint unclaimedRewards = checkReward();\\n        if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST) {\\n            return unclaimedRewards.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Reward tokens avialable to strategy, including balance\\n     * @return reward tokens\\n     */\\n    function checkReward() public virtual view returns (uint);\\n\\n    /**\\n     * @notice Estimated deposit token balance deployed by strategy, excluding balance\\n     * @return deposit tokens\\n     */\\n    function estimateDeployedBalance() external virtual view returns (uint);\\n\\n    /**\\n     * @notice Rescue all available deployed deposit tokens back to Strategy\\n     * @param minReturnAmountAccepted min deposit tokens to receive\\n     * @param disableDeposits bool\\n     */\\n    function rescueDeployedFunds(uint minReturnAmountAccepted, bool disableDeposits) external virtual;\\n\\n    /**\\n     * @notice Calculate receipt tokens for a given amount of deposit tokens\\n     * @dev If contract is empty, use 1:1 ratio\\n     * @dev Could return zero shares for very low amounts of deposit tokens\\n     * @param amount deposit tokens\\n     * @return receipt tokens\\n     */\\n    function getSharesForDepositTokens(uint amount) public view returns (uint) {\\n        if (totalSupply.mul(totalDeposits) == 0) {\\n            return amount;\\n        }\\n        return amount.mul(totalSupply).div(totalDeposits);\\n    }\\n\\n    /**\\n     * @notice Calculate deposit tokens for a given amount of receipt tokens\\n     * @param amount receipt tokens\\n     * @return deposit tokens\\n     */\\n    function getDepositTokensForShares(uint amount) public view returns (uint) {\\n        if (totalSupply.mul(totalDeposits) == 0) {\\n            return 0;\\n        }\\n        return amount.mul(totalDeposits).div(totalSupply);\\n    }\\n\\n    /**\\n     * @notice Update reinvest min threshold\\n     * @param newValue threshold\\n     */\\n    function updateMinTokensToReinvest(uint newValue) public onlyOwner {\\n        emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n        MIN_TOKENS_TO_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest max threshold before a deposit\\n     * @param newValue threshold\\n     */\\n    function updateMaxTokensToDepositWithoutReinvest(uint newValue) public onlyOwner {\\n        emit UpdateMaxTokensToDepositWithoutReinvest(MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST, newValue);\\n        MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update developer fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateDevFee(uint newValue) public onlyOwner {\\n        require(newValue.add(ADMIN_FEE_BIPS).add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateDevFee(DEV_FEE_BIPS, newValue);\\n        DEV_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update admin fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateAdminFee(uint newValue) public onlyOwner {\\n        require(newValue.add(DEV_FEE_BIPS).add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateAdminFee(ADMIN_FEE_BIPS, newValue);\\n        ADMIN_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest reward\\n     * @param newValue fee in BIPS\\n     */\\n    function updateReinvestReward(uint newValue) public onlyOwner {\\n        require(newValue.add(ADMIN_FEE_BIPS).add(DEV_FEE_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n        REINVEST_REWARD_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Enable/disable deposits\\n     * @param newValue bool\\n     */\\n    function updateDepositsEnabled(bool newValue) public onlyOwner {\\n        require(DEPOSITS_ENABLED != newValue);\\n        DEPOSITS_ENABLED = newValue;\\n        emit DepositsEnabled(newValue);\\n    }\\n\\n    /**\\n     * @notice Update devAddr\\n     * @param newValue address\\n     */\\n    function updateDevAddr(address newValue) public onlyDev {\\n        emit UpdateDevAddr(devAddr, newValue);\\n        devAddr = newValue;\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param tokenAddress token address\\n     * @param tokenAmount amount to recover\\n     */\\n    function recoverERC20(address tokenAddress, uint tokenAmount) external onlyOwner {\\n        require(tokenAmount > 0);\\n        require(IERC20(tokenAddress).transfer(msg.sender, tokenAmount));\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover AVAX from contract\\n     * @param amount amount\\n     */\\n    function recoverAVAX(uint amount) external onlyOwner {\\n        require(amount > 0);\\n        msg.sender.transfer(amount);\\n        emit Recovered(address(0), amount);\\n    }\\n}\",\"keccak256\":\"0xc8079f3ce38053872c911b875421b2218a1690136a5224e0e4ef7ca20e42f3ae\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x2bac03f58760cfbe9fc44f16681bc9be8be40a99b40462f7d29c13134eb0d61b\",\"license\":\"MIT\"},\"contracts/interfaces/IGondolaChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IGondolaChef {\\n    function gondola() external view returns (address);\\n    function gondolaPerSec() external view returns (uint256);\\n    function totalAllocPoint() external view returns (uint256);\\n    function startAt() external view returns (uint256);\\n\\n    function poolLength() external view returns (uint256);\\n    function add(uint256 _allocPoint, address _lpToken, bool _withUpdate) external;\\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external;\\n    function getMultiplier(uint256 _from, uint256 _to) external view returns (uint256);\\n    function pendingGondola(uint256 _pid, address _user) external view returns (uint256);\\n    function massUpdatePools() external;\\n    function updatePool(uint256 _pid) external;\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n    function emergencyWithdraw(uint256 _pid) external;\\n    function poolInfo(uint pid) external view returns (\\n        address lpToken,\\n        uint allocPoint,\\n        uint lastRewardAt,\\n        uint accGondolaPerShare\\n    );\\n    function userInfo(uint pid, address user) external view returns (\\n        uint256 amount,\\n        uint256 rewardDebt\\n    );\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n}\",\"keccak256\":\"0xad433380f5d73d193fa35ebcfa1fc4055034ba64bd6bddce83c81841e3b80330\",\"license\":\"MIT\"},\"contracts/interfaces/IGondolaPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IGondolaPool {\\n    function withdrawAdminFees() external;\\n    function getA() external view returns (uint256);\\n    function getAPrecise() external view returns (uint256);\\n    function getToken(uint8 index) external view returns (address);\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n    function getDepositTimestamp(address user) external view returns (uint256);\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n    function getVirtualPrice() external view returns (uint256);\\n    function calculateSwap(uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 dx) external view returns (uint256);\\n    function calculateTokenAmount(address account, uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n    function calculateRemoveLiquidity(address account, uint256 amount) external view returns (uint256[] memory);\\n    function calculateRemoveLiquidityOneToken(address account, uint256 tokenAmount, uint8 tokenIndex) external view returns (uint256 availableTokenAmount);\\n    function calculateCurrentWithdrawFee(address user) external view returns (uint256);\\n    function getAdminBalance(uint256 index) external view returns (uint256);\\n\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    \\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n}\",\"keccak256\":\"0xc132db2abae456ae311017a536ef3ad8a8980006cb9d74a18df43082d890c2ba\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n    function token1() external pure returns (address);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function mint(address to) external returns (uint liquidity);\\n    function sync() external;\\n}\\n\",\"keccak256\":\"0xffc66e7958e75c670c60c085052bcbdd23b794477bf483e805d23a6f25e5ca9d\",\"license\":\"MIT\"},\"contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IWAVAX {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function balanceOf(address owner) external view returns (uint); \\n    function withdraw(uint) external;\\n    function approve(address to, uint value) external returns (bool);\\n}\",\"keccak256\":\"0xf32787e609bf7d28e7ea925b3d0f4b48d8f4ebde9a7fa41e3441756394eb393c\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x866de5f57330a3e8cc47fe5ffde51c5693b6e802448a7376881976e8635922e1\",\"license\":\"MIT\"},\"contracts/lib/DexLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../interfaces/IWAVAX.sol\\\";\\n\\nlibrary DexLibrary {\\n    using SafeMath for uint;\\n    bytes private constant zeroBytes = new bytes(0);\\n    IWAVAX private constant WAVAX = IWAVAX(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pair Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(uint amountIn, address fromToken, address toToken, IPair pair) internal returns (uint) {\\n        (address token0,) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1,) = pair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        uint amountOut1 = 0;\\n        uint amountOut2 = getAmountOut(amountIn, reserve0, reserve1);\\n        if (token0 != fromToken) (amountOut1, amountOut2) = (amountOut2, amountOut1);\\n        safeTransfer(fromToken, address(pair), amountIn);\\n        pair.swap(amountOut1, amountOut2, address(this), zeroBytes);\\n        return amountOut2 > amountOut1 ? amountOut2 : amountOut1;\\n    }\\n\\n    function checkSwapPairCompatibility(IPair pair, address tokenA, address tokenB) internal pure returns (bool) {\\n        return (tokenA == pair.token0() || tokenA == pair.token1()) && (tokenB == pair.token0() || tokenB == pair.token1()) && tokenA != tokenB;\\n    }\\n\\n    function estimateConversionThroughPair(uint amountIn, address fromToken, address toToken, IPair swapPair) internal view returns (uint) {\\n        (address token0,) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1,) = swapPair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        return getAmountOut(amountIn, reserve0, reserve1);\\n    }\\n\\n    /**\\n     * @notice Converts reward tokens to deposit tokens\\n     * @dev No price checks enforced\\n     * @param amount reward tokens\\n     * @return deposit tokens\\n     */\\n    function convertRewardTokensToDepositTokens(uint amount, address rewardToken, address depositToken, IPair swapPairToken0, IPair swapPairToken1) internal returns (uint) {\\n        uint amountIn = amount.div(2);\\n        require(amountIn > 0, \\\"DexLibrary::_convertRewardTokensToDepositTokens\\\");\\n\\n        address token0 = IPair(depositToken).token0();\\n        uint amountOutToken0 = amountIn;\\n        if (rewardToken != token0) {\\n            amountOutToken0 = DexLibrary.swap(amountIn, rewardToken, token0, swapPairToken0);\\n        }\\n\\n        address token1 = IPair(depositToken).token1();\\n        uint amountOutToken1 = amountIn;\\n        if (rewardToken != token1) {\\n            amountOutToken1 = DexLibrary.swap(amountIn, rewardToken, token1, swapPairToken1);\\n        }\\n\\n        return DexLibrary.addLiquidity(depositToken, amountOutToken0, amountOutToken1);\\n    }\\n\\n    /**\\n     * @notice Add liquidity directly through a Pair\\n     * @dev Checks adding the max of each token amount\\n     * @param depositToken address\\n     * @param maxAmountIn0 amount token0\\n     * @param maxAmountIn1 amount token1\\n     * @return liquidity tokens\\n     */\\n    function addLiquidity(address depositToken, uint maxAmountIn0, uint maxAmountIn1) internal returns (uint) {\\n        (uint112 reserve0, uint112 reserve1,) = IPair(address(depositToken)).getReserves();\\n        uint amountIn1 = _quoteLiquidityAmountOut(maxAmountIn0, reserve0, reserve1);\\n        if (amountIn1 > maxAmountIn1) {\\n            amountIn1 = maxAmountIn1;\\n            maxAmountIn0 = _quoteLiquidityAmountOut(maxAmountIn1, reserve1, reserve0);\\n        }\\n\\n        safeTransfer(IPair(depositToken).token0(), depositToken, maxAmountIn0);\\n        safeTransfer(IPair(depositToken).token1(), depositToken, amountIn1);\\n        return IPair(depositToken).mint(address(this));\\n    }\\n\\n    /**\\n     * @notice Quote liquidity amount out\\n     * @param amountIn input tokens\\n     * @param reserve0 size of input asset reserve\\n     * @param reserve1 size of output asset reserve\\n     * @return liquidity tokens\\n     */\\n    function _quoteLiquidityAmountOut(uint amountIn, uint reserve0, uint reserve1) private pure returns (uint) {\\n        return amountIn.mul(reserve1).div(reserve0);\\n    }\\n\\n    /**\\n     * @notice Given two tokens, it'll return the tokens in the right order for the tokens pair\\n     * @dev TokenA must be different from TokenB, and both shouldn't be address(0), no validations\\n     * @param tokenA address\\n     * @param tokenB address\\n     * @return sorted tokens\\n     */\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address, address) {\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    }\\n\\n    /**\\n     * @notice Given an input amount of an asset and pair reserves, returns maximum output amount of the other asset\\n     * @dev Assumes swap fee is 0.30%\\n     * @param amountIn input asset\\n     * @param reserveIn size of input asset reserve\\n     * @param reserveOut size of output asset reserve\\n     * @return maximum output amount\\n     */\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint) {\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        return numerator.div(denominator);\\n    }\\n\\n    /**\\n     * @notice Safely transfer using an anonymous ERC20 token\\n     * @dev Requires token to return true on transfer\\n     * @param token address\\n     * @param to recipient address\\n     * @param value amount\\n     */\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        require(IERC20(token).transfer(to, value), \\\"DexLibrary::TRANSFER_FROM_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2b4fa4eb579d1a4dab58d5a1fadc1338e2a8313707b29ec447335b9b8f2b39dc\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0xaf2420e7d0e9aff27728c98c8233e892a464ba7c32045a4f37b128652d012f33\",\"license\":\"MIT\"},\"contracts/lib/Permissioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nabstract contract Permissioned is Ownable {\\n    using SafeMath for uint;\\n\\n    uint public numberOfAllowedDepositors;\\n    mapping(address => bool) public allowedDepositors;\\n\\n    event AllowDepositor(address indexed account);\\n    event RemoveDepositor(address indexed account);\\n\\n    modifier onlyAllowedDeposits() {\\n        if (numberOfAllowedDepositors > 0) {\\n            require(allowedDepositors[msg.sender] == true, \\\"Permissioned::onlyAllowedDeposits, not allowed\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add an allowed depositor\\n     * @param depositor address\\n     */\\n    function allowDepositor(address depositor) external onlyOwner {\\n        require(allowedDepositors[depositor] == false, \\\"Permissioned::allowDepositor\\\");\\n        allowedDepositors[depositor] = true;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors.add(1);\\n        emit AllowDepositor(depositor);\\n    }\\n\\n    /**\\n     * @notice Remove an allowed depositor\\n     * @param depositor address\\n     */\\n    function removeDepositor(address depositor) external onlyOwner {\\n        require(numberOfAllowedDepositors > 0, \\\"Permissioned::removeDepositor, no allowed depositors\\\");\\n        require(allowedDepositors[depositor] == true, \\\"Permissioned::removeDepositor, not allowed\\\");\\n        allowedDepositors[depositor] = false;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors.sub(1);\\n        emit RemoveDepositor(depositor);\\n    }\\n}\",\"keccak256\":\"0xf20805a7ca92edda58e5812cf5cfe20b0f2698bbd8215af57a00e04c27ca7e3f\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"},\"contracts/strategies/GondolaStrategyForPoolV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../YakStrategy.sol\\\";\\nimport \\\"../interfaces/IGondolaChef.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../interfaces/IGondolaPool.sol\\\";\\nimport \\\"../lib/DexLibrary.sol\\\";\\n\\n/**\\n * @notice StableSwap strategy for Gondola\\n */\\ncontract GondolaStrategyForPoolV2 is YakStrategy {\\n  using SafeMath for uint;\\n\\n  IGondolaChef public stakingContract;\\n  IGondolaPool public poolContract;\\n  IPair private swapPairWAVAXGDL;\\n  IPair private swapPairToken0;\\n  IPair private swapPairToken1;\\n\\n  address private constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n  uint public PID;\\n  uint private immutable decimalAdjustment0;\\n  uint private immutable decimalAdjustment1;\\n\\n  constructor(\\n    string memory _name,\\n    address _depositToken, \\n    address _rewardToken, \\n    address _stakingContract,\\n    address _poolContract,\\n    address _swapPairWAVAXGDL,\\n    address _swapPairToken0,\\n    address _swapPairToken1,\\n    address _timelock,\\n    uint _pid,\\n    uint _decimalAdjustment0,\\n    uint _decimalAdjustment1,\\n    uint _minTokensToReinvest,\\n    uint _adminFeeBips,\\n    uint _devFeeBips,\\n    uint _reinvestRewardBips\\n  ) {\\n    name = _name;\\n    depositToken = IPair(_depositToken);\\n    rewardToken = IERC20(_rewardToken);\\n    stakingContract = IGondolaChef(_stakingContract);\\n    poolContract = IGondolaPool(_poolContract);\\n    swapPairWAVAXGDL = IPair(_swapPairWAVAXGDL);\\n    swapPairToken0 = IPair(_swapPairToken0);\\n    swapPairToken1 = IPair(_swapPairToken1);\\n    PID = _pid;\\n    decimalAdjustment0 = _decimalAdjustment0;\\n    decimalAdjustment1 = _decimalAdjustment1;\\n    devAddr = msg.sender;\\n\\n    setAllowances();\\n    updateMinTokensToReinvest(_minTokensToReinvest);\\n    updateAdminFee(_adminFeeBips);\\n    updateDevFee(_devFeeBips);\\n    updateReinvestReward(_reinvestRewardBips);\\n    updateDepositsEnabled(true);\\n    transferOwnership(_timelock);\\n\\n    emit Reinvest(0, 0);\\n  }\\n\\n  /**\\n   * @notice Approve tokens for use in Strategy\\n   * @dev Restricted to avoid griefing attacks\\n   */\\n  function setAllowances() public override onlyOwner {\\n    depositToken.approve(address(stakingContract), MAX_UINT);\\n    IERC20(poolContract.getToken(0)).approve(address(poolContract), MAX_UINT);\\n    IERC20(poolContract.getToken(1)).approve(address(poolContract), MAX_UINT);\\n  }\\n\\n  /**\\n   * @notice Deposit tokens to receive receipt tokens\\n   * @param amount Amount of tokens to deposit\\n   */\\n  function deposit(uint amount) external override {\\n    _deposit(msg.sender, amount);\\n  }\\n\\n  /**\\n   * @notice Deposit using Permit\\n   * @param amount Amount of tokens to deposit\\n   * @param deadline The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function depositWithPermit(uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external override {\\n    depositToken.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n    _deposit(msg.sender, amount);\\n  }\\n\\n  function depositFor(address account, uint amount) external override {\\n      _deposit(account, amount);\\n  }\\n\\n  function _deposit(address account, uint amount) internal {\\n    require(DEPOSITS_ENABLED == true, \\\"GondolaStrategyForPoolV2::_deposit\\\");\\n    if (MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST > 0) {\\n        uint unclaimedRewards = checkReward();\\n        if (unclaimedRewards > MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST) {\\n            _reinvest(unclaimedRewards);\\n        }\\n    }\\n    require(depositToken.transferFrom(msg.sender, address(this), amount));\\n    _stakeDepositTokens(amount);\\n    _mint(account, getSharesForDepositTokens(amount));\\n    totalDeposits = totalDeposits.add(amount);\\n    emit Deposit(account, amount);\\n  }\\n\\n  function withdraw(uint amount) external override {\\n    uint depositTokenAmount = getDepositTokensForShares(amount);\\n    if (depositTokenAmount > 0) {\\n      _withdrawDepositTokens(depositTokenAmount);\\n      require(depositToken.transfer(msg.sender, depositTokenAmount), \\\"GondolaStrategyForPoolV2::withdraw\\\");\\n      _burn(msg.sender, amount);\\n      totalDeposits = totalDeposits.sub(depositTokenAmount);\\n      emit Withdraw(msg.sender, depositTokenAmount);\\n    }\\n  }\\n\\n  function _withdrawDepositTokens(uint amount) private {\\n    require(amount > 0, \\\"GondolaStrategyForPoolV2::_withdrawDepositTokens\\\");\\n    stakingContract.withdraw(PID, amount);\\n  }\\n\\n  function reinvest() external override onlyEOA {\\n    uint unclaimedRewards = checkReward();\\n    require(unclaimedRewards >= MIN_TOKENS_TO_REINVEST, \\\"GondolaStrategyForPoolV2::reinvest\\\");\\n    _reinvest(unclaimedRewards);\\n  }\\n\\n  /**\\n    * @notice Reinvest rewards from staking contract to deposit tokens\\n    * @dev Reverts if the expected amount of tokens are not returned from `stakingContract`\\n    * @param amount deposit tokens to reinvest\\n    */\\n  function _reinvest(uint amount) private {\\n    stakingContract.deposit(PID, 0);\\n\\n    uint devFee = amount.mul(DEV_FEE_BIPS).div(BIPS_DIVISOR);\\n    if (devFee > 0) {\\n      require(rewardToken.transfer(devAddr, devFee), \\\"GondolaStrategyForPoolV2::_reinvest, dev\\\");\\n    }\\n\\n    uint adminFee = amount.mul(ADMIN_FEE_BIPS).div(BIPS_DIVISOR);\\n    if (adminFee > 0) {\\n      require(rewardToken.transfer(owner(), adminFee), \\\"GondolaStrategyForPoolV2::_reinvest, admin\\\");\\n    }\\n\\n    uint reinvestFee = amount.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n    if (reinvestFee > 0) {\\n      require(rewardToken.transfer(msg.sender, reinvestFee), \\\"GondolaStrategyForPoolV2::_reinvest, reward\\\");\\n    }\\n\\n    uint depositTokenAmount = _convertRewardTokensToDepositTokens(\\n      amount.sub(devFee).sub(adminFee).sub(reinvestFee)\\n    );\\n\\n    _stakeDepositTokens(depositTokenAmount);\\n    totalDeposits = totalDeposits.add(depositTokenAmount);\\n\\n    emit Reinvest(totalDeposits, totalSupply);\\n  }\\n    \\n  function _stakeDepositTokens(uint amount) private {\\n    require(amount > 0, \\\"GondolaStrategyForPoolV2::_stakeDepositTokens\\\");\\n    stakingContract.deposit(PID, amount);\\n  }\\n\\n  function checkReward() public override view returns (uint) {\\n    uint pendingReward = stakingContract.pendingGondola(PID, address(this));\\n    uint contractBalance = rewardToken.balanceOf(address(this));\\n    return pendingReward.add(contractBalance);\\n  }\\n\\n  /**\\n    * @notice Converts reward tokens to deposit tokens\\n    * @dev No price checks enabled\\n    * @return deposit tokens received\\n    */\\n  function _convertRewardTokensToDepositTokens(uint amount) private returns (uint) {\\n    require(amount > 0, \\\"GondolaStrategyForPoolV2::_convertRewardTokensToDepositTokens\\\");\\n\\n    uint convertedAmountWAVAX = DexLibrary.swap(\\n      amount,\\n      address(rewardToken), address(WAVAX),\\n      swapPairWAVAXGDL\\n    );\\n\\n    uint[] memory liquidityAmounts = new uint[](2);\\n\\n    // find route for bonus token\\n    if (poolContract.getTokenBalance(0).mul(decimalAdjustment0) < poolContract.getTokenBalance(1).mul(decimalAdjustment1)) {\\n      // convert to 0\\n      liquidityAmounts[0] = DexLibrary.swap(\\n        convertedAmountWAVAX,\\n        address(WAVAX), poolContract.getToken(0),\\n        swapPairToken0\\n      );\\n    }\\n    else {\\n      // convert to 1\\n      liquidityAmounts[1] = DexLibrary.swap(\\n        convertedAmountWAVAX,\\n        address(WAVAX), poolContract.getToken(1),\\n        swapPairToken1\\n      );\\n    }\\n\\n    uint liquidity = poolContract.addLiquidity(liquidityAmounts, 0, block.timestamp);\\n    return liquidity;\\n  }\\n\\n  /**\\n   * @notice Estimate recoverable balance\\n   * @return deposit tokens\\n   */\\n  function estimateDeployedBalance() external override view returns (uint) {\\n    (uint depositBalance, ) = stakingContract.userInfo(PID, address(this));\\n    return depositBalance;\\n  }\\n\\n  function rescueDeployedFunds(uint minReturnAmountAccepted, bool disableDeposits) external override onlyOwner {\\n    uint balanceBefore = depositToken.balanceOf(address(this));\\n    stakingContract.emergencyWithdraw(PID);\\n    uint balanceAfter = depositToken.balanceOf(address(this));\\n    require(balanceAfter.sub(balanceBefore) >= minReturnAmountAccepted, \\\"GondolaStrategyForPoolV2::rescueDeployedFunds\\\");\\n    totalDeposits = balanceAfter;\\n    emit Reinvest(totalDeposits, totalSupply);\\n    if (DEPOSITS_ENABLED == true && disableDeposits == true) {\\n      updateDepositsEnabled(false);\\n    }\\n  }\\n}\",\"keccak256\":\"0xe4ea530cc036cf8c60612e7db47e62f9345acba381a6c7cd7c2a7ee969e17c46\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610100604052600960c0819052685969656c642059616b60b81b60e09081526200002d916000919062000c80565b506040805180820190915260038082526216549560ea1b60209092019182526200005a9160019162000c80565b503480156200006857600080fd5b5060405162004ca238038062004ca283398181016040526102008110156200008f57600080fd5b8101908080516040519392919084640100000000821115620000b057600080fd5b908301906020820185811115620000c657600080fd5b8251640100000000811182820188101715620000e157600080fd5b82525081516020918201929091019080838360005b8381101562000110578181015183820152602001620000f6565b50505050905090810190601f1680156200013e5780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608084015160a085015160c086015160e08701516101008801516101208901516101408a01516101608b01516101808c01516101a08d01516101c08e01516101e0909e01519c9f509a9d50989b979a969995989497939692959194909390926000620001bd62000406565b600680546001600160a01b0319166001600160a01b0383169081179091556040519192509060009060008051602062004c82833981519152908290a3508f600090805190602001906200021292919062000c80565b508e600a60006101000a8154816001600160a01b0302191690836001600160a01b031602179055508d600b60006101000a8154816001600160a01b0302191690836001600160a01b031602179055508c601360006101000a8154816001600160a01b0302191690836001600160a01b031602179055508b601460006101000a8154816001600160a01b0302191690836001600160a01b031602179055508a601560006101000a8154816001600160a01b0302191690836001600160a01b0316021790555089601660006101000a8154816001600160a01b0302191690836001600160a01b0316021790555088601760006101000a8154816001600160a01b0302191690836001600160a01b031602179055508660188190555085608081815250508460a0818152505033600c60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550620003726200040a60201b60201c565b6200037d84620006fd565b6200038883620007a7565b620003938262000897565b6200039e8162000973565b620003aa600162000a4f565b620003b58862000b15565b604080516000808252602082015281517fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234929181900390910190a15050505050505050505050505050505062000d1c565b3390565b6200041462000406565b6001600160a01b03166200042762000c0f565b6001600160a01b03161462000472576040805162461bcd60e51b8152602060048201819052602482015260008051602062004c62833981519152604482015290519081900360640190fd5b600a546013546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b158015620004cd57600080fd5b505af1158015620004e2573d6000803e3d6000fd5b505050506040513d6020811015620004f957600080fd5b50506014546040805162415c3360e91b81526000600482015290516001600160a01b03909216916382b8660091602480820192602092909190829003018186803b1580156200054757600080fd5b505afa1580156200055c573d6000803e3d6000fd5b505050506040513d60208110156200057357600080fd5b50516014546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b158015620005cd57600080fd5b505af1158015620005e2573d6000803e3d6000fd5b505050506040513d6020811015620005f957600080fd5b50506014546040805162415c3360e91b81526001600482015290516001600160a01b03909216916382b8660091602480820192602092909190829003018186803b1580156200064757600080fd5b505afa1580156200065c573d6000803e3d6000fd5b505050506040513d60208110156200067357600080fd5b50516014546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b158015620006cd57600080fd5b505af1158015620006e2573d6000803e3d6000fd5b505050506040513d6020811015620006f957600080fd5b5050565b6200070762000406565b6001600160a01b03166200071a62000c0f565b6001600160a01b03161462000765576040805162461bcd60e51b8152602060048201819052602482015260008051602062004c62833981519152604482015290519081900360640190fd5b600d54604080519182526020820183905280517f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef8499011009281900390910190a1600d55565b620007b162000406565b6001600160a01b0316620007c462000c0f565b6001600160a01b0316146200080f576040805162461bcd60e51b8152602060048201819052602482015260008051602062004c62833981519152604482015290519081900360640190fd5b61271062000849601054620008356012548562000c1e60201b620026531790919060201c565b62000c1e60201b620026531790919060201c565b11156200085557600080fd5b601154604080519182526020820183905280517f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a9281900390910190a1601155565b620008a162000406565b6001600160a01b0316620008b462000c0f565b6001600160a01b031614620008ff576040805162461bcd60e51b8152602060048201819052602482015260008051602062004c62833981519152604482015290519081900360640190fd5b61271062000925601054620008356011548562000c1e60201b620026531790919060201c565b11156200093157600080fd5b601254604080519182526020820183905280517f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d6517261319281900390910190a1601255565b6200097d62000406565b6001600160a01b03166200099062000c0f565b6001600160a01b031614620009db576040805162461bcd60e51b8152602060048201819052602482015260008051602062004c62833981519152604482015290519081900360640190fd5b61271062000a01601254620008356011548562000c1e60201b620026531790919060201c565b111562000a0d57600080fd5b601054604080519182526020820183905280517fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f29281900390910190a1601055565b62000a5962000406565b6001600160a01b031662000a6c62000c0f565b6001600160a01b03161462000ab7576040805162461bcd60e51b8152602060048201819052602482015260008051602062004c62833981519152604482015290519081900360640190fd5b600f5460ff161515811515141562000ace57600080fd5b600f805482151560ff19909116811790915560408051918252517f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e859181900360200190a150565b62000b1f62000406565b6001600160a01b031662000b3262000c0f565b6001600160a01b03161462000b7d576040805162461bcd60e51b8152602060048201819052602482015260008051602062004c62833981519152604482015290519081900360640190fd5b6001600160a01b03811662000bc45760405162461bcd60e51b815260040180806020018281038252602681526020018062004c3c6026913960400191505060405180910390fd5b6006546040516001600160a01b0380841692169060008051602062004c8283398151915290600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b031690565b60008282018381101562000c79576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000cc357805160ff191683800117855562000cf3565b8280016001018555821562000cf3579182015b8281111562000cf357825182559160200191906001019062000cd6565b5062000d0192915062000d05565b5090565b5b8082111562000d01576000815560010162000d06565b60805160a051613efc62000d406000398061348d52508061352e5250613efc6000f3fe608060405234801561001057600080fd5b50600436106103835760003560e01c80638aff733d116101de578063c4b24a461161010f578063dd8ce4d6116100ad578063ee99205c1161007c578063ee99205c1461093c578063f2fde38b14610944578063f7c618c11461096a578063fdb5a03e1461097257610383565b8063dd8ce4d6146108dd578063e21ac825146108fa578063eab89a5a14610917578063ed24911d1461093457610383565b8063d505accf116100e9578063d505accf1461084e578063da09c72c1461089f578063dbd9a4d4146108a7578063dd62ed3e146108af57610383565b8063c4b24a4614610821578063c89039c514610829578063cff1b6ef1461083157610383565b8063a8ae2b7c1161017c578063b52a321f11610156578063b52a321f146107ec578063b6b55f25146107f4578063b9e57b8014610811578063bd079f551461081957610383565b8063a8ae2b7c1461077e578063a9059cbb1461079b578063ac0d31ff146107c757610383565b80639291d563116101b85780639291d5631461072b57806395d89b411461075157806399729ec1146107595780639e4e73181461077657610383565b80638aff733d146106f55780638b73e606146106fd5780638da5cb5b1461072357610383565b80634bebd1e7116102b8578063789139bc116102565780637ecebe00116102305780637ecebe0014610662578063818372301461068857806388d52ef7146106a55780638980f11f146106c957610383565b8063789139bc146106245780637ae267731461062c5780637d8820971461065a57610383565b80635ea682ea116102925780635ea682ea146105e65780635eaec0e4146105ee57806370a08231146105f6578063715018a61461061c57610383565b80634bebd1e7146105845780634e77ace5146105aa5780634ebb7916146105c957610383565b80632e1a7d4d11610325578063313ce567116102ff578063313ce567146105005780633bdc6e721461051e578063483c2ef0146105265780634a970be71461054c57610383565b80632e1a7d4d146104ad5780632f4f21e2146104cc57806330adf81f146104f857610383565b80630f23475d116103615780630f23475d1461045f57806318160ddd1461046757806320606b701461046f57806323b872dd1461047757610383565b806306fdde03146103885780630767711114610405578063095ea7b31461041f575b600080fd5b61039061097a565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103ca5781810151838201526020016103b2565b50505050905090810190601f1680156103f75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61040d610a08565b60408051918252519081900360200190f35b61044b6004803603604081101561043557600080fd5b506001600160a01b038135169060200135610a0e565b604080519115158252519081900360200190f35b61040d610a25565b61040d610ac6565b61040d610acc565b61044b6004803603606081101561048d57600080fd5b506001600160a01b03813581169160208101359091169060400135610af0565b6104ca600480360360208110156104c357600080fd5b5035610bd2565b005b6104ca600480360360408110156104e257600080fd5b506001600160a01b038135169060200135610cfe565b61040d610d08565b610508610d2c565b6040805160ff9092168252519081900360200190f35b61040d610d31565b61044b6004803603602081101561053c57600080fd5b50356001600160a01b0316610d37565b6104ca600480360360a081101561056257600080fd5b5080359060208101359060ff6040820135169060608101359060800135610d4c565b6104ca6004803603602081101561059a57600080fd5b50356001600160a01b0316610e05565b6104ca600480360360208110156105c057600080fd5b50351515610f41565b6104ca600480360360208110156105df57600080fd5b5035611000565b61040d6110dc565b61040d6110e2565b61040d6004803603602081101561060c57600080fd5b50356001600160a01b03166110e8565b6104ca611107565b61040d6111c0565b6104ca6004803603604081101561064257600080fd5b506001600160a01b03813581169160200135166111c6565b61040d6112b5565b61040d6004803603602081101561067857600080fd5b50356001600160a01b03166112bb565b6104ca6004803603602081101561069e57600080fd5b50356112cd565b6106ad611371565b604080516001600160a01b039092168252519081900360200190f35b6104ca600480360360408110156106df57600080fd5b506001600160a01b038135169060200135611380565b61040d6114bb565b6104ca6004803603602081101561071357600080fd5b50356001600160a01b03166114c1565b6106ad611628565b6104ca6004803603602081101561074157600080fd5b50356001600160a01b0316611637565b61039061170d565b6104ca6004803603602081101561076f57600080fd5b5035611767565b61040d61183a565b6104ca6004803603602081101561079457600080fd5b503561185e565b61044b600480360360408110156107b157600080fd5b506001600160a01b03813516906020013561192b565b6104ca600480360360408110156107dd57600080fd5b50803590602001351515611938565b61044b611bc9565b6104ca6004803603602081101561080a57600080fd5b5035611bd2565b61040d611bdf565b61040d611c26565b61040d611c2c565b6106ad611d5b565b6104ca6004803603602081101561084757600080fd5b5035611d6a565b6104ca600480360360e081101561086457600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611e37565b6106ad611f37565b6104ca611f46565b61040d600480360360408110156108c557600080fd5b506001600160a01b0381358116916020013516612220565b61040d600480360360208110156108f357600080fd5b503561224b565b6104ca6004803603602081101561091057600080fd5b503561228a565b61040d6004803603602081101561092d57600080fd5b503561232e565b61040d61236e565b6106ad61247b565b6104ca6004803603602081101561095a57600080fd5b50356001600160a01b031661248a565b6106ad61259a565b6104ca6125a9565b6000805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a005780601f106109d557610100808354040283529160200191610a00565b820191906000526020600020905b8154815290600101906020018083116109e357829003601f168201915b505050505081565b60115481565b6000610a1b3384846126b4565b5060015b92915050565b601354601854604080517f93f1a40b0000000000000000000000000000000000000000000000000000000081526004810192909252306024830152805160009384936001600160a01b03909116926393f1a40b92604480840193829003018186803b158015610a9357600080fd5b505afa158015610aa7573d6000803e3d6000fd5b505050506040513d6040811015610abd57600080fd5b50519150505b90565b60025481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6001600160a01b038316600081815260036020908152604080832033808552925282205491929091908214801590610b2a57506000198114155b15610bbb576000610b56856040518060600160405280602f8152602001613e21602f91398491906127cc565b6001600160a01b0380891660008181526003602090815260408083209489168084529482529182902085905581518581529151949550929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92592918290030190a3505b610bc6868686612863565b50600195945050505050565b6000610bdd8261232e565b90508015610cfa57610bee81612970565b600a546040805163a9059cbb60e01b81523360048201526024810184905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b158015610c4257600080fd5b505af1158015610c56573d6000803e3d6000fd5b505050506040513d6020811015610c6c57600080fd5b5051610ca95760405162461bcd60e51b8152600401808060200182810382526022815260200180613d326022913960400191505060405180910390fd5b610cb33383612a33565b600954610cc09082612b08565b60095560408051828152905133917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a25b5050565b610cfa8282612b4a565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60075481565b60086020526000908152604090205460ff1681565b600a54604080517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018890526064810187905260ff8616608482015260a4810185905260c4810184905290516001600160a01b039092169163d505accf9160e48082019260009290919082900301818387803b158015610ddc57600080fd5b505af1158015610df0573d6000803e3d6000fd5b50505050610dfe3386612b4a565b5050505050565b610e0d612ccf565b6001600160a01b0316610e1e611628565b6001600160a01b031614610e67576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526008602052604090205460ff1615610ed5576040805162461bcd60e51b815260206004820152601c60248201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f7200000000604482015290519081900360640190fd5b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610f0791612653565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b610f49612ccf565b6001600160a01b0316610f5a611628565b6001600160a01b031614610fa3576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b600f5460ff1615158115151415610fb957600080fd5b600f805482151560ff19909116811790915560408051918252517f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e859181900360200190a150565b611008612ccf565b6001600160a01b0316611019611628565b6001600160a01b031614611062576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b6000811161106f57600080fd5b604051339082156108fc029083906000818181858888f1935050505015801561109c573d6000803e3d6000fd5b5060408051600081526020810183905281517f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28929181900390910190a150565b60125481565b60185481565b6001600160a01b0381166000908152600460205260409020545b919050565b61110f612ccf565b6001600160a01b0316611120611628565b6001600160a01b031614611169576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36006805473ffffffffffffffffffffffffffffffffffffffff19169055565b600e5481565b6111ce612ccf565b6001600160a01b03166111df611628565b6001600160a01b031614611228576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b816001600160a01b031663095ea7b38260006040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561128057600080fd5b505af1158015611294573d6000803e3d6000fd5b505050506040513d60208110156112aa57600080fd5b5051610cfa57600080fd5b60095481565b60056020526000908152604090205481565b6112d5612ccf565b6001600160a01b03166112e6611628565b6001600160a01b03161461132f576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b600d54604080519182526020820183905280517f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef8499011009281900390910190a1600d55565b6014546001600160a01b031681565b611388612ccf565b6001600160a01b0316611399611628565b6001600160a01b0316146113e2576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b600081116113ef57600080fd5b6040805163a9059cbb60e01b81523360048201526024810183905290516001600160a01b0384169163a9059cbb9160448083019260209291908290030181600087803b15801561143e57600080fd5b505af1158015611452573d6000803e3d6000fd5b505050506040513d602081101561146857600080fd5b505161147357600080fd5b604080516001600160a01b03841681526020810183905281517f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28929181900390910190a15050565b60105481565b6114c9612ccf565b6001600160a01b03166114da611628565b6001600160a01b031614611523576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b6000600754116115645760405162461bcd60e51b8152600401808060200182810382526034815260200180613c376034913960400191505060405180910390fd5b6001600160a01b03811660009081526008602052604090205460ff1615156001146115c05760405162461bcd60e51b815260040180806020018281038252602a815260200180613ce1602a913960400191505060405180910390fd5b6001600160a01b0381166000908152600860205260409020805460ff191690556007546115ee906001612b08565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b6006546001600160a01b031690565b600c546001600160a01b03163314611696576040805162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79446576000000000000000000000000604482015290519081900360640190fd5b600c54604080516001600160a01b039283168152918316602083015280517fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c009281900390910190a1600c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a005780601f106109d557610100808354040283529160200191610a00565b61176f612ccf565b6001600160a01b0316611780611628565b6001600160a01b0316146117c9576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b6127106117ed6010546117e76011548561265390919063ffffffff16565b90612653565b11156117f857600080fd5b601254604080519182526020820183905280517f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d6517261319281900390910190a1601255565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b611866612ccf565b6001600160a01b0316611877611628565b6001600160a01b0316146118c0576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b6127106118de6012546117e76011548561265390919063ffffffff16565b11156118e957600080fd5b601054604080519182526020820183905280517fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f29281900390910190a1601055565b6000610a1b338484612863565b611940612ccf565b6001600160a01b0316611951611628565b6001600160a01b03161461199a576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b600a54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156119e557600080fd5b505afa1580156119f9573d6000803e3d6000fd5b505050506040513d6020811015611a0f57600080fd5b5051601354601854604080517f5312ea8e0000000000000000000000000000000000000000000000000000000081526004810192909252519293506001600160a01b0390911691635312ea8e9160248082019260009290919082900301818387803b158015611a7d57600080fd5b505af1158015611a91573d6000803e3d6000fd5b5050600a54604080516370a0823160e01b81523060048201529051600094506001600160a01b0390921692506370a08231916024808301926020929190829003018186803b158015611ae257600080fd5b505afa158015611af6573d6000803e3d6000fd5b505050506040513d6020811015611b0c57600080fd5b5051905083611b1b8284612b08565b1015611b585760405162461bcd60e51b815260040180806020018281038252602d815260200180613c0a602d913960400191505060405180910390fd5b600981905560025460408051838152602081019290925280517fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2349281900390910190a1600f5460ff1615156001148015611bb457506001831515145b15611bc357611bc36000610f41565b50505050565b600f5460ff1681565b611bdc3382612b4a565b50565b600080611bea611c2c565b9050600d548110611c1e57611c16612710611c1060105484612cd390919063ffffffff16565b90612d2c565b915050610ac3565b600091505090565b600d5481565b601354601854604080517f3eb1819600000000000000000000000000000000000000000000000000000000815260048101929092523060248301525160009283926001600160a01b0390911691633eb1819691604480820192602092909190829003018186803b158015611c9f57600080fd5b505afa158015611cb3573d6000803e3d6000fd5b505050506040513d6020811015611cc957600080fd5b5051600b54604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611d1c57600080fd5b505afa158015611d30573d6000803e3d6000fd5b505050506040513d6020811015611d4657600080fd5b50519050611d548282612653565b9250505090565b600a546001600160a01b031681565b611d72612ccf565b6001600160a01b0316611d83611628565b6001600160a01b031614611dcc576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b612710611dea6010546117e76012548561265390919063ffffffff16565b1115611df557600080fd5b601154604080519182526020820183905280517f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a9281900390910190a1601155565b42841015611e8c576040805162461bcd60e51b815260206004820152600f60248201527f7065726d69743a3a657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0380881660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938a1660608401526080830189905260a083019390935260c08083018890528151808403909101815260e090920190528051910120611f228882868686612d6e565b611f2d8888886126b4565b5050505050505050565b600c546001600160a01b031681565b611f4e612ccf565b6001600160a01b0316611f5f611628565b6001600160a01b031614611fa8576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b600a546013546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b15801561200257600080fd5b505af1158015612016573d6000803e3d6000fd5b505050506040513d602081101561202c57600080fd5b50506014546040805162415c3360e91b81526000600482015290516001600160a01b03909216916382b8660091602480820192602092909190829003018186803b15801561207957600080fd5b505afa15801561208d573d6000803e3d6000fd5b505050506040513d60208110156120a357600080fd5b50516014546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b1580156120fc57600080fd5b505af1158015612110573d6000803e3d6000fd5b505050506040513d602081101561212657600080fd5b50506014546040805162415c3360e91b81526001600482015290516001600160a01b03909216916382b8660091602480820192602092909190829003018186803b15801561217357600080fd5b505afa158015612187573d6000803e3d6000fd5b505050506040513d602081101561219d57600080fd5b50516014546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b1580156121f657600080fd5b505af115801561220a573d6000803e3d6000fd5b505050506040513d6020811015610cfa57600080fd5b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6000612264600954600254612cd390919063ffffffff16565b61226f575080611102565b610a1f600954611c1060025485612cd390919063ffffffff16565b612292612ccf565b6001600160a01b03166122a3611628565b6001600160a01b0316146122ec576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b600e54604080519182526020820183905280517fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f9281900390910190a1600e55565b6000612347600954600254612cd390919063ffffffff16565b61235357506000611102565b610a1f600254611c1060095485612cd390919063ffffffff16565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b600060405180828054600181600116156101000203166002900480156123f15780601f106123cf5761010080835404028352918201916123f1565b820191906000526020600020905b8154815290600101906020018083116123dd575b505091505060405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b61242a612ea6565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b031681526020019550505050505060405160208183030381529060405280519060200120905090565b6013546001600160a01b031681565b612492612ccf565b6001600160a01b03166124a3611628565b6001600160a01b0316146124ec576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b6001600160a01b0381166125315760405162461bcd60e51b8152600401808060200182810382526026815260200180613be46026913960400191505060405180910390fd5b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600b546001600160a01b031681565b3233146125fd576040805162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79454f41000000000000000000000000604482015290519081900360640190fd5b6000612607611c2c565b9050600d5481101561264a5760405162461bcd60e51b8152600401808060200182810382526022815260200180613c8f6022913960400191505060405180910390fd5b611bdc81612eaa565b6000828201838110156126ad576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b03831661270f576040805162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f206164647265737300000000604482015290519081900360640190fd5b6001600160a01b03821661276a576040805162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f20616464726573730000604482015290519081900360640190fd5b6001600160a01b03808416600081815260036020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000818484111561285b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612820578181015183820152602001612808565b50505050905090810190601f16801561284d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b0382166128a85760405162461bcd60e51b8152600401808060200182810382526034815260200180613dc26034913960400191505060405180910390fd5b6128e5816040518060600160405280602e8152602001613e99602e91396001600160a01b03861660009081526004602052604090205491906127cc565b6001600160a01b0380851660009081526004602052604080822093909355908416815220546129149082612653565b6001600160a01b0380841660008181526004602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081116129af5760405162461bcd60e51b8152600401808060200182810382526030815260200180613cb16030913960400191505060405180910390fd5b601354601854604080517f441a3e70000000000000000000000000000000000000000000000000000000008152600481019290925260248201849052516001600160a01b039092169163441a3e709160448082019260009290919082900301818387803b158015612a1f57600080fd5b505af1158015610dfe573d6000803e3d6000fd5b612a7081604051806060016040528060278152602001613e72602791396001600160a01b03851660009081526004602052604090205491906127cc565b60046000846001600160a01b03166001600160a01b0316815260200190815260200160002081905550612ac081604051806060016040528060278152602001613d0b6027913960025491906127cc565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60006126ad83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f77008152506127cc565b600f5460ff161515600114612b905760405162461bcd60e51b8152600401808060200182810382526022815260200180613e506022913960400191505060405180910390fd5b600e5415612bb9576000612ba2611c2c565b9050600e54811115612bb757612bb781612eaa565b505b600a54604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810184905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b158015612c2c57600080fd5b505af1158015612c40573d6000803e3d6000fd5b505050506040513d6020811015612c5657600080fd5b5051612c6157600080fd5b612c6a8161324b565b612c7c82612c778361224b565b6132e1565b600954612c899082612653565b6009556040805182815290516001600160a01b038416917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a25050565b3390565b600082612ce257506000610a1f565b82820282848281612cef57fe5b04146126ad5760405162461bcd60e51b8152600401808060200182810382526021815260200180613d816021913960400191505060405180910390fd5b60006126ad83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061336c565b6000612d7861236e565b8560405160200180807f190100000000000000000000000000000000000000000000000000000000000081525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050600060018286868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015612e2c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590612e625750866001600160a01b0316816001600160a01b0316145b612e9d5760405162461bcd60e51b8152600401808060200182810382526024815260200180613c6b6024913960400191505060405180910390fd5b50505050505050565b4690565b60135460185460408051631c57762b60e31b8152600481019290925260006024830181905290516001600160a01b039093169263e2bbb15892604480820193929182900301818387803b158015612f0057600080fd5b505af1158015612f14573d6000803e3d6000fd5b505050506000612f35612710611c1060125485612cd390919063ffffffff16565b90508015612ffd57600b54600c546040805163a9059cbb60e01b81526001600160a01b039283166004820152602481018590529051919092169163a9059cbb9160448083019260209291908290030181600087803b158015612f9657600080fd5b505af1158015612faa573d6000803e3d6000fd5b505050506040513d6020811015612fc057600080fd5b5051612ffd5760405162461bcd60e51b8152600401808060200182810382526028815260200180613bbc6028913960400191505060405180910390fd5b600061301a612710611c1060115486612cd390919063ffffffff16565b905080156130e957600b546001600160a01b031663a9059cbb61303b611628565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561308257600080fd5b505af1158015613096573d6000803e3d6000fd5b505050506040513d60208110156130ac57600080fd5b50516130e95760405162461bcd60e51b815260040180806020018281038252602a815260200180613b55602a913960400191505060405180910390fd5b6000613106612710611c1060105487612cd390919063ffffffff16565b905080156131c957600b546040805163a9059cbb60e01b81523360048201526024810184905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b15801561316257600080fd5b505af1158015613176573d6000803e3d6000fd5b505050506040513d602081101561318c57600080fd5b50516131c95760405162461bcd60e51b815260040180806020018281038252602b815260200180613df6602b913960400191505060405180910390fd5b60006131e96131e4836131de86818a8a612b08565b90612b08565b6133d1565b90506131f48161324b565b6009546132019082612653565b600981905560025460408051928352602083019190915280517fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2349281900390910190a15050505050565b6000811161328a5760405162461bcd60e51b815260040180806020018281038252602d815260200180613d54602d913960400191505060405180910390fd5b60135460185460408051631c57762b60e31b8152600481019290925260248201849052516001600160a01b039092169163e2bbb1589160448082019260009290919082900301818387803b158015612a1f57600080fd5b6002546132ee9082612653565b6002556001600160a01b0382166000908152600460205260409020546133149082612653565b6001600160a01b03831660008181526004602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600081836133bb5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612820578181015183820152602001612808565b5060008385816133c757fe5b0495945050505050565b60008082116134115760405162461bcd60e51b815260040180806020018281038252603d815260200180613b7f603d913960400191505060405180910390fd5b600b546015546000916134489185916001600160a01b039081169173b31f66aa3c1e785363f0875a1b74e27b85fd66c791166137f2565b60408051600280825260608083018452939450909160208301908036833701905050601454604080516391ceb3eb60e01b815260016004820152905192935061350e927f0000000000000000000000000000000000000000000000000000000000000000926001600160a01b0316916391ceb3eb916024808301926020929190829003018186803b1580156134dc57600080fd5b505afa1580156134f0573d6000803e3d6000fd5b505050506040513d602081101561350657600080fd5b505190612cd3565b601454604080516391ceb3eb60e01b8152600060048201529051613580927f0000000000000000000000000000000000000000000000000000000000000000926001600160a01b03909116916391ceb3eb91602480820192602092909190829003018186803b1580156134dc57600080fd5b1015613648576014546040805162415c3360e91b815260006004820152905161362a92859273b31f66aa3c1e785363f0875a1b74e27b85fd66c7926001600160a01b03909216916382b8660091602480820192602092909190829003018186803b1580156135ed57600080fd5b505afa158015613601573d6000803e3d6000fd5b505050506040513d602081101561361757600080fd5b50516016546001600160a01b03166137f2565b8160008151811061363757fe5b602002602001018181525050613706565b6014546040805162415c3360e91b81526001600482015290516136ec92859273b31f66aa3c1e785363f0875a1b74e27b85fd66c7926001600160a01b03909216916382b8660091602480820192602092909190829003018186803b1580156136af57600080fd5b505afa1580156136c3573d6000803e3d6000fd5b505050506040513d60208110156136d957600080fd5b50516017546001600160a01b03166137f2565b816001815181106136f957fe5b6020026020010181815250505b6014546040517f4d49e87d000000000000000000000000000000000000000000000000000000008152600060248201819052426044830181905260606004840190815285516064850152855192946001600160a01b031693634d49e87d93879387939092909182916084019060208088019102808383895b8381101561379657818101518382015260200161377e565b50505050905001945050505050602060405180830381600087803b1580156137bd57600080fd5b505af11580156137d1573d6000803e3d6000fd5b505050506040513d60208110156137e757600080fd5b505195945050505050565b6000806137ff8585613a02565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561383e57600080fd5b505afa158015613852573d6000803e3d6000fd5b505050506040513d606081101561386857600080fd5b50805160209091015190925090506001600160a01b038381169088161461388b57905b6000806138b98a856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff16613a33565b9050886001600160a01b0316856001600160a01b0316146138d657905b6138e189888c613a7b565b60408051600080825260208201928390527f022c0d9f00000000000000000000000000000000000000000000000000000000835260248201858152604483018590523060648401819052608060848501908152845160a486018190526001600160a01b038e169663022c0d9f968a968a9691949193919260c486019290918190849084905b8381101561397e578181015183820152602001613966565b50505050905090810190601f1680156139ab5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156139cd57600080fd5b505af11580156139e1573d6000803e3d6000fd5b505050508181116139f257816139f4565b805b9a9950505050505050505050565b600080826001600160a01b0316846001600160a01b031610613a25578284613a28565b83835b915091509250929050565b600080613a42856103e5612cd3565b90506000613a508285612cd3565b90506000613a64836117e7886103e8612cd3565b9050613a708282612d2c565b979650505050505050565b826001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015613ad257600080fd5b505af1158015613ae6573d6000803e3d6000fd5b505050506040513d6020811015613afc57600080fd5b5051613b4f576040805162461bcd60e51b815260206004820181905260248201527f4465784c6962726172793a3a5452414e534645525f46524f4d5f4641494c4544604482015290519081900360640190fd5b50505056fe476f6e646f6c615374726174656779466f72506f6f6c56323a3a5f7265696e766573742c2061646d696e476f6e646f6c615374726174656779466f72506f6f6c56323a3a5f636f6e76657274526577617264546f6b656e73546f4465706f736974546f6b656e73476f6e646f6c615374726174656779466f72506f6f6c56323a3a5f7265696e766573742c206465764f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373476f6e646f6c615374726174656779466f72506f6f6c56323a3a7265736375654465706c6f79656446756e64735065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e6f20616c6c6f776564206465706f7369746f7273417263683a3a76616c69646174655369673a20696e76616c6964207369676e6174757265476f6e646f6c615374726174656779466f72506f6f6c56323a3a7265696e76657374476f6e646f6c615374726174656779466f72506f6f6c56323a3a5f77697468647261774465706f736974546f6b656e735065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e6f7420616c6c6f7765645f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c79476f6e646f6c615374726174656779466f72506f6f6c56323a3a7769746864726177476f6e646f6c615374726174656779466f72506f6f6c56323a3a5f7374616b654465706f736974546f6b656e73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657220746f20746865207a65726f2061646472657373476f6e646f6c615374726174656779466f72506f6f6c56323a3a5f7265696e766573742c207265776172647472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365476f6e646f6c615374726174656779466f72506f6f6c56323a3a5f6465706f7369745f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a2646970667358221220882e5252f457a31afff82fb39cb4b14fe9334781f11d768de26c33b5c5a01a8564736f6c634300070300334f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103835760003560e01c80638aff733d116101de578063c4b24a461161010f578063dd8ce4d6116100ad578063ee99205c1161007c578063ee99205c1461093c578063f2fde38b14610944578063f7c618c11461096a578063fdb5a03e1461097257610383565b8063dd8ce4d6146108dd578063e21ac825146108fa578063eab89a5a14610917578063ed24911d1461093457610383565b8063d505accf116100e9578063d505accf1461084e578063da09c72c1461089f578063dbd9a4d4146108a7578063dd62ed3e146108af57610383565b8063c4b24a4614610821578063c89039c514610829578063cff1b6ef1461083157610383565b8063a8ae2b7c1161017c578063b52a321f11610156578063b52a321f146107ec578063b6b55f25146107f4578063b9e57b8014610811578063bd079f551461081957610383565b8063a8ae2b7c1461077e578063a9059cbb1461079b578063ac0d31ff146107c757610383565b80639291d563116101b85780639291d5631461072b57806395d89b411461075157806399729ec1146107595780639e4e73181461077657610383565b80638aff733d146106f55780638b73e606146106fd5780638da5cb5b1461072357610383565b80634bebd1e7116102b8578063789139bc116102565780637ecebe00116102305780637ecebe0014610662578063818372301461068857806388d52ef7146106a55780638980f11f146106c957610383565b8063789139bc146106245780637ae267731461062c5780637d8820971461065a57610383565b80635ea682ea116102925780635ea682ea146105e65780635eaec0e4146105ee57806370a08231146105f6578063715018a61461061c57610383565b80634bebd1e7146105845780634e77ace5146105aa5780634ebb7916146105c957610383565b80632e1a7d4d11610325578063313ce567116102ff578063313ce567146105005780633bdc6e721461051e578063483c2ef0146105265780634a970be71461054c57610383565b80632e1a7d4d146104ad5780632f4f21e2146104cc57806330adf81f146104f857610383565b80630f23475d116103615780630f23475d1461045f57806318160ddd1461046757806320606b701461046f57806323b872dd1461047757610383565b806306fdde03146103885780630767711114610405578063095ea7b31461041f575b600080fd5b61039061097a565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103ca5781810151838201526020016103b2565b50505050905090810190601f1680156103f75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61040d610a08565b60408051918252519081900360200190f35b61044b6004803603604081101561043557600080fd5b506001600160a01b038135169060200135610a0e565b604080519115158252519081900360200190f35b61040d610a25565b61040d610ac6565b61040d610acc565b61044b6004803603606081101561048d57600080fd5b506001600160a01b03813581169160208101359091169060400135610af0565b6104ca600480360360208110156104c357600080fd5b5035610bd2565b005b6104ca600480360360408110156104e257600080fd5b506001600160a01b038135169060200135610cfe565b61040d610d08565b610508610d2c565b6040805160ff9092168252519081900360200190f35b61040d610d31565b61044b6004803603602081101561053c57600080fd5b50356001600160a01b0316610d37565b6104ca600480360360a081101561056257600080fd5b5080359060208101359060ff6040820135169060608101359060800135610d4c565b6104ca6004803603602081101561059a57600080fd5b50356001600160a01b0316610e05565b6104ca600480360360208110156105c057600080fd5b50351515610f41565b6104ca600480360360208110156105df57600080fd5b5035611000565b61040d6110dc565b61040d6110e2565b61040d6004803603602081101561060c57600080fd5b50356001600160a01b03166110e8565b6104ca611107565b61040d6111c0565b6104ca6004803603604081101561064257600080fd5b506001600160a01b03813581169160200135166111c6565b61040d6112b5565b61040d6004803603602081101561067857600080fd5b50356001600160a01b03166112bb565b6104ca6004803603602081101561069e57600080fd5b50356112cd565b6106ad611371565b604080516001600160a01b039092168252519081900360200190f35b6104ca600480360360408110156106df57600080fd5b506001600160a01b038135169060200135611380565b61040d6114bb565b6104ca6004803603602081101561071357600080fd5b50356001600160a01b03166114c1565b6106ad611628565b6104ca6004803603602081101561074157600080fd5b50356001600160a01b0316611637565b61039061170d565b6104ca6004803603602081101561076f57600080fd5b5035611767565b61040d61183a565b6104ca6004803603602081101561079457600080fd5b503561185e565b61044b600480360360408110156107b157600080fd5b506001600160a01b03813516906020013561192b565b6104ca600480360360408110156107dd57600080fd5b50803590602001351515611938565b61044b611bc9565b6104ca6004803603602081101561080a57600080fd5b5035611bd2565b61040d611bdf565b61040d611c26565b61040d611c2c565b6106ad611d5b565b6104ca6004803603602081101561084757600080fd5b5035611d6a565b6104ca600480360360e081101561086457600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611e37565b6106ad611f37565b6104ca611f46565b61040d600480360360408110156108c557600080fd5b506001600160a01b0381358116916020013516612220565b61040d600480360360208110156108f357600080fd5b503561224b565b6104ca6004803603602081101561091057600080fd5b503561228a565b61040d6004803603602081101561092d57600080fd5b503561232e565b61040d61236e565b6106ad61247b565b6104ca6004803603602081101561095a57600080fd5b50356001600160a01b031661248a565b6106ad61259a565b6104ca6125a9565b6000805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a005780601f106109d557610100808354040283529160200191610a00565b820191906000526020600020905b8154815290600101906020018083116109e357829003601f168201915b505050505081565b60115481565b6000610a1b3384846126b4565b5060015b92915050565b601354601854604080517f93f1a40b0000000000000000000000000000000000000000000000000000000081526004810192909252306024830152805160009384936001600160a01b03909116926393f1a40b92604480840193829003018186803b158015610a9357600080fd5b505afa158015610aa7573d6000803e3d6000fd5b505050506040513d6040811015610abd57600080fd5b50519150505b90565b60025481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6001600160a01b038316600081815260036020908152604080832033808552925282205491929091908214801590610b2a57506000198114155b15610bbb576000610b56856040518060600160405280602f8152602001613e21602f91398491906127cc565b6001600160a01b0380891660008181526003602090815260408083209489168084529482529182902085905581518581529151949550929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92592918290030190a3505b610bc6868686612863565b50600195945050505050565b6000610bdd8261232e565b90508015610cfa57610bee81612970565b600a546040805163a9059cbb60e01b81523360048201526024810184905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b158015610c4257600080fd5b505af1158015610c56573d6000803e3d6000fd5b505050506040513d6020811015610c6c57600080fd5b5051610ca95760405162461bcd60e51b8152600401808060200182810382526022815260200180613d326022913960400191505060405180910390fd5b610cb33383612a33565b600954610cc09082612b08565b60095560408051828152905133917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a25b5050565b610cfa8282612b4a565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60075481565b60086020526000908152604090205460ff1681565b600a54604080517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018890526064810187905260ff8616608482015260a4810185905260c4810184905290516001600160a01b039092169163d505accf9160e48082019260009290919082900301818387803b158015610ddc57600080fd5b505af1158015610df0573d6000803e3d6000fd5b50505050610dfe3386612b4a565b5050505050565b610e0d612ccf565b6001600160a01b0316610e1e611628565b6001600160a01b031614610e67576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526008602052604090205460ff1615610ed5576040805162461bcd60e51b815260206004820152601c60248201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f7200000000604482015290519081900360640190fd5b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610f0791612653565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b610f49612ccf565b6001600160a01b0316610f5a611628565b6001600160a01b031614610fa3576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b600f5460ff1615158115151415610fb957600080fd5b600f805482151560ff19909116811790915560408051918252517f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e859181900360200190a150565b611008612ccf565b6001600160a01b0316611019611628565b6001600160a01b031614611062576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b6000811161106f57600080fd5b604051339082156108fc029083906000818181858888f1935050505015801561109c573d6000803e3d6000fd5b5060408051600081526020810183905281517f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28929181900390910190a150565b60125481565b60185481565b6001600160a01b0381166000908152600460205260409020545b919050565b61110f612ccf565b6001600160a01b0316611120611628565b6001600160a01b031614611169576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36006805473ffffffffffffffffffffffffffffffffffffffff19169055565b600e5481565b6111ce612ccf565b6001600160a01b03166111df611628565b6001600160a01b031614611228576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b816001600160a01b031663095ea7b38260006040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561128057600080fd5b505af1158015611294573d6000803e3d6000fd5b505050506040513d60208110156112aa57600080fd5b5051610cfa57600080fd5b60095481565b60056020526000908152604090205481565b6112d5612ccf565b6001600160a01b03166112e6611628565b6001600160a01b03161461132f576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b600d54604080519182526020820183905280517f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef8499011009281900390910190a1600d55565b6014546001600160a01b031681565b611388612ccf565b6001600160a01b0316611399611628565b6001600160a01b0316146113e2576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b600081116113ef57600080fd5b6040805163a9059cbb60e01b81523360048201526024810183905290516001600160a01b0384169163a9059cbb9160448083019260209291908290030181600087803b15801561143e57600080fd5b505af1158015611452573d6000803e3d6000fd5b505050506040513d602081101561146857600080fd5b505161147357600080fd5b604080516001600160a01b03841681526020810183905281517f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28929181900390910190a15050565b60105481565b6114c9612ccf565b6001600160a01b03166114da611628565b6001600160a01b031614611523576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b6000600754116115645760405162461bcd60e51b8152600401808060200182810382526034815260200180613c376034913960400191505060405180910390fd5b6001600160a01b03811660009081526008602052604090205460ff1615156001146115c05760405162461bcd60e51b815260040180806020018281038252602a815260200180613ce1602a913960400191505060405180910390fd5b6001600160a01b0381166000908152600860205260409020805460ff191690556007546115ee906001612b08565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b6006546001600160a01b031690565b600c546001600160a01b03163314611696576040805162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79446576000000000000000000000000604482015290519081900360640190fd5b600c54604080516001600160a01b039283168152918316602083015280517fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c009281900390910190a1600c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a005780601f106109d557610100808354040283529160200191610a00565b61176f612ccf565b6001600160a01b0316611780611628565b6001600160a01b0316146117c9576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b6127106117ed6010546117e76011548561265390919063ffffffff16565b90612653565b11156117f857600080fd5b601254604080519182526020820183905280517f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d6517261319281900390910190a1601255565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b611866612ccf565b6001600160a01b0316611877611628565b6001600160a01b0316146118c0576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b6127106118de6012546117e76011548561265390919063ffffffff16565b11156118e957600080fd5b601054604080519182526020820183905280517fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f29281900390910190a1601055565b6000610a1b338484612863565b611940612ccf565b6001600160a01b0316611951611628565b6001600160a01b03161461199a576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b600a54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156119e557600080fd5b505afa1580156119f9573d6000803e3d6000fd5b505050506040513d6020811015611a0f57600080fd5b5051601354601854604080517f5312ea8e0000000000000000000000000000000000000000000000000000000081526004810192909252519293506001600160a01b0390911691635312ea8e9160248082019260009290919082900301818387803b158015611a7d57600080fd5b505af1158015611a91573d6000803e3d6000fd5b5050600a54604080516370a0823160e01b81523060048201529051600094506001600160a01b0390921692506370a08231916024808301926020929190829003018186803b158015611ae257600080fd5b505afa158015611af6573d6000803e3d6000fd5b505050506040513d6020811015611b0c57600080fd5b5051905083611b1b8284612b08565b1015611b585760405162461bcd60e51b815260040180806020018281038252602d815260200180613c0a602d913960400191505060405180910390fd5b600981905560025460408051838152602081019290925280517fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2349281900390910190a1600f5460ff1615156001148015611bb457506001831515145b15611bc357611bc36000610f41565b50505050565b600f5460ff1681565b611bdc3382612b4a565b50565b600080611bea611c2c565b9050600d548110611c1e57611c16612710611c1060105484612cd390919063ffffffff16565b90612d2c565b915050610ac3565b600091505090565b600d5481565b601354601854604080517f3eb1819600000000000000000000000000000000000000000000000000000000815260048101929092523060248301525160009283926001600160a01b0390911691633eb1819691604480820192602092909190829003018186803b158015611c9f57600080fd5b505afa158015611cb3573d6000803e3d6000fd5b505050506040513d6020811015611cc957600080fd5b5051600b54604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611d1c57600080fd5b505afa158015611d30573d6000803e3d6000fd5b505050506040513d6020811015611d4657600080fd5b50519050611d548282612653565b9250505090565b600a546001600160a01b031681565b611d72612ccf565b6001600160a01b0316611d83611628565b6001600160a01b031614611dcc576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b612710611dea6010546117e76012548561265390919063ffffffff16565b1115611df557600080fd5b601154604080519182526020820183905280517f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a9281900390910190a1601155565b42841015611e8c576040805162461bcd60e51b815260206004820152600f60248201527f7065726d69743a3a657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0380881660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938a1660608401526080830189905260a083019390935260c08083018890528151808403909101815260e090920190528051910120611f228882868686612d6e565b611f2d8888886126b4565b5050505050505050565b600c546001600160a01b031681565b611f4e612ccf565b6001600160a01b0316611f5f611628565b6001600160a01b031614611fa8576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b600a546013546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b15801561200257600080fd5b505af1158015612016573d6000803e3d6000fd5b505050506040513d602081101561202c57600080fd5b50506014546040805162415c3360e91b81526000600482015290516001600160a01b03909216916382b8660091602480820192602092909190829003018186803b15801561207957600080fd5b505afa15801561208d573d6000803e3d6000fd5b505050506040513d60208110156120a357600080fd5b50516014546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b1580156120fc57600080fd5b505af1158015612110573d6000803e3d6000fd5b505050506040513d602081101561212657600080fd5b50506014546040805162415c3360e91b81526001600482015290516001600160a01b03909216916382b8660091602480820192602092909190829003018186803b15801561217357600080fd5b505afa158015612187573d6000803e3d6000fd5b505050506040513d602081101561219d57600080fd5b50516014546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b1580156121f657600080fd5b505af115801561220a573d6000803e3d6000fd5b505050506040513d6020811015610cfa57600080fd5b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6000612264600954600254612cd390919063ffffffff16565b61226f575080611102565b610a1f600954611c1060025485612cd390919063ffffffff16565b612292612ccf565b6001600160a01b03166122a3611628565b6001600160a01b0316146122ec576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b600e54604080519182526020820183905280517fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f9281900390910190a1600e55565b6000612347600954600254612cd390919063ffffffff16565b61235357506000611102565b610a1f600254611c1060095485612cd390919063ffffffff16565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b600060405180828054600181600116156101000203166002900480156123f15780601f106123cf5761010080835404028352918201916123f1565b820191906000526020600020905b8154815290600101906020018083116123dd575b505091505060405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b61242a612ea6565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b031681526020019550505050505060405160208183030381529060405280519060200120905090565b6013546001600160a01b031681565b612492612ccf565b6001600160a01b03166124a3611628565b6001600160a01b0316146124ec576040805162461bcd60e51b81526020600482018190526024820152600080516020613da2833981519152604482015290519081900360640190fd5b6001600160a01b0381166125315760405162461bcd60e51b8152600401808060200182810382526026815260200180613be46026913960400191505060405180910390fd5b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600b546001600160a01b031681565b3233146125fd576040805162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79454f41000000000000000000000000604482015290519081900360640190fd5b6000612607611c2c565b9050600d5481101561264a5760405162461bcd60e51b8152600401808060200182810382526022815260200180613c8f6022913960400191505060405180910390fd5b611bdc81612eaa565b6000828201838110156126ad576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b03831661270f576040805162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f206164647265737300000000604482015290519081900360640190fd5b6001600160a01b03821661276a576040805162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f20616464726573730000604482015290519081900360640190fd5b6001600160a01b03808416600081815260036020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000818484111561285b5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612820578181015183820152602001612808565b50505050905090810190601f16801561284d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b0382166128a85760405162461bcd60e51b8152600401808060200182810382526034815260200180613dc26034913960400191505060405180910390fd5b6128e5816040518060600160405280602e8152602001613e99602e91396001600160a01b03861660009081526004602052604090205491906127cc565b6001600160a01b0380851660009081526004602052604080822093909355908416815220546129149082612653565b6001600160a01b0380841660008181526004602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081116129af5760405162461bcd60e51b8152600401808060200182810382526030815260200180613cb16030913960400191505060405180910390fd5b601354601854604080517f441a3e70000000000000000000000000000000000000000000000000000000008152600481019290925260248201849052516001600160a01b039092169163441a3e709160448082019260009290919082900301818387803b158015612a1f57600080fd5b505af1158015610dfe573d6000803e3d6000fd5b612a7081604051806060016040528060278152602001613e72602791396001600160a01b03851660009081526004602052604090205491906127cc565b60046000846001600160a01b03166001600160a01b0316815260200190815260200160002081905550612ac081604051806060016040528060278152602001613d0b6027913960025491906127cc565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60006126ad83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f77008152506127cc565b600f5460ff161515600114612b905760405162461bcd60e51b8152600401808060200182810382526022815260200180613e506022913960400191505060405180910390fd5b600e5415612bb9576000612ba2611c2c565b9050600e54811115612bb757612bb781612eaa565b505b600a54604080517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810184905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b158015612c2c57600080fd5b505af1158015612c40573d6000803e3d6000fd5b505050506040513d6020811015612c5657600080fd5b5051612c6157600080fd5b612c6a8161324b565b612c7c82612c778361224b565b6132e1565b600954612c899082612653565b6009556040805182815290516001600160a01b038416917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a25050565b3390565b600082612ce257506000610a1f565b82820282848281612cef57fe5b04146126ad5760405162461bcd60e51b8152600401808060200182810382526021815260200180613d816021913960400191505060405180910390fd5b60006126ad83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061336c565b6000612d7861236e565b8560405160200180807f190100000000000000000000000000000000000000000000000000000000000081525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050600060018286868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015612e2c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590612e625750866001600160a01b0316816001600160a01b0316145b612e9d5760405162461bcd60e51b8152600401808060200182810382526024815260200180613c6b6024913960400191505060405180910390fd5b50505050505050565b4690565b60135460185460408051631c57762b60e31b8152600481019290925260006024830181905290516001600160a01b039093169263e2bbb15892604480820193929182900301818387803b158015612f0057600080fd5b505af1158015612f14573d6000803e3d6000fd5b505050506000612f35612710611c1060125485612cd390919063ffffffff16565b90508015612ffd57600b54600c546040805163a9059cbb60e01b81526001600160a01b039283166004820152602481018590529051919092169163a9059cbb9160448083019260209291908290030181600087803b158015612f9657600080fd5b505af1158015612faa573d6000803e3d6000fd5b505050506040513d6020811015612fc057600080fd5b5051612ffd5760405162461bcd60e51b8152600401808060200182810382526028815260200180613bbc6028913960400191505060405180910390fd5b600061301a612710611c1060115486612cd390919063ffffffff16565b905080156130e957600b546001600160a01b031663a9059cbb61303b611628565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561308257600080fd5b505af1158015613096573d6000803e3d6000fd5b505050506040513d60208110156130ac57600080fd5b50516130e95760405162461bcd60e51b815260040180806020018281038252602a815260200180613b55602a913960400191505060405180910390fd5b6000613106612710611c1060105487612cd390919063ffffffff16565b905080156131c957600b546040805163a9059cbb60e01b81523360048201526024810184905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b15801561316257600080fd5b505af1158015613176573d6000803e3d6000fd5b505050506040513d602081101561318c57600080fd5b50516131c95760405162461bcd60e51b815260040180806020018281038252602b815260200180613df6602b913960400191505060405180910390fd5b60006131e96131e4836131de86818a8a612b08565b90612b08565b6133d1565b90506131f48161324b565b6009546132019082612653565b600981905560025460408051928352602083019190915280517fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2349281900390910190a15050505050565b6000811161328a5760405162461bcd60e51b815260040180806020018281038252602d815260200180613d54602d913960400191505060405180910390fd5b60135460185460408051631c57762b60e31b8152600481019290925260248201849052516001600160a01b039092169163e2bbb1589160448082019260009290919082900301818387803b158015612a1f57600080fd5b6002546132ee9082612653565b6002556001600160a01b0382166000908152600460205260409020546133149082612653565b6001600160a01b03831660008181526004602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600081836133bb5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612820578181015183820152602001612808565b5060008385816133c757fe5b0495945050505050565b60008082116134115760405162461bcd60e51b815260040180806020018281038252603d815260200180613b7f603d913960400191505060405180910390fd5b600b546015546000916134489185916001600160a01b039081169173b31f66aa3c1e785363f0875a1b74e27b85fd66c791166137f2565b60408051600280825260608083018452939450909160208301908036833701905050601454604080516391ceb3eb60e01b815260016004820152905192935061350e927f0000000000000000000000000000000000000000000000000000000000000000926001600160a01b0316916391ceb3eb916024808301926020929190829003018186803b1580156134dc57600080fd5b505afa1580156134f0573d6000803e3d6000fd5b505050506040513d602081101561350657600080fd5b505190612cd3565b601454604080516391ceb3eb60e01b8152600060048201529051613580927f0000000000000000000000000000000000000000000000000000000000000000926001600160a01b03909116916391ceb3eb91602480820192602092909190829003018186803b1580156134dc57600080fd5b1015613648576014546040805162415c3360e91b815260006004820152905161362a92859273b31f66aa3c1e785363f0875a1b74e27b85fd66c7926001600160a01b03909216916382b8660091602480820192602092909190829003018186803b1580156135ed57600080fd5b505afa158015613601573d6000803e3d6000fd5b505050506040513d602081101561361757600080fd5b50516016546001600160a01b03166137f2565b8160008151811061363757fe5b602002602001018181525050613706565b6014546040805162415c3360e91b81526001600482015290516136ec92859273b31f66aa3c1e785363f0875a1b74e27b85fd66c7926001600160a01b03909216916382b8660091602480820192602092909190829003018186803b1580156136af57600080fd5b505afa1580156136c3573d6000803e3d6000fd5b505050506040513d60208110156136d957600080fd5b50516017546001600160a01b03166137f2565b816001815181106136f957fe5b6020026020010181815250505b6014546040517f4d49e87d000000000000000000000000000000000000000000000000000000008152600060248201819052426044830181905260606004840190815285516064850152855192946001600160a01b031693634d49e87d93879387939092909182916084019060208088019102808383895b8381101561379657818101518382015260200161377e565b50505050905001945050505050602060405180830381600087803b1580156137bd57600080fd5b505af11580156137d1573d6000803e3d6000fd5b505050506040513d60208110156137e757600080fd5b505195945050505050565b6000806137ff8585613a02565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561383e57600080fd5b505afa158015613852573d6000803e3d6000fd5b505050506040513d606081101561386857600080fd5b50805160209091015190925090506001600160a01b038381169088161461388b57905b6000806138b98a856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff16613a33565b9050886001600160a01b0316856001600160a01b0316146138d657905b6138e189888c613a7b565b60408051600080825260208201928390527f022c0d9f00000000000000000000000000000000000000000000000000000000835260248201858152604483018590523060648401819052608060848501908152845160a486018190526001600160a01b038e169663022c0d9f968a968a9691949193919260c486019290918190849084905b8381101561397e578181015183820152602001613966565b50505050905090810190601f1680156139ab5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156139cd57600080fd5b505af11580156139e1573d6000803e3d6000fd5b505050508181116139f257816139f4565b805b9a9950505050505050505050565b600080826001600160a01b0316846001600160a01b031610613a25578284613a28565b83835b915091509250929050565b600080613a42856103e5612cd3565b90506000613a508285612cd3565b90506000613a64836117e7886103e8612cd3565b9050613a708282612d2c565b979650505050505050565b826001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015613ad257600080fd5b505af1158015613ae6573d6000803e3d6000fd5b505050506040513d6020811015613afc57600080fd5b5051613b4f576040805162461bcd60e51b815260206004820181905260248201527f4465784c6962726172793a3a5452414e534645525f46524f4d5f4641494c4544604482015290519081900360640190fd5b50505056fe476f6e646f6c615374726174656779466f72506f6f6c56323a3a5f7265696e766573742c2061646d696e476f6e646f6c615374726174656779466f72506f6f6c56323a3a5f636f6e76657274526577617264546f6b656e73546f4465706f736974546f6b656e73476f6e646f6c615374726174656779466f72506f6f6c56323a3a5f7265696e766573742c206465764f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373476f6e646f6c615374726174656779466f72506f6f6c56323a3a7265736375654465706c6f79656446756e64735065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e6f20616c6c6f776564206465706f7369746f7273417263683a3a76616c69646174655369673a20696e76616c6964207369676e6174757265476f6e646f6c615374726174656779466f72506f6f6c56323a3a7265696e76657374476f6e646f6c615374726174656779466f72506f6f6c56323a3a5f77697468647261774465706f736974546f6b656e735065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e6f7420616c6c6f7765645f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c79476f6e646f6c615374726174656779466f72506f6f6c56323a3a7769746864726177476f6e646f6c615374726174656779466f72506f6f6c56323a3a5f7374616b654465706f736974546f6b656e73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657220746f20746865207a65726f2061646472657373476f6e646f6c615374726174656779466f72506f6f6c56323a3a5f7265696e766573742c207265776172647472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365476f6e646f6c615374726174656779466f72506f6f6c56323a3a5f6465706f7369745f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a2646970667358221220882e5252f457a31afff82fb39cb4b14fe9334781f11d768de26c33b5c5a01a8564736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "deposit(uint256)": {
        "params": {
          "amount": "Amount of tokens to deposit"
        }
      },
      "depositFor(address,uint256)": {
        "details": "Must mint receipt tokens to `account`",
        "params": {
          "account": "address to receive receipt tokens",
          "amount": "deposit tokens"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "Amount of tokens to deposit",
          "deadline": "The time at which to expire the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "estimateDeployedBalance()": {
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "getDepositTokensForShares(uint256)": {
        "params": {
          "amount": "receipt tokens"
        },
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getSharesForDepositTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens",
        "params": {
          "amount": "deposit tokens"
        },
        "returns": {
          "_0": "receipt tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverAVAX(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "removeDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rescueDeployedFunds(uint256,bool)": {
        "params": {
          "disableDeposits": "bool",
          "minReturnAmountAccepted": "min deposit tokens to receive"
        }
      },
      "revokeAllowance(address,address)": {
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "setAllowances()": {
        "details": "Restricted to avoid griefing attacks"
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAdminFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateDepositsEnabled(bool)": {
        "params": {
          "newValue": "bool"
        }
      },
      "updateDevAddr(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "updateDevFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateReinvestReward(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "receipt tokens"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowDepositor(address)": {
        "notice": "Add an allowed depositor"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Reward tokens avialable to strategy, including balance"
      },
      "deposit(uint256)": {
        "notice": "Deposit tokens to receive receipt tokens"
      },
      "depositFor(address,uint256)": {
        "notice": "Deposit on behalf of another account"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit using Permit"
      },
      "estimateDeployedBalance()": {
        "notice": "Estimate recoverable balance"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward"
      },
      "getDepositTokensForShares(uint256)": {
        "notice": "Calculate deposit tokens for a given amount of receipt tokens"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getSharesForDepositTokens(uint256)": {
        "notice": "Calculate receipt tokens for a given amount of deposit tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "reinvest()": {
        "notice": "Reinvest reward tokens into deposit tokens"
      },
      "removeDepositor(address)": {
        "notice": "Remove an allowed depositor"
      },
      "rescueDeployedFunds(uint256,bool)": {
        "notice": "Rescue all available deployed deposit tokens back to Strategy"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "setAllowances()": {
        "notice": "Approve tokens for use in Strategy"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "updateAdminFee(uint256)": {
        "notice": "Update admin fee"
      },
      "updateDepositsEnabled(bool)": {
        "notice": "Enable/disable deposits"
      },
      "updateDevAddr(address)": {
        "notice": "Update devAddr"
      },
      "updateDevFee(uint256)": {
        "notice": "Update developer fee"
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "notice": "Update reinvest max threshold before a deposit"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest min threshold"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      },
      "withdraw(uint256)": {
        "notice": "Redeem receipt tokens for deposit tokens"
      }
    },
    "notice": "StableSwap strategy for Gondola",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14792,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 14795,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 14800,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 14806,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 14810,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14826,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 20930,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 21043,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "numberOfAllowedDepositors",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 21047,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "allowedDepositors",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15431,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "totalDeposits",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 15433,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "depositToken",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)18073"
      },
      {
        "astId": 15435,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "rewardToken",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IERC20)18073"
      },
      {
        "astId": 15437,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "devAddr",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 15439,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 15441,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 15443,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "DEPOSITS_ENABLED",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 15445,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 15447,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "ADMIN_FEE_BIPS",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 15449,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "DEV_FEE_BIPS",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 47508,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "stakingContract",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(IGondolaChef)18369"
      },
      {
        "astId": 47510,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "poolContract",
        "offset": 0,
        "slot": "20",
        "type": "t_contract(IGondolaPool)18541"
      },
      {
        "astId": 47512,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "swapPairWAVAXGDL",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(IPair)19120"
      },
      {
        "astId": 47514,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "swapPairToken0",
        "offset": 0,
        "slot": "22",
        "type": "t_contract(IPair)19120"
      },
      {
        "astId": 47516,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "swapPairToken1",
        "offset": 0,
        "slot": "23",
        "type": "t_contract(IPair)19120"
      },
      {
        "astId": 47521,
        "contract": "contracts/strategies/GondolaStrategyForPoolV2.sol:GondolaStrategyForPoolV2",
        "label": "PID",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)18073": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IGondolaChef)18369": {
        "encoding": "inplace",
        "label": "contract IGondolaChef",
        "numberOfBytes": "20"
      },
      "t_contract(IGondolaPool)18541": {
        "encoding": "inplace",
        "label": "contract IGondolaPool",
        "numberOfBytes": "20"
      },
      "t_contract(IPair)19120": {
        "encoding": "inplace",
        "label": "contract IPair",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}