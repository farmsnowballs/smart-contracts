{
  "address": "0x185214FD3696942FBf29Af2983AA7493112777Ae",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenSweeper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_upgrader",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_feeCollector",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_distributionAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_distributionRatios",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Distribution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Paid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sweeper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Sweep",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "payee",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ratioBips",
          "type": "uint256[]"
        }
      ],
      "name": "UpdateDistributions",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISTRIBUTION_UPDATER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_SWEEPER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "distributionAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "distributionRatios",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "contract YakFeeCollectorV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDistributionLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastPaymentEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "sweepTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ratioBips",
          "type": "uint256[]"
        }
      ],
      "name": "updateDistributions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0e8b8fc0e4ce46123a74a44ede127b9a59b25b4e849c1752fdd4732ff47ee3c7",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x185214FD3696942FBf29Af2983AA7493112777Ae",
    "transactionIndex": 1,
    "gasUsed": "1961721",
    "logsBloom": "0x
    "blockHash": "0x32c092136d3d86669ea50f31ac34d5f8a2ef0e80b23c966bde402bcc490a8350",
    "transactionHash": "0x0e8b8fc0e4ce46123a74a44ede127b9a59b25b4e849c1752fdd4732ff47ee3c7",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 6927921,
        "transactionHash": "0x0e8b8fc0e4ce46123a74a44ede127b9a59b25b4e849c1752fdd4732ff47ee3c7",
        "address": "0x185214FD3696942FBf29Af2983AA7493112777Ae",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x32c092136d3d86669ea50f31ac34d5f8a2ef0e80b23c966bde402bcc490a8350"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 6927921,
        "transactionHash": "0x0e8b8fc0e4ce46123a74a44ede127b9a59b25b4e849c1752fdd4732ff47ee3c7",
        "address": "0x185214FD3696942FBf29Af2983AA7493112777Ae",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xaaeb0e7b67698f8ec0689e359bbe895bc1bc081c58211f57940cf243fc05a218",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x32c092136d3d86669ea50f31ac34d5f8a2ef0e80b23c966bde402bcc490a8350"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 6927921,
        "transactionHash": "0x0e8b8fc0e4ce46123a74a44ede127b9a59b25b4e849c1752fdd4732ff47ee3c7",
        "address": "0x185214FD3696942FBf29Af2983AA7493112777Ae",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xf9c7bc305b2216f07fea9b30fbe5cb4fcb3821978373ea5029d87ae8774b9582",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x32c092136d3d86669ea50f31ac34d5f8a2ef0e80b23c966bde402bcc490a8350"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 6927921,
        "transactionHash": "0x0e8b8fc0e4ce46123a74a44ede127b9a59b25b4e849c1752fdd4732ff47ee3c7",
        "address": "0x185214FD3696942FBf29Af2983AA7493112777Ae",
        "topics": [
          "0x4edd0cfa6d0f0c578d77d6449d8b4408d162f7069b58cd63ff5cb3b50123c459"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e4400000000000000000000000073f2ee05e02c972a23222e60bd08ed66dc89d7a50000000000000000000000000cf605484a512d3f3435fed77ab5ddc0525daf5f00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000d050000000000000000000000000000000000000000000000000000000000000d050000000000000000000000000000000000000000000000000000000000000d06",
        "logIndex": 3,
        "blockHash": "0x32c092136d3d86669ea50f31ac34d5f8a2ef0e80b23c966bde402bcc490a8350"
      }
    ],
    "blockNumber": 6927921,
    "cumulativeGasUsed": "2002071",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "0x2D580F9CF2fB2D09BC411532988F2aFdA4E7BefF",
    [
      "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
      "0x73F2EE05E02c972a23222e60Bd08ED66dc89D7a5",
      "0x0cf605484A512d3F3435fed77AB5ddC0525Daf5f"
    ],
    [
      3333,
      3333,
      3334
    ],
    1636804800
  ],
  "solcInputHash": "eef73be0f6dd37dbca84d7c5bc223f2f",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenSweeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_upgrader\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_distributionAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_distributionRatios\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Paid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sweeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sweep\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"payee\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ratioBips\",\"type\":\"uint256[]\"}],\"name\":\"UpdateDistributions\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISTRIBUTION_UPDATER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_SWEEPER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributionAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributionRatios\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"contract YakFeeCollectorV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributionLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPaymentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sweepTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ratioBips\",\"type\":\"uint256[]\"}],\"name\":\"updateDistributions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Includes public function to distribute all WAVAX and AVAX to designated payeesEpochs are used to stagger distributions\",\"kind\":\"dev\",\"methods\":{\"currentBalance()\":{\"returns\":{\"_0\":\"balance\"}},\"currentEpoch()\":{\"returns\":{\"_0\":\"number of current epoch\"}},\"distribute()\":{\"details\":\"Open for anyone to callSweeps available AVAX and WAVAX balances\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"nextEpoch()\":{\"returns\":{\"_0\":\"timestamp of next epoch\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"sweepTokens(address,uint256)\":{\"details\":\"Restricted to `TOKEN_SWEEPER_ROLE`This role is cannot sweep AVAX/WAVAX\",\"params\":{\"tokenAddress\":\"address\",\"tokenAmount\":\"amount\"}},\"updateDistributions(address[],uint256[])\":{\"details\":\"Restricted to `DISTRIBUTION_UPDATER_ROLE`\",\"params\":{\"addresses\":\"payees\",\"ratioBips\":\"payment ratios in bips, must add to 10000 // 100bps = 1%\"}}},\"stateVariables\":{\"WAVAX\":{\"details\":\"WAVAX\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DISTRIBUTION_UPDATER_ROLE()\":{\"notice\":\"Role to update payees and ratio of payments\"},\"TOKEN_SWEEPER_ROLE()\":{\"notice\":\"Role to sweep funds from this contract (excluding AVAX/WAVAX)\"},\"currentBalance()\":{\"notice\":\"Current feeCollector balance in WAVAX+AVAX\"},\"currentEpoch()\":{\"notice\":\"Current distribution epoch\"},\"distribute()\":{\"notice\":\"Distribute AVAX from this contract\"},\"distributionAddresses(uint256)\":{\"notice\":\"Array of payees. Upgradable\"},\"distributionRatios(uint256)\":{\"notice\":\"Array of payment ratios. Denominated in bips. Must sum to 10000 (100%). Upgradable\"},\"epochLength()\":{\"notice\":\"Minimum time between distributions\"},\"feeCollector()\":{\"notice\":\"YakFeeCollectorV1 address\"},\"lastPaymentEpoch()\":{\"notice\":\"Epoch of the last distribution\"},\"nextEpoch()\":{\"notice\":\"When the next distribution is allowed occur\"},\"startTimestamp()\":{\"notice\":\"Start time of the first epoch\"},\"sweepTokens(address,uint256)\":{\"notice\":\"Collect ERC20 from this contract\"},\"updateDistributions(address[],uint256[])\":{\"notice\":\"Change payment distributions\"}},\"notice\":\"YakARC is an Automated Revenue Collector\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YakARC.sol\":\"YakARC\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/YakARC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/AccessControl.sol\\\";\\nimport \\\"./timelocks/YakFeeCollectorV1.sol\\\";\\nimport \\\"./interfaces/IWAVAX.sol\\\";\\n\\n/**\\n * @notice YakARC is an Automated Revenue Collector\\n * @dev Includes public function to distribute all WAVAX and AVAX to designated payees\\n * @dev Epochs are used to stagger distributions\\n */\\ncontract YakARC is AccessControl {\\n    using SafeMath for uint;\\n\\n    /// @notice Role to sweep funds from this contract (excluding AVAX/WAVAX)\\n    bytes32 public constant TOKEN_SWEEPER_ROLE = keccak256(\\\"TOKEN_SWEEPER_ROLE\\\");\\n\\n    /// @notice Role to update payees and ratio of payments\\n    bytes32 public constant DISTRIBUTION_UPDATER_ROLE = keccak256(\\\"DISTRIBUTION_UPDATER_ROLE\\\");\\n    \\n    /// @dev WAVAX\\n    IWAVAX private constant WAVAX = IWAVAX(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n\\n    /// @notice YakFeeCollectorV1 address\\n    YakFeeCollectorV1 public feeCollector;\\n\\n    /// @notice Epoch of the last distribution\\n    uint public lastPaymentEpoch;\\n\\n    /// @notice Start time of the first epoch\\n    uint public immutable startTimestamp;\\n\\n    /// @notice Minimum time between distributions\\n    uint public constant epochLength = 86400; // 24 hours\\n\\n    /// @notice Array of payees. Upgradable\\n    address[] public distributionAddresses;\\n\\n    /// @notice Array of payment ratios. Denominated in bips. Must sum to 10000 (100%). Upgradable\\n    uint[] public distributionRatios;\\n\\n    event Sweep(address indexed sweeper, address token, uint amount);\\n    event Paid(uint indexed epoch, address indexed payee, uint amount);\\n    event Distribution(uint indexed epoch, address indexed by, uint amount);\\n    event UpdateDistributions(address[] payee, uint[] ratioBips);\\n\\n    constructor (\\n        address _manager,\\n        address _tokenSweeper,\\n        address _upgrader,\\n        address payable _feeCollector,\\n        address[] memory _distributionAddresses,\\n        uint[] memory _distributionRatios,\\n        uint _startTimestamp\\n    ) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _manager);\\n        _setupRole(TOKEN_SWEEPER_ROLE, _tokenSweeper);\\n        _setupRole(DISTRIBUTION_UPDATER_ROLE, _upgrader);\\n\\n        feeCollector = YakFeeCollectorV1(_feeCollector);\\n        _updateDistributions(_distributionAddresses, _distributionRatios);\\n        require(_startTimestamp <= block.timestamp, \\\"constructor\\\");\\n        startTimestamp = _startTimestamp;\\n    }\\n\\n    function getDistributionLength() public view returns (uint) {\\n        return distributionAddresses.length;\\n    }\\n\\n    /**\\n     * @notice Current distribution epoch\\n     * @return number of current epoch\\n     */\\n    function currentEpoch() public view returns (uint) {\\n        return block.timestamp.sub(startTimestamp).div(epochLength);\\n    }\\n\\n    /**\\n     * @notice When the next distribution is allowed occur\\n     * @return timestamp of next epoch\\n     */\\n    function nextEpoch() public view returns (uint) {\\n        return startTimestamp.add(lastPaymentEpoch.add(1).mul(epochLength));\\n    }\\n\\n    /**\\n     * @notice Current feeCollector balance in WAVAX+AVAX\\n     * @return balance\\n     */\\n    function currentBalance() external view returns (uint) {\\n        return WAVAX.balanceOf(address(feeCollector)).add(address(feeCollector).balance);\\n    }\\n\\n    function _sweepWAVAX() internal {\\n        uint balance = WAVAX.balanceOf(address(feeCollector));\\n        if (balance > 0) {\\n            feeCollector.sweepTokens(address(WAVAX), balance);\\n        }\\n    }\\n\\n    function _sweepAVAX() internal {\\n        uint balance = address(feeCollector).balance;\\n        if (balance > 0) {\\n            feeCollector.sweepAVAX(balance);\\n        }\\n    }\\n\\n    /**\\n     * @notice Distribute AVAX from this contract\\n     * @dev Open for anyone to call\\n     * @dev Sweeps available AVAX and WAVAX balances\\n     */\\n    function distribute() external {\\n        require(nextEpoch() <= block.timestamp, \\\"distribute::too soon\\\");\\n        _sweepAVAX();\\n        _sweepWAVAX();\\n        WAVAX.withdraw(WAVAX.balanceOf(address(this)));\\n        uint balance = address(this).balance;\\n        uint totalPaid;\\n        for (uint i; i < distributionAddresses.length; i++) {\\n            uint amount = balance.mul(distributionRatios[i]).div(10000);\\n            if (amount > 0) {\\n                totalPaid = totalPaid.add(amount);\\n                (bool success, ) = distributionAddresses[i].call{value: amount}(\\\"\\\");\\n                require(success == true, \\\"distribute::transfer failed\\\");\\n                emit Paid(currentEpoch(), distributionAddresses[i], amount);\\n            }\\n        }\\n        emit Distribution(currentEpoch(), msg.sender, totalPaid);\\n        lastPaymentEpoch = currentEpoch();\\n    }\\n\\n    /**\\n     * @notice Collect ERC20 from this contract\\n     * @dev Restricted to `TOKEN_SWEEPER_ROLE`\\n     * @dev This role is cannot sweep AVAX/WAVAX\\n     * @param tokenAddress address\\n     * @param tokenAmount amount\\n     */\\n    function sweepTokens(address tokenAddress, uint tokenAmount) external {\\n        require(hasRole(TOKEN_SWEEPER_ROLE, msg.sender), \\\"sweepTokens::auth\\\");\\n        require(tokenAddress != address(WAVAX), \\\"sweepTokens::not allowed\\\");\\n        feeCollector.sweepTokens(tokenAddress, tokenAmount);\\n        uint balance = IERC20(tokenAddress).balanceOf(address(this));\\n        if (balance < tokenAmount) {\\n            tokenAmount = balance;\\n        }\\n        require(IERC20(tokenAddress).transfer(msg.sender, tokenAmount), \\\"sweepTokens::transfer failed\\\");\\n        emit Sweep(msg.sender, tokenAddress, tokenAmount);\\n    }\\n\\n    function _updateDistributions(address[] memory addresses, uint[] memory ratioBips) private {\\n        require(addresses.length == ratioBips.length, \\\"_updateDistributions::different lengths\\\");\\n        uint sum;\\n        for (uint i; i < addresses.length; i++) {\\n            sum = sum.add(ratioBips[i]);\\n        }\\n        require(sum == 10000, \\\"_updateDistributions::invalid ratioBips\\\");\\n        distributionAddresses = addresses;\\n        distributionRatios = ratioBips;\\n        emit UpdateDistributions(addresses, ratioBips);\\n    }\\n\\n    /**\\n     * @notice Change payment distributions\\n     * @dev Restricted to `DISTRIBUTION_UPDATER_ROLE`\\n     * @param addresses payees\\n     * @param ratioBips payment ratios in bips, must add to 10000 // 100bps = 1%\\n     */\\n    function updateDistributions(address[] calldata addresses, uint[] calldata ratioBips) external {\\n        require(hasRole(DISTRIBUTION_UPDATER_ROLE, msg.sender), \\\"updateDistributions::auth\\\");\\n        _updateDistributions(addresses, ratioBips);\\n    }\\n\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x8364b4d37c54130fbc7ff1a965806569cab45e5ac91ef06a00f8af9b5de7cc7c\",\"license\":\"MIT\"},\"contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IWAVAX {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function balanceOf(address owner) external view returns (uint); \\n    function withdraw(uint) external;\\n    function approve(address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x915ba7f9b89e7e481bad9d834302345998bebabd6e5b9beb9ba7c73f67f1aaa3\",\"license\":\"MIT\"},\"contracts/lib/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x557221cd8a07e5720add4a60726ca8741aead91f5088918d38842be811ceb7d2\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6c2ca57501dc5f1d71e5a5e39616343b9bd57e363c50c4abbeab13059ce2c0ab\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x866de5f57330a3e8cc47fe5ffde51c5693b6e802448a7376881976e8635922e1\",\"license\":\"MIT\"},\"contracts/lib/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x90359191a81302c58f205187ecd072bcb4ca72357d2f08ce29e5206d808e717f\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"},\"contracts/timelocks/YakFeeCollectorV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../lib/AccessControl.sol\\\";\\n\\ninterface IERC20 {\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function balanceOf(address owner) external view returns (uint);\\n}\\n\\ninterface IStrategy {\\n    function updateDevAddr(address newValue) external;\\n    // Joe\\n    function setExtraRewardSwapPair(address swapPair) external;\\n    // JoeLending\\n    function updateLeverage(uint256 _leverageLevel, uint256 _leverageBips) external;\\n    // Curve\\n    function updateCrvAvaxSwapPair(address swapPair) external;\\n    function updateMaxSwapSlippage(uint256 slippageBips) external;\\n    function removeReward(address rewardToken) external;\\n    function addReward(address rewardToken, address swapPair) external;\\n    // Benqi\\n    function updateLeverage(uint256 _leverageLevel, uint256 _leverageBips, uint256 _redeemLimitSafetyMargin) external;\\n    // Aave\\n    function updateLeverage(uint256 _leverageLevel, uint256 _safetyFactor, uint256 _minMinting, uint256 _leverageBips) external;\\n}\\n\\n/**\\n * @notice Role-based fee collector for YakStrategy contracts\\n * @dev YakFeeCollector may be used as `devAddr` on YakStrategy contracts\\n */\\ncontract YakFeeCollectorV1 is AccessControl {\\n\\n    /// @notice Role to sweep funds from this contract\\n    bytes32 public constant TOKEN_SWEEPER_ROLE = keccak256(\\\"TOKEN_SWEEPER_ROLE\\\");\\n\\n    /// @notice Role to update `devAddr` on YakStrategy\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n\\n    /// @notice Role to manage strategy for onlyDev modifier\\n    bytes32 public constant DEV_ROLE = keccak256(\\\"DEV_ROLE\\\");\\n\\n    event SetDev(address indexed upgrader, address indexed strategy, address newValue);\\n    event Sweep(address indexed sweeper, address indexed token, uint amount);\\n\\n    constructor(\\n        address _manager,\\n        address _tokenSweeper,\\n        address _upgrader,\\n        address _dev\\n    ) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _manager);\\n        _setupRole(TOKEN_SWEEPER_ROLE, _tokenSweeper);\\n        _setupRole(UPGRADER_ROLE, _upgrader);\\n        _setupRole(DEV_ROLE, _dev);\\n    }\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @notice Set new value of `devAddr`\\n     * @dev Restricted to `UPGRADER_ROLE`\\n     * @param strategy address\\n     * @param newDevAddr new value\\n     */\\n    function setDev(address strategy, address newDevAddr) external {\\n        require(hasRole(UPGRADER_ROLE, msg.sender), \\\"setDev::auth\\\");\\n        IStrategy(strategy).updateDevAddr(newDevAddr);\\n        emit SetDev(msg.sender, strategy, newDevAddr);\\n    }\\n\\n    /**\\n     * @notice Collect ERC20 from this contract\\n     * @dev Restricted to `TOKEN_SWEEPER_ROLE`\\n     * @param tokenAddress address\\n     * @param tokenAmount amount\\n     */\\n    function sweepTokens(address tokenAddress, uint tokenAmount) external {\\n        require(hasRole(TOKEN_SWEEPER_ROLE, msg.sender), \\\"sweepTokens::auth\\\");\\n        uint balance = IERC20(tokenAddress).balanceOf(address(this));\\n        if (balance < tokenAmount) {\\n            tokenAmount = balance;\\n        }\\n        require(tokenAmount > 0, \\\"sweepTokens::balance\\\");\\n        require(IERC20(tokenAddress).transfer(msg.sender, tokenAmount), \\\"sweepTokens::transfer failed\\\");\\n        emit Sweep(msg.sender, tokenAddress, tokenAmount);\\n\\n    }\\n\\n    /**\\n     * @notice Collect ERC20 from this contract\\n     * @dev Restricted to `TOKEN_SWEEPER_ROLE`\\n     * @param amount amount\\n     */\\n    function sweepAVAX(uint amount) external {\\n        require(hasRole(TOKEN_SWEEPER_ROLE, msg.sender), \\\"sweepAVAX::auth\\\");\\n        uint balance = address(this).balance;\\n        if (balance < amount) {\\n            amount = balance;\\n        }\\n        require(amount > 0, \\\"sweepAVAX::balance\\\");\\n        (bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n        require(success == true, \\\"sweepAVAX::transfer failed\\\");\\n        emit Sweep(msg.sender, address(0), amount);\\n    }\\n\\n    // DEV functions\\n\\n    function setExtraRewardSwapPair(address strategy, address swapPair) external {\\n        require(hasRole(DEV_ROLE, msg.sender), \\\"execute::auth\\\");\\n        IStrategy(strategy).setExtraRewardSwapPair(swapPair);\\n    }\\n\\n    function updateLeverage(address strategy, uint leverageLevel, uint leverageBips) external {\\n        require(hasRole(DEV_ROLE, msg.sender), \\\"execute::auth\\\");\\n        IStrategy(strategy).updateLeverage(leverageLevel, leverageBips);\\n    }\\n\\n    function updateLeverage(address strategy, uint leverageLevel, uint leverageBips, uint redeemLimitSafetyMargin) external {\\n        require(hasRole(DEV_ROLE, msg.sender), \\\"execute::auth\\\");\\n        IStrategy(strategy).updateLeverage(leverageLevel, leverageBips, redeemLimitSafetyMargin);\\n    }\\n\\n    function updateLeverage(address strategy, uint leverageLevel, uint safetyFactor, uint minMinting, uint leverageBips) external {\\n        require(hasRole(DEV_ROLE, msg.sender), \\\"execute::auth\\\");\\n        IStrategy(strategy).updateLeverage(leverageLevel, safetyFactor, minMinting, leverageBips);\\n    }\\n\\n    function updateCrvAvaxSwapPair(address strategy, address swapPair) external {\\n        require(hasRole(DEV_ROLE, msg.sender), \\\"execute::auth\\\");\\n        IStrategy(strategy).updateCrvAvaxSwapPair(swapPair);\\n    }\\n\\n    function updateMaxSwapSlippage(address strategy, uint256 slippageBips) external {\\n        require(hasRole(DEV_ROLE, msg.sender), \\\"execute::auth\\\");\\n        IStrategy(strategy).updateMaxSwapSlippage(slippageBips);\\n    }\\n\\n    function removeReward(address strategy, address rewardToken) external {\\n        require(hasRole(DEV_ROLE, msg.sender), \\\"execute::auth\\\");\\n        IStrategy(strategy).removeReward(rewardToken);\\n    }\\n\\n    function addReward(address strategy, address rewardToken, address swapPair) external {\\n        require(hasRole(DEV_ROLE, msg.sender), \\\"execute::auth\\\");\\n        IStrategy(strategy).addReward(rewardToken, swapPair);\\n\\n    }\\n}\",\"keccak256\":\"0xaa167a53b93d181bbcb1c330aac13abebd7c6d59e910d6c8fc7cc6cdb30db4cf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101845760003560e01c8063a217fddf116100d6578063d547741f1161007f578063e4fc6b6d11610059578063e4fc6b6d14610540578063e6fd48bc14610555578063e7f77bc51461056a5761018b565b8063d547741f146104b9578063dec66036146104f2578063e1d0a9861461052b5761018b565b8063c415b95c116100b0578063c415b95c14610465578063ca15c8731461047a578063ce845d1d146104a45761018b565b8063a217fddf14610411578063aea0e78b14610426578063c0a21d321461043b5761018b565b806362f72e101161013857806391d148541161011257806391d14854146102e05780639d8ddc7e1461032d5780639f1915a8146103425761018b565b806362f72e101461026a578063766718081461027f5780639010d07c146102945761018b565b80632f2ff15d116101695780632f2ff15d146101e157806336568abe1461021c57806357d775f8146102555761018b565b806312980afe14610190578063248a9ca3146101b75761018b565b3661018b57005b600080fd5b34801561019c57600080fd5b506101a5610594565b60408051918252519081900360200190f35b3480156101c357600080fd5b506101a5600480360360208110156101da57600080fd5b50356105b8565b3480156101ed57600080fd5b5061021a6004803603604081101561020457600080fd5b50803590602001356001600160a01b03166105cd565b005b34801561022857600080fd5b5061021a6004803603604081101561023f57600080fd5b50803590602001356001600160a01b0316610639565b34801561026157600080fd5b506101a561069a565b34801561027657600080fd5b506101a56106a1565b34801561028b57600080fd5b506101a56106a7565b3480156102a057600080fd5b506102c4600480360360408110156102b757600080fd5b50803590602001356106e5565b604080516001600160a01b039092168252519081900360200190f35b3480156102ec57600080fd5b506103196004803603604081101561030357600080fd5b50803590602001356001600160a01b0316610706565b604080519115158252519081900360200190f35b34801561033957600080fd5b506101a561071e565b34801561034e57600080fd5b5061021a6004803603604081101561036557600080fd5b81019060208101813564010000000081111561038057600080fd5b82018360208201111561039257600080fd5b803590602001918460208302840111640100000000831117156103b457600080fd5b9193909290916020810190356401000000008111156103d257600080fd5b8201836020820111156103e457600080fd5b8035906020019184602083028401116401000000008311171561040657600080fd5b509092509050610724565b34801561041d57600080fd5b506101a5610812565b34801561043257600080fd5b506101a5610817565b34801561044757600080fd5b506102c46004803603602081101561045e57600080fd5b5035610866565b34801561047157600080fd5b506102c461088d565b34801561048657600080fd5b506101a56004803603602081101561049d57600080fd5b503561089c565b3480156104b057600080fd5b506101a56108b3565b3480156104c557600080fd5b5061021a600480360360408110156104dc57600080fd5b50803590602001356001600160a01b031661094e565b3480156104fe57600080fd5b5061021a6004803603604081101561051557600080fd5b506001600160a01b0381351690602001356109a7565b34801561053757600080fd5b506101a5610cb7565b34801561054c57600080fd5b5061021a610cdb565b34801561056157600080fd5b506101a561100b565b34801561057657600080fd5b506101a56004803603602081101561058d57600080fd5b503561102f565b7faaeb0e7b67698f8ec0689e359bbe895bc1bc081c58211f57940cf243fc05a21881565b60009081526020819052604090206002015490565b6000828152602081905260409020600201546105f0906105eb6110bc565b610706565b61062b5760405162461bcd60e51b815260040180806020018281038252602f815260200180611963602f913960400191505060405180910390fd5b61063582826110c0565b5050565b6106416110bc565b6001600160a01b0316816001600160a01b0316146106905760405162461bcd60e51b815260040180806020018281038252602f815260200180611a31602f913960400191505060405180910390fd5b6106358282611129565b6201518081565b60025481565b60006106e0620151806106da427f0000000000000000000000000000000000000000000000000000000000000000611192565b906111d4565b905090565b60008281526020819052604081206106fd9083611216565b90505b92915050565b60008281526020819052604081206106fd9083611222565b60035490565b61074e7ff9c7bc305b2216f07fea9b30fbe5cb4fcb3821978373ea5029d87ae8774b958233610706565b61079f576040805162461bcd60e51b815260206004820152601960248201527f757064617465446973747269627574696f6e733a3a6175746800000000000000604482015290519081900360640190fd5b61080c8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080880282810182019093528782529093508792508691829185019084908082843760009201919091525061123792505050565b50505050565b600081565b60006106e061083f62015180610839600160025461104d90919063ffffffff16565b906113dd565b7f00000000000000000000000000000000000000000000000000000000000000009061104d565b6003818154811061087357fe5b6000918252602090912001546001600160a01b0316905081565b6001546001600160a01b031681565b600081815260208190526040812061070090611436565b600154604080516370a0823160e01b81526001600160a01b039092166004830181905290516000926106e092319173b31f66aa3c1e785363f0875a1b74e27b85fd66c7916370a08231916024808301926020929190829003018186803b15801561091c57600080fd5b505afa158015610930573d6000803e3d6000fd5b505050506040513d602081101561094657600080fd5b50519061104d565b60008281526020819052604090206002015461096c906105eb6110bc565b6106905760405162461bcd60e51b81526004018080602001828103825260308152602001806119926030913960400191505060405180910390fd5b6109d17faaeb0e7b67698f8ec0689e359bbe895bc1bc081c58211f57940cf243fc05a21833610706565b610a22576040805162461bcd60e51b815260206004820152601160248201527f7377656570546f6b656e733a3a61757468000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03821673b31f66aa3c1e785363f0875a1b74e27b85fd66c71415610a94576040805162461bcd60e51b815260206004820152601860248201527f7377656570546f6b656e733a3a6e6f7420616c6c6f7765640000000000000000604482015290519081900360640190fd5b60015460408051636f63301b60e11b81526001600160a01b038581166004830152602482018590529151919092169163dec6603691604480830192600092919082900301818387803b158015610ae957600080fd5b505af1158015610afd573d6000803e3d6000fd5b505050506000826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610b5057600080fd5b505afa158015610b64573d6000803e3d6000fd5b505050506040513d6020811015610b7a57600080fd5b5051905081811015610b8a578091505b604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810184905290516001600160a01b0385169163a9059cbb9160448083019260209291908290030181600087803b158015610bf257600080fd5b505af1158015610c06573d6000803e3d6000fd5b505050506040513d6020811015610c1c57600080fd5b5051610c6f576040805162461bcd60e51b815260206004820152601c60248201527f7377656570546f6b656e733a3a7472616e73666572206661696c656400000000604482015290519081900360640190fd5b604080516001600160a01b038516815260208101849052815133927fed679328aebf74ede77ae09efcf36e90244f83643dadac1c2d9f0b21a46f6ab7928290030190a2505050565b7ff9c7bc305b2216f07fea9b30fbe5cb4fcb3821978373ea5029d87ae8774b958281565b42610ce4610817565b1115610d37576040805162461bcd60e51b815260206004820152601460248201527f646973747269627574653a3a746f6f20736f6f6e000000000000000000000000604482015290519081900360640190fd5b610d3f611441565b610d476114d6565b604080516370a0823160e01b8152306004820152905173b31f66aa3c1e785363f0875a1b74e27b85fd66c791632e1a7d4d9183916370a08231916024808301926020929190829003018186803b158015610da057600080fd5b505afa158015610db4573d6000803e3d6000fd5b505050506040513d6020811015610dca57600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b168152600481019290925251602480830192600092919082900301818387803b158015610e2257600080fd5b505af1158015610e36573d6000803e3d6000fd5b5050505060004790506000805b600354811015610fbf576000610e7f6127106106da60048581548110610e6557fe5b9060005260206000200154876113dd90919063ffffffff16565b90508015610fb657610e91838261104d565b9250600060038381548110610ea257fe5b60009182526020822001546040516001600160a01b039091169184919081818185875af1925050503d8060008114610ef6576040519150601f19603f3d011682016040523d82523d6000602084013e610efb565b606091505b5090915050600181151514610f57576040805162461bcd60e51b815260206004820152601b60248201527f646973747269627574653a3a7472616e73666572206661696c65640000000000604482015290519081900360640190fd5b60038381548110610f6457fe5b6000918252602090912001546001600160a01b0316610f816106a7565b6040805185815290517f4f2d18324ee95128de091ed2adc501295479000ce4c2cec607aeb1b67e189e2f9181900360200190a3505b50600101610e43565b5033610fc96106a7565b6040805184815290517fb6bcab815b7a952b8759f2f92fc9981dc1156f6c11bf4dc7e9cb3036495e653a9181900360200190a36110046106a7565b6002555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6004818154811061103c57fe5b600091825260209091200154905081565b6000828201838110156106fd576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60006106fd836001600160a01b0384166115d2565b3390565b60008281526020819052604090206110d890826110a7565b15610635576110e56110bc565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081905260409020611141908261161c565b156106355761114e6110bc565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006106fd83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250611631565b60006106fd83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506116c8565b60006106fd838361172d565b60006106fd836001600160a01b038416611791565b80518251146112775760405162461bcd60e51b8152600401808060200182810382526027815260200180611a0a6027913960400191505060405180910390fd5b6000805b83518110156112b4576112aa83828151811061129357fe5b60200260200101518361104d90919063ffffffff16565b915060010161127b565b5080612710146112f55760405162461bcd60e51b81526004018080602001828103825260278152602001806119e36027913960400191505060405180910390fd5b8251611308906003906020860190611873565b50815161131c9060049060208501906118f0565b507f4edd0cfa6d0f0c578d77d6449d8b4408d162f7069b58cd63ff5cb3b50123c4598383604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561138457818101518382015260200161136c565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156113c35781810151838201526020016113ab565b5050505090500194505050505060405180910390a1505050565b6000826113ec57506000610700565b828202828482816113f957fe5b04146106fd5760405162461bcd60e51b81526004018080602001828103825260218152602001806119c26021913960400191505060405180910390fd5b6000610700826117a9565b6001546001600160a01b03163180156114d357600154604080517fe91299480000000000000000000000000000000000000000000000000000000081526004810184905290516001600160a01b039092169163e91299489160248082019260009290919082900301818387803b1580156114ba57600080fd5b505af11580156114ce573d6000803e3d6000fd5b505050505b50565b600154604080516370a0823160e01b81526001600160a01b0390921660048301525160009173b31f66aa3c1e785363f0875a1b74e27b85fd66c7916370a0823191602480820192602092909190829003018186803b15801561153757600080fd5b505afa15801561154b573d6000803e3d6000fd5b505050506040513d602081101561156157600080fd5b5051905080156114d35760015460408051636f63301b60e11b815273b31f66aa3c1e785363f0875a1b74e27b85fd66c760048201526024810184905290516001600160a01b039092169163dec660369160448082019260009290919082900301818387803b1580156114ba57600080fd5b60006115de8383611791565b61161457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610700565b506000610700565b60006106fd836001600160a01b0384166117ad565b600081848411156116c05760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561168557818101518382015260200161166d565b50505050905090810190601f1680156116b25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836117175760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561168557818101518382015260200161166d565b50600083858161172357fe5b0495945050505050565b8154600090821061176f5760405162461bcd60e51b81526004018080602001828103825260228152602001806119416022913960400191505060405180910390fd5b82600001828154811061177e57fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b6000818152600183016020526040812054801561186957835460001980830191908101906000908790839081106117e057fe5b90600052602060002001549050808760000184815481106117fd57fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061182d57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610700565b6000915050610700565b8280548282559060005260206000209081019282156118e0579160200282015b828111156118e057825182547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909116178255602090920191600190910190611893565b506118ec92915061192b565b5090565b8280548282559060005260206000209081019282156118e0579160200282015b828111156118e0578251825591602001919060010190611910565b5b808211156118ec576000815560010161192c56fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775f757064617465446973747269627574696f6e733a3a696e76616c696420726174696f426970735f757064617465446973747269627574696f6e733a3a646966666572656e74206c656e67746873416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a26469706673582212206e38a5fea3992783e21aa356ee0b9c77892ad035c80a24abf98fe1627fddc4b064736f6c63430007030033",
  "devdoc": {
    "details": "Includes public function to distribute all WAVAX and AVAX to designated payeesEpochs are used to stagger distributions",
    "kind": "dev",
    "methods": {
      "currentBalance()": {
        "returns": {
          "_0": "balance"
        }
      },
      "currentEpoch()": {
        "returns": {
          "_0": "number of current epoch"
        }
      },
      "distribute()": {
        "details": "Open for anyone to callSweeps available AVAX and WAVAX balances"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "nextEpoch()": {
        "returns": {
          "_0": "timestamp of next epoch"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "sweepTokens(address,uint256)": {
        "details": "Restricted to `TOKEN_SWEEPER_ROLE`This role is cannot sweep AVAX/WAVAX",
        "params": {
          "tokenAddress": "address",
          "tokenAmount": "amount"
        }
      },
      "updateDistributions(address[],uint256[])": {
        "details": "Restricted to `DISTRIBUTION_UPDATER_ROLE`",
        "params": {
          "addresses": "payees",
          "ratioBips": "payment ratios in bips, must add to 10000 // 100bps = 1%"
        }
      }
    },
    "stateVariables": {
      "WAVAX": {
        "details": "WAVAX"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DISTRIBUTION_UPDATER_ROLE()": {
        "notice": "Role to update payees and ratio of payments"
      },
      "TOKEN_SWEEPER_ROLE()": {
        "notice": "Role to sweep funds from this contract (excluding AVAX/WAVAX)"
      },
      "currentBalance()": {
        "notice": "Current feeCollector balance in WAVAX+AVAX"
      },
      "currentEpoch()": {
        "notice": "Current distribution epoch"
      },
      "distribute()": {
        "notice": "Distribute AVAX from this contract"
      },
      "distributionAddresses(uint256)": {
        "notice": "Array of payees. Upgradable"
      },
      "distributionRatios(uint256)": {
        "notice": "Array of payment ratios. Denominated in bips. Must sum to 10000 (100%). Upgradable"
      },
      "epochLength()": {
        "notice": "Minimum time between distributions"
      },
      "feeCollector()": {
        "notice": "YakFeeCollectorV1 address"
      },
      "lastPaymentEpoch()": {
        "notice": "Epoch of the last distribution"
      },
      "nextEpoch()": {
        "notice": "When the next distribution is allowed occur"
      },
      "startTimestamp()": {
        "notice": "Start time of the first epoch"
      },
      "sweepTokens(address,uint256)": {
        "notice": "Collect ERC20 from this contract"
      },
      "updateDistributions(address[],uint256[])": {
        "notice": "Change payment distributions"
      }
    },
    "notice": "YakARC is an Automated Revenue Collector",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23182,
        "contract": "contracts/YakARC.sol:YakARC",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)23178_storage)"
      },
      {
        "astId": 14814,
        "contract": "contracts/YakARC.sol:YakARC",
        "label": "feeCollector",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(YakFeeCollectorV1)99225"
      },
      {
        "astId": 14817,
        "contract": "contracts/YakARC.sol:YakARC",
        "label": "lastPaymentEpoch",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 14828,
        "contract": "contracts/YakARC.sol:YakARC",
        "label": "distributionAddresses",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 14832,
        "contract": "contracts/YakARC.sol:YakARC",
        "label": "distributionRatios",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(YakFeeCollectorV1)99225": {
        "encoding": "inplace",
        "label": "contract YakFeeCollectorV1",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)23178_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)23178_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)24969_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 24968,
            "contract": "contracts/YakARC.sol:YakARC",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)24704_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)23178_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 23175,
            "contract": "contracts/YakARC.sol:YakARC",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)24969_storage"
          },
          {
            "astId": 23177,
            "contract": "contracts/YakARC.sol:YakARC",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)24704_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 24699,
            "contract": "contracts/YakARC.sol:YakARC",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 24703,
            "contract": "contracts/YakARC.sol:YakARC",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}